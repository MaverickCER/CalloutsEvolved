/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/guilds";
exports.ids = ["pages/guilds"];
exports.modules = {

/***/ "./assets/ChevronIcon.js":
/*!*******************************!*\
  !*** ./assets/ChevronIcon.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\nvar _jsxFileName = \"C:\\\\Dev\\\\calloutsevolved\\\\assets\\\\ChevronIcon.js\";\n\n\n/*\r\nShows custom chevron logo created in figma. No attribution or credit required.\r\n*/\nconst ChevronIcon = ({\n  width,\n  height,\n  style,\n  fill,\n  title\n}) => {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n    viewBox: \"0 0 512 512\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: width,\n    height: height,\n    style: style,\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n      children: title ? title : 'chevron'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        d: \"M204.8 460.8L460.801 204.799L512.001 255.999L256 512L204.8 460.8Z\",\n        fill: fill ? fill : 'current'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        d: \"M256 512L0 256L51.2002 204.8L307.2 460.8L256 512Z\",\n        fill: fill ? fill : 'current'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, undefined)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, undefined), title ? title : 'chevron']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, undefined);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChevronIcon);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvQ2hldnJvbkljb24uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsV0FBVyxHQUFHLENBQUM7QUFBRUMsRUFBQUEsS0FBRjtBQUFTQyxFQUFBQSxNQUFUO0FBQWlCQyxFQUFBQSxLQUFqQjtBQUF3QkMsRUFBQUEsSUFBeEI7QUFBOEJDLEVBQUFBO0FBQTlCLENBQUQsS0FBMkM7QUFDN0Qsc0JBQ0U7QUFDRSxXQUFPLEVBQUMsYUFEVjtBQUVFLFNBQUssRUFBQyw0QkFGUjtBQUdFLFNBQUssRUFBRUosS0FIVDtBQUlFLFVBQU0sRUFBRUMsTUFKVjtBQUtFLFNBQUssRUFBRUMsS0FMVDtBQUFBLDRCQU1FO0FBQUEsZ0JBQVFFLEtBQUssR0FBR0EsS0FBSCxHQUFXO0FBQXhCO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBTkYsZUFPRTtBQUFBLDhCQUNFO0FBQ0UsYUFBSyxFQUFDLDRCQURSO0FBRUUsU0FBQyxFQUFDLG1FQUZKO0FBR0UsWUFBSSxFQUFFRCxJQUFJLEdBQUdBLElBQUgsR0FBVTtBQUh0QjtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQURGLGVBTUU7QUFDRSxhQUFLLEVBQUMsNEJBRFI7QUFFRSxTQUFDLEVBQUMsbURBRko7QUFHRSxZQUFJLEVBQUVBLElBQUksR0FBR0EsSUFBSCxHQUFVO0FBSHRCO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBTkY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQVBGLEVBbUJHQyxLQUFLLEdBQUdBLEtBQUgsR0FBVyxTQW5CbkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBREY7QUF1QkQsQ0F4QkQ7O0FBMEJBLGlFQUFlTCxXQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FsbG91dHNldm9sdmVkLy4vYXNzZXRzL0NoZXZyb25JY29uLmpzPzA1ZTciXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuU2hvd3MgY3VzdG9tIGNoZXZyb24gbG9nbyBjcmVhdGVkIGluIGZpZ21hLiBObyBhdHRyaWJ1dGlvbiBvciBjcmVkaXQgcmVxdWlyZWQuXHJcbiovXHJcbmNvbnN0IENoZXZyb25JY29uID0gKHsgd2lkdGgsIGhlaWdodCwgc3R5bGUsIGZpbGwsIHRpdGxlIH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPHN2Z1xyXG4gICAgICB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIlxyXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICAgICAgd2lkdGg9e3dpZHRofVxyXG4gICAgICBoZWlnaHQ9e2hlaWdodH1cclxuICAgICAgc3R5bGU9e3N0eWxlfT5cclxuICAgICAgPHRpdGxlPnt0aXRsZSA/IHRpdGxlIDogJ2NoZXZyb24nfTwvdGl0bGU+XHJcbiAgICAgIDxnPlxyXG4gICAgICAgIDxwYXRoXHJcbiAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICAgICAgICAgIGQ9XCJNMjA0LjggNDYwLjhMNDYwLjgwMSAyMDQuNzk5TDUxMi4wMDEgMjU1Ljk5OUwyNTYgNTEyTDIwNC44IDQ2MC44WlwiXHJcbiAgICAgICAgICBmaWxsPXtmaWxsID8gZmlsbCA6ICdjdXJyZW50J31cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxwYXRoXHJcbiAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICAgICAgICAgIGQ9XCJNMjU2IDUxMkwwIDI1Nkw1MS4yMDAyIDIwNC44TDMwNy4yIDQ2MC44TDI1NiA1MTJaXCJcclxuICAgICAgICAgIGZpbGw9e2ZpbGwgPyBmaWxsIDogJ2N1cnJlbnQnfVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvZz5cclxuICAgICAge3RpdGxlID8gdGl0bGUgOiAnY2hldnJvbid9XHJcbiAgICA8L3N2Zz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2hldnJvbkljb247XHJcbiJdLCJuYW1lcyI6WyJDaGV2cm9uSWNvbiIsIndpZHRoIiwiaGVpZ2h0Iiwic3R5bGUiLCJmaWxsIiwidGl0bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/ChevronIcon.js\n");

/***/ }),

/***/ "./context/AuthContext.js":
/*!********************************!*\
  !*** ./context/AuthContext.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useAuth\": () => (/* binding */ useAuth),\n/* harmony export */   \"AuthProvider\": () => (/* binding */ AuthProvider)\n/* harmony export */ });\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/auth */ \"firebase/auth\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../firebase/firebaseClient */ \"./firebase/firebaseClient.js\");\n/* harmony import */ var firebase_database__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/database */ \"firebase/database\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/router */ \"next/router\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__, firebase_database__WEBPACK_IMPORTED_MODULE_3__, firebase_auth__WEBPACK_IMPORTED_MODULE_0__]);\n([_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__, firebase_database__WEBPACK_IMPORTED_MODULE_3__, firebase_auth__WEBPACK_IMPORTED_MODULE_0__] = __webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__);\nvar _jsxFileName = \"C:\\\\Dev\\\\calloutsevolved\\\\context\\\\AuthContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n // import { getToken } from 'firebase/messaging';\n\n\nconst AuthContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createContext();\nconst useAuth = () => {\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n};\nconst AuthProvider = ({\n  children\n}) => {\n  const {\n    0: userData,\n    1: setUserData\n  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n    color: 'a',\n    displayName: 'Anonymous',\n    honor: 0,\n    infamy: 0,\n    isOpen: false,\n    isSessionIdPublic: false,\n    isStatusPublic: false,\n    sessionId: '',\n    status: 'online',\n    timestamp: Date.now(),\n    title: 'Anonymous',\n    userId: '0',\n    userPhotoURL: 'https://i.imgur.com/6X537cL.png'\n  });\n  const {\n    0: currentUser,\n    1: setCurrentUser\n  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n  const router = (0,next_router__WEBPACK_IMPORTED_MODULE_4__.useRouter)();\n\n  const anonymousLogin = async id => {\n    const names = ['Barbarian', 'Bard', 'Cleric', 'Druid', 'Fighter', 'Monk', 'Paladin', 'Ranger', 'Rogue', 'Sorcerer', 'Warlock', 'Wizard', 'Artificer', 'Hunter', 'Titan', 'Fighter', 'Warrior', 'Soldier', 'Assassin', 'Ninja', 'Mage', 'Archer', 'Ranger', 'Berserker', 'Priest', 'Enchanter', 'Necromancer', 'Shadowknight', 'Summoner', 'Dancer', 'Dragoon', 'Lancer', 'Dragon', 'Sniper', 'Rifleman', 'Gunner', 'Scout', 'Poltergeist', 'Clown', 'Trickster', 'Defender', 'Medic', 'Mechanic', 'Recon', 'Assault', 'Support', 'Engineer', 'Invader', 'Collector', 'Reaper', 'Sentry', 'Runner', 'Centurion', 'Colossus', 'Legionary', 'Psion', 'Phalanx', 'Knight', 'Ogre', 'Thrall', 'Acolyte', 'Goblin', 'Harpy', 'Hobgoblin', 'Hydra', 'Minotaur', 'Mongrel', 'Screeb', 'Raider', 'Lurker', 'Ravager', 'Chieftain', 'Dreg', 'Shank', 'Vandal', 'Captain', 'Servitor', 'Walker', 'Pike', 'Shrieker', 'Seeder', 'Interceptor', 'Tank', 'Nightmare'];\n    const user = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInAnonymously)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth);\n    const name = `Anonymous ${names[Math.floor(Math.random() * names.length)]}`;\n\n    if (user) {\n      let updates = {};\n      updates[`userData/${user.user.uid}/color`] = 'cba';\n      updates[`userData/${user.user.uid}/displayName`] = name;\n      updates[`userData/${user.user.uid}/honor`] = 0;\n      updates[`userData/${user.user.uid}/infamy`] = 0;\n      updates[`userData/${user.user.uid}/isSessionIdPublic`] = true;\n      updates[`userData/${user.user.uid}/sessionId`] = id;\n      updates[`userData/${user.user.uid}/title`] = 'Unknown';\n      updates[`userData/${user.user.uid}/userId`] = user.user.uid;\n      updates[`userData/${user.user.uid}/userPhotoURL`] = 'https://ratchet-galaxy.com/image/fanarts/4/8/408-slim-cognito.jpg';\n      updates[`userStatus/${user.user.uid}/isStatusPublic`] = false;\n      updates[`userStatus/${user.user.uid}/status`] = 'online';\n      updates[`userStatus/${user.user.uid}/timestamp`] = Date.now();\n      (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), updates);\n      setUserData({\n        color: 'a',\n        displayName: 'Anonymous',\n        honor: 0,\n        infamy: 0,\n        isOpen: false,\n        isSessionIdPublic: false,\n        isStatusPublic: false,\n        sessionId: 'sessions',\n        status: 'online',\n        timestamp: Date.now(),\n        title: 'Anonymous',\n        userId: '0',\n        userPhotoURL: 'https://i.imgur.com/6X537cL.png'\n      });\n    }\n  };\n\n  const logout = () => {\n    if (currentUser && currentUser.isAnonymous) {\n      deletePlayer();\n    } else {\n      (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signOut)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth).then(() => {\n        router.push('/');\n      }).catch(err => {\n        console.error('LOGOUT ERROR:', err);\n      });\n    }\n\n    setUserData({\n      color: 'a',\n      displayName: 'Anonymous',\n      honor: 0,\n      infamy: 0,\n      isOpen: false,\n      isSessionIdPublic: false,\n      isStatusPublic: false,\n      sessionId: 'sessions',\n      status: 'online',\n      timestamp: Date.now(),\n      title: 'Anonymous',\n      userId: '0',\n      userPhotoURL: 'https://i.imgur.com/6X537cL.png'\n    });\n  };\n\n  const resetPassword = email => {\n    return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.sendPasswordResetEmail)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth, email);\n  };\n\n  const signin = (email, password) => {\n    return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithEmailAndPassword)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth, email, password);\n  };\n\n  const signup = async (email, password, username) => {\n    if (currentUser && currentUser.isAnonymous) {\n      try {\n        const credential = firebase_auth__WEBPACK_IMPORTED_MODULE_0__.EmailAuthProvider.credential(email, password);\n        const user = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.linkWithCredential)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth.currentUser, credential);\n\n        if (user) {\n          let updates = {};\n          updates[`userData/${user.user.uid}/color`] = 'a';\n          updates[`userData/${user.user.uid}/displayName`] = username;\n          updates[`userData/${user.user.uid}/honor`] = 0;\n          updates[`userData/${user.user.uid}/infamy`] = 0;\n          updates[`userData/${user.user.uid}/isSessionIdPublic`] = true;\n          updates[`userData/${user.user.uid}/isStatusPublic`] = true;\n          updates[`userData/${user.user.uid}/sessionId`] = '';\n          updates[`userData/${user.user.uid}/status`] = 'Online';\n          updates[`userData/${user.user.uid}/timestamp`] = (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.serverTimestamp)();\n          updates[`userData/${user.user.uid}/title`] = 'Gamer';\n          updates[`userData/${user.user.uid}/userId`] = user.user.uid;\n          updates[`userData/${user.user.uid}/userPhotoURL`] = 'https://i.imgur.com/yk5wTiF.png';\n          (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), updates);\n          setUserData({\n            bio: '',\n            color: 'a',\n            displayName: username,\n            honor: 0,\n            infamy: 0,\n            isSessionIdPublic: true,\n            isStatusPublic: true,\n            sessionId: '',\n            status: 'Online',\n            timestamp: Date.now(),\n            title: 'Gamer',\n            userId: user.user.uid,\n            userPhotoURL: 'https://i.imgur.com/yk5wTiF.png'\n          });\n          return user;\n        }\n      } catch (error) {\n        console.error('AuthContext signup 1 ', error.message);\n        return error;\n      }\n    } else {\n      try {\n        const user = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.createUserWithEmailAndPassword)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth, email, password);\n\n        if (user) {\n          let updates = {};\n          updates[`userData/${user.user.uid}/color`] = 'a';\n          updates[`userData/${user.user.uid}/displayName`] = username;\n          updates[`userData/${user.user.uid}/honor`] = 0;\n          updates[`userData/${user.user.uid}/infamy`] = 0;\n          updates[`userData/${user.user.uid}/isSessionIdPublic`] = true;\n          updates[`userData/${user.user.uid}/isStatusPublic`] = true;\n          updates[`userData/${user.user.uid}/sessionId`] = '';\n          updates[`userData/${user.user.uid}/status`] = 'Online';\n          updates[`userData/${user.user.uid}/timestamp`] = (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.serverTimestamp)();\n          updates[`userData/${user.user.uid}/title`] = 'Gamer';\n          updates[`userData/${user.user.uid}/userId`] = user.user.uid;\n          updates[`userData/${user.user.uid}/userPhotoURL`] = 'https://i.imgur.com/yk5wTiF.png';\n          (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), updates);\n          setUserData({\n            bio: '',\n            color: 'a',\n            displayName: username,\n            honor: 0,\n            infamy: 0,\n            isSessionIdPublic: true,\n            isStatusPublic: true,\n            sessionId: '',\n            status: 'Online',\n            timestamp: Date.now(),\n            title: 'Gamer',\n            userId: user.user.uid,\n            userPhotoURL: 'https://i.imgur.com/yk5wTiF.png'\n          });\n          return user;\n        }\n      } catch (error) {\n        console.error('AuthContext signup 2 ', error.message);\n        return error;\n      }\n    }\n  };\n\n  const updateDisplayName = async displayName => {\n    try {\n      (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database, 'userData/' + currentUser.uid), {\n        displayName: displayName\n      });\n    } catch (error) {\n      console.error(`AuthContext updateDisplayName 1 `, error.message);\n    }\n  };\n\n  const updateUserEmail = async (email, password) => {\n    const credential = firebase_auth__WEBPACK_IMPORTED_MODULE_0__.EmailAuthProvider.credential(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth.currentUser.email, password);\n    const result = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reauthenticateWithCredential)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth.currentUser, credential);\n\n    if (result) {\n      return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updateEmail)(currentUser, email).then(() => {\n        setCurrentUser(_objectSpread(_objectSpread({}, currentUser), {}, {\n          email: email\n        }));\n      });\n    }\n  };\n\n  const updateUserPassword = async (passwordOld, passwordNew) => {\n    const credential = firebase_auth__WEBPACK_IMPORTED_MODULE_0__.EmailAuthProvider.credential(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth.currentUser.email, passwordOld);\n    const result = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reauthenticateWithCredential)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth.currentUser, credential);\n\n    if (result) {\n      return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updatePassword)(currentUser, passwordNew);\n    }\n  };\n\n  const updatePhotoURL = async photo => {\n    try {\n      (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database, 'userData/' + currentUser.uid), {\n        userPhotoURL: photo\n      });\n    } catch (error) {\n      console.error(`AuthContext updatePhotoURL 1 `, error.message);\n    }\n  };\n\n  const removeMember = async (playerId, guildId, guildLocation, guildTitle, isBlacklist = null, setLoading) => {\n    if (setLoading) {\n      setLoading(true);\n    }\n\n    if (guildTitle === 'titleModerator' || guildTitle === 'titleMaster' || playerId === currentUser.uid) {\n      let updates = {};\n      updates[`guildData${guildLocation}/${guildId}/users`] = (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.increment)(-1);\n      updates[`guildLists/${guildId}/blacklist/${playerId}`] = isBlacklist;\n      updates[`guildLists/${guildId}/whitelist/${playerId}`] = null;\n      updates[`userGuilds/${playerId}/${guildId}`] = null;\n      (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), updates).then(() => {\n        if (setLoading) {\n          setLoading(false);\n        }\n      }).catch(e => {\n        console.error(e);\n      });\n    }\n  };\n\n  const manageMember = async (playerId, guildId, title, setLoading) => {\n    if (setLoading) {\n      setLoading(true);\n    }\n\n    (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.get)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.child)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), `guildLists/${guildId}/${currentUser.uid}`)).then(DataSnapshot => {\n      if (DataSnapshot.exists()) {\n        if (DataSnapshot.val() === 'titleMaster') {\n          if (title === 'titleMaster' || title === 'titleModerator' || title === 'titleMember') {\n            let updates = {};\n            updates[`guildLists/${guildId}/${playerId}`] = title;\n\n            if (title === 'titleMaster') {\n              updates[`guildLists/${guildId}/${currentUser.uid}`] = 'titleModerator';\n            }\n\n            (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), updates);\n          }\n        }\n      }\n    }).finally(() => {\n      if (setLoading) {\n        setLoading(false);\n      }\n    });\n  };\n\n  const removeGamer = async (playerId, isBlacklist, setLoading) => {\n    if (setLoading) {\n      setLoading(true);\n    }\n\n    (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.get)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.child)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), `sessionLists/${userData.sessionId}/whitelist/${playerId}`)).then(DataSnapshot => {\n      if (DataSnapshot.exists()) {\n        if (userData.sessionId === currentUser.uid || playerId === currentUser.uid) {\n          let updates = {};\n\n          if (playerId === currentUser.uid && currentUser.uid === userData.sessionId) {\n            updates[`sessionActions/${userData.sessionId}`] = null;\n            updates[`sessionButtons/${userData.sessionId}`] = null;\n            updates[`sessionData/${userData.sessionId}`] = null;\n            updates[`sessionLists/${userData.sessionId}`] = null;\n            updates[`sessionMessages/${userData.sessionId}`] = null;\n            updates[`sessionMsgHonors/${userData.sessionId}`] = null;\n            updates[`sessionSpeech/${userData.sessionId}`] = null;\n            (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), updates);\n          } else {\n            (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.get)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.child)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), `userData/${playerId}/sessionId`)).then(Snap => {\n              if (Snap.exists()) {\n                if (Snap.val() === userData.sessionId) {\n                  updates[`userData/${playerId}/sessionId`] = '';\n                }\n              }\n\n              let obj = {};\n\n              for (let i = 1; i < 17; i++) {\n                let char = (i + 9).toString(36).toLowerCase();\n                obj = _objectSpread(_objectSpread({}, obj), {}, {\n                  [char]: {\n                    displayName: '',\n                    isShift: false,\n                    timestamp: 0,\n                    userId: ''\n                  }\n                });\n              }\n\n              updates[`sessionActions/${userData.sessionId}`] = _objectSpread({}, obj);\n              updates[`sessionLists/${userData.sessionId}/whitelist/${playerId}`] = null;\n              updates[`sessionSpeech/${userData.sessionId}/${playerId}`] = null;\n\n              if (isBlacklist) {\n                updates[`sessionLists/${userData.sessionId}/blacklist/${playerId}`] = true;\n              }\n\n              (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), updates);\n            });\n          }\n        }\n      }\n    }).finally(() => {\n      if (setLoading) {\n        setLoading(false);\n      }\n    });\n  };\n\n  const deletePlayer = async (setLoading, password) => {\n    if (setLoading) {\n      setLoading(true);\n    }\n\n    let updates = {};\n    let tempArr = [];\n    await (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.get)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.child)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), `userGuilds/${userData.userId}`)).then(async DataSnapshot => {\n      if (DataSnapshot.exists()) {\n        let array = Object.keys(DataSnapshot.val());\n\n        for (let i = 0; i < array.length; i++) {\n          await (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.get)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.child)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), `guildAliases/${array[i]}/whitelist/${userData.userId}`)).then(DataSnapshot1 => {\n            if (DataSnapshot1.exists()) {\n              if (DataSnapshot1.val() === 'titleMaster') {\n                updates[`guildAliases/${array[i]}`] = null;\n                updates[`guildRooms/${array[i]}`] = null;\n                updates[`guildLists/${array[i]}`] = null;\n                updates[`guildMessages/${array[i]}`] = null;\n                updates[`guildMsgHonors/${array[i]}`] = null;\n                updates[`guildReputation/${array[i]}`] = null;\n              } else {\n                updates[`guildAliases/${array[i]}/users`] = (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.increment)(-1);\n                updates[`guildLists/${array[i]}/${userData.userId}`] = null;\n              }\n\n              tempArr = [...tempArr, DataSnapshot1.key];\n            }\n          });\n        }\n\n        tempArr = [...tempArr, DataSnapshot.key];\n      }\n    });\n    await (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.get)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.child)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), `userData/${userData.userId}/sessionId`)).then(DataSnapshot => {\n      if (DataSnapshot.exists()) {\n        if (DataSnapshot.val() === userData.userId) {\n          updates[`sessionActions/${DataSnapshot.val()}`] = null;\n          updates[`sessionButtons/${DataSnapshot.val()}`] = null;\n          updates[`sessionData/${DataSnapshot.val()}`] = null;\n          updates[`sessionLists/${DataSnapshot.val()}`] = null;\n          updates[`sessionMessages/${DataSnapshot.val()}`] = null;\n          updates[`sessionMsgHonors/${DataSnapshot.val()}`] = null;\n          updates[`sessionSpeech/${DataSnapshot.val()}`] = null;\n        } else {\n          let obj = {};\n\n          for (let i = 1; i < 17; i++) {\n            let char = (i + 9).toString(36).toLowerCase();\n            obj = _objectSpread(_objectSpread({}, obj), {}, {\n              [char]: {\n                displayName: '',\n                isShift: false,\n                timestamp: 0,\n                userId: ''\n              }\n            });\n          }\n\n          updates[`sessionActions/${DataSnapshot.val()}`] = _objectSpread({}, obj);\n          updates[`sessionData/${DataSnapshot.val()}/users`] = (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.increment)(-1);\n          updates[`sessionLists/${DataSnapshot.val()}/whitelist/${userData.userId}`] = null;\n          updates[`sessionSpeech/${DataSnapshot.val()}/${userData.userId}`] = null;\n          updates[`userBios/${userData.userId}`] = null;\n          updates[`userData/${userData.userId}`] = null;\n          updates[`userGuilds/${userData.userId}`] = null;\n          updates[`userLists/${userData.userId}`] = null;\n          updates[`userSettings/${userData.userId}`] = null;\n          updates[`userStatus/${userData.userId}`] = null;\n        }\n\n        tempArr = [...tempArr, DataSnapshot.key];\n      }\n    });\n    Promise.allSettled(tempArr).then(() => {\n      (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), updates);\n    }).finally(async () => {\n      if (setLoading) {\n        setLoading(false);\n      }\n\n      if (!password) return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.deleteUser)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth.currentUser);\n      const credential = firebase_auth__WEBPACK_IMPORTED_MODULE_0__.EmailAuthProvider.credential(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth.currentUser.email, password);\n      const result = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reauthenticateWithCredential)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth.currentUser, credential);\n\n      if (result) {\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.deleteUser)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth.currentUser);\n      }\n    });\n  };\n\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const unsubscribe = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.onAuthStateChanged)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.auth, user => {\n      setCurrentUser(user);\n\n      if (user) {\n        // const messagingToken = getToken(messaging, {\n        //   vapidKey: process.env.NEXT_PUBLIC_FIREBASE_VAPIDKEY,\n        // });\n        (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.onValue)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database, `userData/${user.uid}`), snapshot => {\n          if (snapshot.exists()) {\n            if (user.isAnonymous && snapshot.val().sessionId !== userData.sessionId && userData.sessionId !== '') {\n              deletePlayer();\n            }\n\n            setUserData(snapshot.val());\n          }\n        });\n        presence();\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n\n  const presence = () => {\n    if (userData.isStatusPublic) {\n      // stores the timestamp of my last disconnect (the last time I was seen online)\n      (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.onValue)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database, '.info/connected'), snap => {\n        if (snap.val() === true) {\n          // We're connected (or reconnected)! Do anything here that should happen only if online (or on reconnect)\n          let connect = {};\n          connect[`userData/${userData.userId}/status`] = 'online';\n          connect[`userData/${userData.userId}/timestamp`] = (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.serverTimestamp)();\n          (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database)).update(connect); // When user disconnect, update the last time user was seen online\n\n          let disconnect = {};\n          disconnect[`userData/${userData.userId}/status`] = 'offline';\n          disconnect[`userData/${userData.userId}/timestamp`] = (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.serverTimestamp)(); // if (session === userData.userId) {\n          //   disconnect[`sessionActions/${userData.sessionId}`] = null;\n          //   disconnect[`sessionButtons/${userData.sessionId}`] = null;\n          //   disconnect[`sessionData/${userData.sessionId}`] = null;\n          //   disconnect[`sessionLists/${userData.sessionId}`] = null;\n          //   disconnect[`sessionMessages/${userData.sessionId}`] = null;\n          //   disconnect[`sessionMsgHonors/${userData.sessionId}`] = null;\n          //   disconnect[`sessionSpeech/${userData.sessionId}`] = null;\n          // } else {\n          //   disconnect[`sessionData/${userData.sessionId}/usersCount`] = increment(-1);\n          //   disconnect[`sessionData/${userData.sessionId}/timestamp`] = serverTimestamp();\n          //   disconnect[`sessionLists/${userData.sessionId}/whitelist/${userData.userId}`] = null;\n          //   disconnect[`sessionSpeech/${userData.sessionId}/${userData.userId}`] = null;\n          // }\n\n          (0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.onDisconnect)((0,firebase_database__WEBPACK_IMPORTED_MODULE_3__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database)).update(disconnect);\n        }\n      });\n    }\n  };\n\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (false) {}\n  }, []);\n  const value = {\n    anonymousLogin,\n    deletePlayer,\n    currentUser,\n    logout,\n    resetPassword,\n    signin,\n    signup,\n    removeGamer,\n    manageMember,\n    removeMember,\n    setCurrentUser,\n    updateDisplayName,\n    updateUserEmail,\n    updateUserPassword,\n    updatePhotoURL,\n    userData,\n    setUserData\n  };\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 650,\n    columnNumber: 10\n  }, undefined);\n};\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb250ZXh0L0F1dGhDb250ZXh0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQWNBO0FBQ0E7QUFDQTtDQWFBOzs7QUFHQSxNQUFNNEIsV0FBVyxnQkFBR2hCLDBEQUFBLEVBQXBCO0FBRU8sTUFBTWtCLE9BQU8sR0FBRyxNQUFNO0FBQzNCLFNBQU9qQixpREFBVSxDQUFDZSxXQUFELENBQWpCO0FBQ0QsQ0FGTTtBQUlBLE1BQU1HLFlBQVksR0FBRyxDQUFDO0FBQUVDLEVBQUFBO0FBQUYsQ0FBRCxLQUFrQjtBQUM1QyxRQUFNO0FBQUEsT0FBQ0MsUUFBRDtBQUFBLE9BQVdDO0FBQVgsTUFBMEJuQiwrQ0FBUSxDQUFDO0FBQ3ZDb0IsSUFBQUEsS0FBSyxFQUFFLEdBRGdDO0FBRXZDQyxJQUFBQSxXQUFXLEVBQUUsV0FGMEI7QUFHdkNDLElBQUFBLEtBQUssRUFBRSxDQUhnQztBQUl2Q0MsSUFBQUEsTUFBTSxFQUFFLENBSitCO0FBS3ZDQyxJQUFBQSxNQUFNLEVBQUUsS0FMK0I7QUFNdkNDLElBQUFBLGlCQUFpQixFQUFFLEtBTm9CO0FBT3ZDQyxJQUFBQSxjQUFjLEVBQUUsS0FQdUI7QUFRdkNDLElBQUFBLFNBQVMsRUFBRSxFQVI0QjtBQVN2Q0MsSUFBQUEsTUFBTSxFQUFFLFFBVCtCO0FBVXZDQyxJQUFBQSxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBTCxFQVY0QjtBQVd2Q0MsSUFBQUEsS0FBSyxFQUFFLFdBWGdDO0FBWXZDQyxJQUFBQSxNQUFNLEVBQUUsR0FaK0I7QUFhdkNDLElBQUFBLFlBQVksRUFBRTtBQWJ5QixHQUFELENBQXhDO0FBZUEsUUFBTTtBQUFBLE9BQUNDLFdBQUQ7QUFBQSxPQUFjQztBQUFkLE1BQWdDcEMsK0NBQVEsQ0FBQyxJQUFELENBQTlDO0FBQ0EsUUFBTXFDLE1BQU0sR0FBR3pCLHNEQUFTLEVBQXhCOztBQUVBLFFBQU0wQixjQUFjLEdBQUcsTUFBT0MsRUFBUCxJQUFjO0FBQ25DLFVBQU1DLEtBQUssR0FBRyxDQUNaLFdBRFksRUFFWixNQUZZLEVBR1osUUFIWSxFQUlaLE9BSlksRUFLWixTQUxZLEVBTVosTUFOWSxFQU9aLFNBUFksRUFRWixRQVJZLEVBU1osT0FUWSxFQVVaLFVBVlksRUFXWixTQVhZLEVBWVosUUFaWSxFQWFaLFdBYlksRUFjWixRQWRZLEVBZVosT0FmWSxFQWdCWixTQWhCWSxFQWlCWixTQWpCWSxFQWtCWixTQWxCWSxFQW1CWixVQW5CWSxFQW9CWixPQXBCWSxFQXFCWixNQXJCWSxFQXNCWixRQXRCWSxFQXVCWixRQXZCWSxFQXdCWixXQXhCWSxFQXlCWixRQXpCWSxFQTBCWixXQTFCWSxFQTJCWixhQTNCWSxFQTRCWixjQTVCWSxFQTZCWixVQTdCWSxFQThCWixRQTlCWSxFQStCWixTQS9CWSxFQWdDWixRQWhDWSxFQWlDWixRQWpDWSxFQWtDWixRQWxDWSxFQW1DWixVQW5DWSxFQW9DWixRQXBDWSxFQXFDWixPQXJDWSxFQXNDWixhQXRDWSxFQXVDWixPQXZDWSxFQXdDWixXQXhDWSxFQXlDWixVQXpDWSxFQTBDWixPQTFDWSxFQTJDWixVQTNDWSxFQTRDWixPQTVDWSxFQTZDWixTQTdDWSxFQThDWixTQTlDWSxFQStDWixVQS9DWSxFQWdEWixTQWhEWSxFQWlEWixXQWpEWSxFQWtEWixRQWxEWSxFQW1EWixRQW5EWSxFQW9EWixRQXBEWSxFQXFEWixXQXJEWSxFQXNEWixVQXREWSxFQXVEWixXQXZEWSxFQXdEWixPQXhEWSxFQXlEWixTQXpEWSxFQTBEWixRQTFEWSxFQTJEWixNQTNEWSxFQTREWixRQTVEWSxFQTZEWixTQTdEWSxFQThEWixRQTlEWSxFQStEWixPQS9EWSxFQWdFWixXQWhFWSxFQWlFWixPQWpFWSxFQWtFWixVQWxFWSxFQW1FWixTQW5FWSxFQW9FWixRQXBFWSxFQXFFWixRQXJFWSxFQXNFWixRQXRFWSxFQXVFWixTQXZFWSxFQXdFWixXQXhFWSxFQXlFWixNQXpFWSxFQTBFWixPQTFFWSxFQTJFWixRQTNFWSxFQTRFWixTQTVFWSxF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RUFBckUsQ0FWdUIsQ0FXdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUgsVUFBQUEsK0RBQVksQ0FBQ0Usc0RBQUcsQ0FBQ1AsOERBQUQsQ0FBSixDQUFaLENBQTRCUyxNQUE1QixDQUFtQ2tHLFVBQW5DO0FBQ0Q7QUFDRixPQTdCTSxDQUFQO0FBOEJEO0FBQ0YsR0FsQ0Q7O0FBb0NBOUcsRUFBQUEsZ0RBQVMsQ0FBQyxNQUFNO0FBQ2QsZUFBbUMsRUFrQmxDO0FBQ0YsR0FwQlEsRUFvQk4sRUFwQk0sQ0FBVDtBQXNCQSxRQUFNa0gsS0FBSyxHQUFHO0FBQ1ozRSxJQUFBQSxjQURZO0FBRVphLElBQUFBLFlBRlk7QUFHWmhCLElBQUFBLFdBSFk7QUFJWmMsSUFBQUEsTUFKWTtBQUtaUyxJQUFBQSxhQUxZO0FBTVpFLElBQUFBLE1BTlk7QUFPWkUsSUFBQUEsTUFQWTtBQVFaMEIsSUFBQUEsV0FSWTtBQVNaTCxJQUFBQSxZQVRZO0FBVVpSLElBQUFBLFlBVlk7QUFXWnZDLElBQUFBLGNBWFk7QUFZWitCLElBQUFBLGlCQVpZO0FBYVpDLElBQUFBLGVBYlk7QUFjWkUsSUFBQUEsa0JBZFk7QUFlWkcsSUFBQUEsY0FmWTtBQWdCWnZELElBQUFBLFFBaEJZO0FBaUJaQyxJQUFBQTtBQWpCWSxHQUFkO0FBb0JBLHNCQUFPLDhEQUFDLFdBQUQsQ0FBYSxRQUFiO0FBQXNCLFNBQUssRUFBRThGLEtBQTdCO0FBQUEsY0FBcUNoRztBQUFyQztBQUFBO0FBQUE7QUFBQTtBQUFBLGVBQVA7QUFDRCxDQXBtQk0sQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGxvdXRzZXZvbHZlZC8uL2NvbnRleHQvQXV0aENvbnRleHQuanM/MTM5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEVtYWlsQXV0aFByb3ZpZGVyLFxyXG4gIGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCxcclxuICBkZWxldGVVc2VyLFxyXG4gIGxpbmtXaXRoQ3JlZGVudGlhbCxcclxuICBvbkF1dGhTdGF0ZUNoYW5nZWQsXHJcbiAgcmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbCxcclxuICBzZW5kUGFzc3dvcmRSZXNldEVtYWlsLFxyXG4gIHNpZ25JbkFub255bW91c2x5LFxyXG4gIHNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkLFxyXG4gIHNpZ25PdXQsXHJcbiAgdXBkYXRlRW1haWwsXHJcbiAgdXBkYXRlUGFzc3dvcmQsXHJcbn0gZnJvbSAnZmlyZWJhc2UvYXV0aCc7XHJcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBhdXRoLCBkYXRhYmFzZSwgbWVzc2FnaW5nIH0gZnJvbSAnLi4vZmlyZWJhc2UvZmlyZWJhc2VDbGllbnQnO1xyXG5pbXBvcnQge1xyXG4gIGNoaWxkLFxyXG4gIGdldCxcclxuICBpbmNyZW1lbnQsXHJcbiAgb25EaXNjb25uZWN0LFxyXG4gIG9uVmFsdWUsXHJcbiAgcmVmLFxyXG4gIHNlcnZlclRpbWVzdGFtcCxcclxuICB1cGRhdGUsXHJcbn0gZnJvbSAnZmlyZWJhc2UvZGF0YWJhc2UnO1xyXG5cclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9yb3V0ZXInO1xyXG5cclxuLy8gaW1wb3J0IHsgZ2V0VG9rZW4gfSBmcm9tICdmaXJlYmFzZS9tZXNzYWdpbmcnO1xyXG5cclxuXHJcbmNvbnN0IEF1dGhDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUF1dGggPSAoKSA9PiB7XHJcbiAgcmV0dXJuIHVzZUNvbnRleHQoQXV0aENvbnRleHQpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IEF1dGhQcm92aWRlciA9ICh7IGNoaWxkcmVuIH0pID0+IHtcclxuICBjb25zdCBbdXNlckRhdGEsIHNldFVzZXJEYXRhXSA9IHVzZVN0YXRlKHtcclxuICAgIGNvbG9yOiAnYScsXHJcbiAgICBkaXNwbGF5TmFtZTogJ0Fub255bW91cycsXHJcbiAgICBob25vcjogMCxcclxuICAgIGluZmFteTogMCxcclxuICAgIGlzT3BlbjogZmFsc2UsXHJcbiAgICBpc1Nlc3Npb25JZFB1YmxpYzogZmFsc2UsXHJcbiAgICBpc1N0YXR1c1B1YmxpYzogZmFsc2UsXHJcbiAgICBzZXNzaW9uSWQ6ICcnLFxyXG4gICAgc3RhdHVzOiAnb25saW5lJyxcclxuICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgIHRpdGxlOiAnQW5vbnltb3VzJyxcclxuICAgIHVzZXJJZDogJzAnLFxyXG4gICAgdXNlclBob3RvVVJMOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS82WDUzN2NMLnBuZycsXHJcbiAgfSk7XHJcbiAgY29uc3QgW2N1cnJlbnRVc2VyLCBzZXRDdXJyZW50VXNlcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcclxuXHJcbiAgY29uc3QgYW5vbnltb3VzTG9naW4gPSBhc3luYyAoaWQpID0+IHtcclxuICAgIGNvbnN0IG5hbWVzID0gW1xyXG4gICAgICAnQmFyYmFyaWFuJyxcclxuICAgICAgJ0JhcmQnLFxyXG4gICAgICAnQ2xlcmljJyxcclxuICAgICAgJ0RydWlkJyxcclxuICAgICAgJ0ZpZ2h0ZXInLFxyXG4gICAgICAnTW9uaycsXHJcbiAgICAgICdQYWxhZGluJyxcclxuICAgICAgJ1JhbmdlcicsXHJcbiAgICAgICdSb2d1ZScsXHJcbiAgICAgICdTb3JjZXJlcicsXHJcbiAgICAgICdXYXJsb2NrJyxcclxuICAgICAgJ1dpemFyZCcsXHJcbiAgICAgICdBcnRpZmljZXInLFxyXG4gICAgICAnSHVudGVyJyxcclxuICAgICAgJ1RpdGFuJyxcclxuICAgICAgJ0ZpZ2h0ZXInLFxyXG4gICAgICAnV2FycmlvcicsXHJcbiAgICAgICdTb2xkaWVyJyxcclxuICAgICAgJ0Fzc2Fzc2luJyxcclxuICAgICAgJ05pbmphJyxcclxuICAgICAgJ01hZ2UnLFxyXG4gICAgICAnQXJjaGVyJyxcclxuICAgICAgJ1JhbmdlcicsXHJcbiAgICAgICdCZXJzZXJrZXInLFxyXG4gICAgICAnUHJpZXN0JyxcclxuICAgICAgJ0VuY2hhbnRlcicsXHJcbiAgICAgICdOZWNyb21hbmNlcicsXHJcbiAgICAgICdTaGFkb3drbmlnaHQnLFxyXG4gICAgICAnU3VtbW9uZXInLFxyXG4gICAgICAnRGFuY2VyJyxcclxuICAgICAgJ0RyYWdvb24nLFxyXG4gICAgICAnTGFuY2VyJyxcclxuICAgICAgJ0RyYWdvbicsXHJcbiAgICAgICdTbmlwZXInLFxyXG4gICAgICAnUmlmbGVtYW4nLFxyXG4gICAgICAnR3VubmVyJyxcclxuICAgICAgJ1Njb3V0JyxcclxuICAgICAgJ1BvbHRlcmdlaXN0JyxcclxuICAgICAgJ0Nsb3duJyxcclxuICAgICAgJ1RyaWNrc3RlcicsXHJcbiAgICAgICdEZWZlbmRlcicsXHJcbiAgICAgICdNZWRpYycsXHJcbiAgICAgICdNZWNoYW5pYycsXHJcbiAgICAgICdSZWNvbicsXHJcbiAgICAgICdBc3NhdWx0JyxcclxuICAgICAgJ1N1cHBvcnQnLFxyXG4gICAgICAnRW5naW5lZXInLFxyXG4gICAgICAnSW52YWRlcicsXHJcbiAgICAgICdDb2xsZWN0b3InLFxyXG4gICAgICAnUmVhcGVyJyxcclxuICAgICAgJ1NlbnRyeScsXHJcbiAgICAgICdSdW5uZXInLFxyXG4gICAgICAnQ2VudHVyaW9uJyxcclxuICAgICAgJ0NvbG9zc3VzJyxcclxuICAgICAgJ0xlZ2lvbmFyeScsXHJcbiAgICAgICdQc2lvbicsXHJcbiAgICAgICdQaGFsYW54JyxcclxuICAgICAgJ0tuaWdodCcsXHJcbiAgICAgICdPZ3JlJyxcclxuICAgICAgJ1RocmFsbCcsXHJcbiAgICAgICdBY29seXRlJyxcclxuICAgICAgJ0dvYmxpbicsXHJcbiAgICAgICdIYXJweScsXHJcbiAgICAgICdIb2Jnb2JsaW4nLFxyXG4gICAgICAnSHlkcmEnLFxyXG4gICAgICAnTWlub3RhdXInLFxyXG4gICAgICAnTW9uZ3JlbCcsXHJcbiAgICAgICdTY3JlZWInLFxyXG4gICAgICAnUmFpZGVyJyxcclxuICAgICAgJ0x1cmtlcicsXHJcbiAgICAgICdSYXZhZ2VyJyxcclxuICAgICAgJ0NoaWVmdGFpbicsXHJcbiAgICAgICdEcmVnJyxcclxuICAgICAgJ1NoYW5rJyxcclxuICAgICAgJ1ZhbmRhbCcsXHJcbiAgICAgICdDYXB0YWluJyxcclxuICAgICAgJ1NlcnZpdG9yJyxcclxuICAgICAgJ1dhbGtlcicsXHJcbiAgICAgICdQaWtlJyxcclxuICAgICAgJ1Nocmlla2VyJyxcclxuICAgICAgJ1NlZWRlcicsXHJcbiAgICAgICdJbnRlcmNlcHRvcicsXHJcbiAgICAgICdUYW5rJyxcclxuICAgICAgJ05pZ2h0bWFyZScsXHJcbiAgICBdO1xyXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHNpZ25JbkFub255bW91c2x5KGF1dGgpO1xyXG4gICAgY29uc3QgbmFtZSA9IGBBbm9ueW1vdXMgJHtuYW1lc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBuYW1lcy5sZW5ndGgpXX1gO1xyXG5cclxuICAgIGlmICh1c2VyKSB7XHJcbiAgICAgIGxldCB1cGRhdGVzID0ge307XHJcbiAgICAgIHVwZGF0ZXNbYHVzZXJEYXRhLyR7dXNlci51c2VyLnVpZH0vY29sb3JgXSA9ICdjYmEnO1xyXG4gICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L2Rpc3BsYXlOYW1lYF0gPSBuYW1lO1xyXG4gICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L2hvbm9yYF0gPSAwO1xyXG4gICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L2luZmFteWBdID0gMDtcclxuICAgICAgdXBkYXRlc1tgdXNlckRhdGEvJHt1c2VyLnVzZXIudWlkfS9pc1Nlc3Npb25JZFB1YmxpY2BdID0gdHJ1ZTtcclxuICAgICAgdXBkYXRlc1tgdXNlckRhdGEvJHt1c2VyLnVzZXIudWlkfS9zZXNzaW9uSWRgXSA9IGlkO1xyXG4gICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L3RpdGxlYF0gPSAnVW5rbm93bic7XHJcbiAgICAgIHVwZGF0ZXNbYHVzZXJEYXRhLyR7dXNlci51c2VyLnVpZH0vdXNlcklkYF0gPSB1c2VyLnVzZXIudWlkO1xyXG4gICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L3VzZXJQaG90b1VSTGBdID1cclxuICAgICAgICAnaHR0cHM6Ly9yYXRjaGV0LWdhbGF4eS5jb20vaW1hZ2UvZmFuYXJ0cy80LzgvNDA4LXNsaW0tY29nbml0by5qcGcnO1xyXG4gICAgICB1cGRhdGVzW2B1c2VyU3RhdHVzLyR7dXNlci51c2VyLnVpZH0vaXNTdGF0dXNQdWJsaWNgXSA9IGZhbHNlO1xyXG4gICAgICB1cGRhdGVzW2B1c2VyU3RhdHVzLyR7dXNlci51c2VyLnVpZH0vc3RhdHVzYF0gPSAnb25saW5lJztcclxuICAgICAgdXBkYXRlc1tgdXNlclN0YXR1cy8ke3VzZXIudXNlci51aWR9L3RpbWVzdGFtcGBdID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICAgIHVwZGF0ZShyZWYoZGF0YWJhc2UpLCB1cGRhdGVzKTtcclxuICAgICAgc2V0VXNlckRhdGEoe1xyXG4gICAgICAgIGNvbG9yOiAnYScsXHJcbiAgICAgICAgZGlzcGxheU5hbWU6ICdBbm9ueW1vdXMnLFxyXG4gICAgICAgIGhvbm9yOiAwLFxyXG4gICAgICAgIGluZmFteTogMCxcclxuICAgICAgICBpc09wZW46IGZhbHNlLFxyXG4gICAgICAgIGlzU2Vzc2lvbklkUHVibGljOiBmYWxzZSxcclxuICAgICAgICBpc1N0YXR1c1B1YmxpYzogZmFsc2UsXHJcbiAgICAgICAgc2Vzc2lvbklkOiAnc2Vzc2lvbnMnLFxyXG4gICAgICAgIHN0YXR1czogJ29ubGluZScsXHJcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICAgIHRpdGxlOiAnQW5vbnltb3VzJyxcclxuICAgICAgICB1c2VySWQ6ICcwJyxcclxuICAgICAgICB1c2VyUGhvdG9VUkw6ICdodHRwczovL2kuaW1ndXIuY29tLzZYNTM3Y0wucG5nJyxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgbG9nb3V0ID0gKCkgPT4ge1xyXG4gICAgaWYgKGN1cnJlbnRVc2VyICYmIGN1cnJlbnRVc2VyLmlzQW5vbnltb3VzKSB7XHJcbiAgICAgIGRlbGV0ZVBsYXllcigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2lnbk91dChhdXRoKVxyXG4gICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgIHJvdXRlci5wdXNoKCcvJyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignTE9HT1VUIEVSUk9SOicsIGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VXNlckRhdGEoe1xyXG4gICAgICBjb2xvcjogJ2EnLFxyXG4gICAgICBkaXNwbGF5TmFtZTogJ0Fub255bW91cycsXHJcbiAgICAgIGhvbm9yOiAwLFxyXG4gICAgICBpbmZhbXk6IDAsXHJcbiAgICAgIGlzT3BlbjogZmFsc2UsXHJcbiAgICAgIGlzU2Vzc2lvbklkUHVibGljOiBmYWxzZSxcclxuICAgICAgaXNTdGF0dXNQdWJsaWM6IGZhbHNlLFxyXG4gICAgICBzZXNzaW9uSWQ6ICdzZXNzaW9ucycsXHJcbiAgICAgIHN0YXR1czogJ29ubGluZScsXHJcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgdGl0bGU6ICdBbm9ueW1vdXMnLFxyXG4gICAgICB1c2VySWQ6ICcwJyxcclxuICAgICAgdXNlclBob3RvVVJMOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS82WDUzN2NMLnBuZycsXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCByZXNldFBhc3N3b3JkID0gKGVtYWlsKSA9PiB7XHJcbiAgICByZXR1cm4gc2VuZFBhc3N3b3JkUmVzZXRFbWFpbChhdXRoLCBlbWFpbCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2lnbmluID0gKGVtYWlsLCBwYXNzd29yZCkgPT4ge1xyXG4gICAgcmV0dXJuIHNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkKGF1dGgsIGVtYWlsLCBwYXNzd29yZCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2lnbnVwID0gYXN5bmMgKGVtYWlsLCBwYXNzd29yZCwgdXNlcm5hbWUpID0+IHtcclxuICAgIGlmIChjdXJyZW50VXNlciAmJiBjdXJyZW50VXNlci5pc0Fub255bW91cykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWwgPSBFbWFpbEF1dGhQcm92aWRlci5jcmVkZW50aWFsKGVtYWlsLCBwYXNzd29yZCk7XHJcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGxpbmtXaXRoQ3JlZGVudGlhbChhdXRoLmN1cnJlbnRVc2VyLCBjcmVkZW50aWFsKTtcclxuXHJcbiAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgIGxldCB1cGRhdGVzID0ge307XHJcbiAgICAgICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L2NvbG9yYF0gPSAnYSc7XHJcbiAgICAgICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L2Rpc3BsYXlOYW1lYF0gPSB1c2VybmFtZTtcclxuICAgICAgICAgIHVwZGF0ZXNbYHVzZXJEYXRhLyR7dXNlci51c2VyLnVpZH0vaG9ub3JgXSA9IDA7XHJcbiAgICAgICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L2luZmFteWBdID0gMDtcclxuICAgICAgICAgIHVwZGF0ZXNbYHVzZXJEYXRhLyR7dXNlci51c2VyLnVpZH0vaXNTZXNzaW9uSWRQdWJsaWNgXSA9IHRydWU7XHJcbiAgICAgICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L2lzU3RhdHVzUHVibGljYF0gPSB0cnVlO1xyXG4gICAgICAgICAgdXBkYXRlc1tgdXNlckRhdGEvJHt1c2VyLnVzZXIudWlkfS9zZXNzaW9uSWRgXSA9ICcnO1xyXG4gICAgICAgICAgdXBkYXRlc1tgdXNlckRhdGEvJHt1c2VyLnVzZXIudWlkfS9zdGF0dXNgXSA9ICdPbmxpbmUnO1xyXG4gICAgICAgICAgdXBkYXRlc1tgdXNlckRhdGEvJHt1c2VyLnVzZXIudWlkfS90aW1lc3RhbXBgXSA9IHNlcnZlclRpbWVzdGFtcCgpO1xyXG4gICAgICAgICAgdXBkYXRlc1tgdXNlckRhdGEvJHt1c2VyLnVzZXIudWlkfS90aXRsZWBdID0gJ0dhbWVyJztcclxuICAgICAgICAgIHVwZGF0ZXNbYHVzZXJEYXRhLyR7dXNlci51c2VyLnVpZH0vdXNlcklkYF0gPSB1c2VyLnVzZXIudWlkO1xyXG4gICAgICAgICAgdXBkYXRlc1tgdXNlckRhdGEvJHt1c2VyLnVzZXIudWlkfS91c2VyUGhvdG9VUkxgXSA9ICdodHRwczovL2kuaW1ndXIuY29tL3lrNXdUaUYucG5nJztcclxuXHJcbiAgICAgICAgICB1cGRhdGUocmVmKGRhdGFiYXNlKSwgdXBkYXRlcyk7XHJcblxyXG4gICAgICAgICAgc2V0VXNlckRhdGEoe1xyXG4gICAgICAgICAgICBiaW86ICcnLFxyXG4gICAgICAgICAgICBjb2xvcjogJ2EnLFxyXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogdXNlcm5hbWUsXHJcbiAgICAgICAgICAgIGhvbm9yOiAwLFxyXG4gICAgICAgICAgICBpbmZhbXk6IDAsXHJcbiAgICAgICAgICAgIGlzU2Vzc2lvbklkUHVibGljOiB0cnVlLFxyXG4gICAgICAgICAgICBpc1N0YXR1c1B1YmxpYzogdHJ1ZSxcclxuICAgICAgICAgICAgc2Vzc2lvbklkOiAnJyxcclxuICAgICAgICAgICAgc3RhdHVzOiAnT25saW5lJyxcclxuICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICB0aXRsZTogJ0dhbWVyJyxcclxuICAgICAgICAgICAgdXNlcklkOiB1c2VyLnVzZXIudWlkLFxyXG4gICAgICAgICAgICB1c2VyUGhvdG9VUkw6ICdodHRwczovL2kuaW1ndXIuY29tL3lrNXdUaUYucG5nJyxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F1dGhDb250ZXh0IHNpZ251cCAxICcsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKGF1dGgsIGVtYWlsLCBwYXNzd29yZCk7XHJcblxyXG4gICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICBsZXQgdXBkYXRlcyA9IHt9O1xyXG4gICAgICAgICAgdXBkYXRlc1tgdXNlckRhdGEvJHt1c2VyLnVzZXIudWlkfS9jb2xvcmBdID0gJ2EnO1xyXG4gICAgICAgICAgdXBkYXRlc1tgdXNlckRhdGEvJHt1c2VyLnVzZXIudWlkfS9kaXNwbGF5TmFtZWBdID0gdXNlcm5hbWU7XHJcbiAgICAgICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L2hvbm9yYF0gPSAwO1xyXG4gICAgICAgICAgdXBkYXRlc1tgdXNlckRhdGEvJHt1c2VyLnVzZXIudWlkfS9pbmZhbXlgXSA9IDA7XHJcbiAgICAgICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L2lzU2Vzc2lvbklkUHVibGljYF0gPSB0cnVlO1xyXG4gICAgICAgICAgdXBkYXRlc1tgdXNlckRhdGEvJHt1c2VyLnVzZXIudWlkfS9pc1N0YXR1c1B1YmxpY2BdID0gdHJ1ZTtcclxuICAgICAgICAgIHVwZGF0ZXNbYHVzZXJEYXRhLyR7dXNlci51c2VyLnVpZH0vc2Vzc2lvbklkYF0gPSAnJztcclxuICAgICAgICAgIHVwZGF0ZXNbYHVzZXJEYXRhLyR7dXNlci51c2VyLnVpZH0vc3RhdHVzYF0gPSAnT25saW5lJztcclxuICAgICAgICAgIHVwZGF0ZXNbYHVzZXJEYXRhLyR7dXNlci51c2VyLnVpZH0vdGltZXN0YW1wYF0gPSBzZXJ2ZXJUaW1lc3RhbXAoKTtcclxuICAgICAgICAgIHVwZGF0ZXNbYHVzZXJEYXRhLyR7dXNlci51c2VyLnVpZH0vdGl0bGVgXSA9ICdHYW1lcic7XHJcbiAgICAgICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXIudXNlci51aWR9L3VzZXJJZGBdID0gdXNlci51c2VyLnVpZDtcclxuICAgICAgICAgIHVwZGF0ZXNbYHVzZXJEYXRhLyR7dXNlci51c2VyLnVpZH0vdXNlclBob3RvVVJMYF0gPSAnaHR0cHM6Ly9pLmltZ3VyLmNvbS95azV3VGlGLnBuZyc7XHJcblxyXG4gICAgICAgICAgdXBkYXRlKHJlZihkYXRhYmFzZSksIHVwZGF0ZXMpO1xyXG5cclxuICAgICAgICAgIHNldFVzZXJEYXRhKHtcclxuICAgICAgICAgICAgYmlvOiAnJyxcclxuICAgICAgICAgICAgY29sb3I6ICdhJyxcclxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IHVzZXJuYW1lLFxyXG4gICAgICAgICAgICBob25vcjogMCxcclxuICAgICAgICAgICAgaW5mYW15OiAwLFxyXG4gICAgICAgICAgICBpc1Nlc3Npb25JZFB1YmxpYzogdHJ1ZSxcclxuICAgICAgICAgICAgaXNTdGF0dXNQdWJsaWM6IHRydWUsXHJcbiAgICAgICAgICAgIHNlc3Npb25JZDogJycsXHJcbiAgICAgICAgICAgIHN0YXR1czogJ09ubGluZScsXHJcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgdGl0bGU6ICdHYW1lcicsXHJcbiAgICAgICAgICAgIHVzZXJJZDogdXNlci51c2VyLnVpZCxcclxuICAgICAgICAgICAgdXNlclBob3RvVVJMOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS95azV3VGlGLnBuZycsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldHVybiB1c2VyO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdBdXRoQ29udGV4dCBzaWdudXAgMiAnLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCB1cGRhdGVEaXNwbGF5TmFtZSA9IGFzeW5jIChkaXNwbGF5TmFtZSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgdXBkYXRlKHJlZihkYXRhYmFzZSwgJ3VzZXJEYXRhLycgKyBjdXJyZW50VXNlci51aWQpLCB7XHJcbiAgICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxyXG4gICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEF1dGhDb250ZXh0IHVwZGF0ZURpc3BsYXlOYW1lIDEgYCwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdXBkYXRlVXNlckVtYWlsID0gYXN5bmMgKGVtYWlsLCBwYXNzd29yZCkgPT4ge1xyXG4gICAgY29uc3QgY3JlZGVudGlhbCA9IEVtYWlsQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwoYXV0aC5jdXJyZW50VXNlci5lbWFpbCwgcGFzc3dvcmQpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbChhdXRoLmN1cnJlbnRVc2VyLCBjcmVkZW50aWFsKTtcclxuICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgcmV0dXJuIHVwZGF0ZUVtYWlsKGN1cnJlbnRVc2VyLCBlbWFpbCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgc2V0Q3VycmVudFVzZXIoeyAuLi5jdXJyZW50VXNlciwgZW1haWw6IGVtYWlsIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCB1cGRhdGVVc2VyUGFzc3dvcmQgPSBhc3luYyAocGFzc3dvcmRPbGQsIHBhc3N3b3JkTmV3KSA9PiB7XHJcbiAgICBjb25zdCBjcmVkZW50aWFsID0gRW1haWxBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChhdXRoLmN1cnJlbnRVc2VyLmVtYWlsLCBwYXNzd29yZE9sZCk7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsKGF1dGguY3VycmVudFVzZXIsIGNyZWRlbnRpYWwpO1xyXG4gICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICByZXR1cm4gdXBkYXRlUGFzc3dvcmQoY3VycmVudFVzZXIsIHBhc3N3b3JkTmV3KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCB1cGRhdGVQaG90b1VSTCA9IGFzeW5jIChwaG90bykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgdXBkYXRlKHJlZihkYXRhYmFzZSwgJ3VzZXJEYXRhLycgKyBjdXJyZW50VXNlci51aWQpLCB7XHJcbiAgICAgICAgdXNlclBob3RvVVJMOiBwaG90byxcclxuICAgICAgfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBBdXRoQ29udGV4dCB1cGRhdGVQaG90b1VSTCAxIGAsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHJlbW92ZU1lbWJlciA9IGFzeW5jIChwbGF5ZXJJZCwgZ3VpbGRJZCwgZ3VpbGRMb2NhdGlvbiwgZ3VpbGRUaXRsZSwgaXNCbGFja2xpc3QgPSBudWxsLCBzZXRMb2FkaW5nKSA9PiB7XHJcbiAgICBpZiAoc2V0TG9hZGluZykge1xyXG4gICAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKFxyXG4gICAgICBndWlsZFRpdGxlID09PSAndGl0bGVNb2RlcmF0b3InIHx8XHJcbiAgICAgIGd1aWxkVGl0bGUgPT09ICd0aXRsZU1hc3RlcicgfHxcclxuICAgICAgcGxheWVySWQgPT09IGN1cnJlbnRVc2VyLnVpZFxyXG4gICAgKSB7XHJcbiAgICAgIGxldCB1cGRhdGVzID0ge307XHJcbiAgICAgIHVwZGF0ZXNbYGd1aWxkRGF0YSR7Z3VpbGRMb2NhdGlvbn0vJHtndWlsZElkfS91c2Vyc2BdID0gaW5jcmVtZW50KC0xKTtcclxuICAgICAgdXBkYXRlc1tgZ3VpbGRMaXN0cy8ke2d1aWxkSWR9L2JsYWNrbGlzdC8ke3BsYXllcklkfWBdID0gaXNCbGFja2xpc3Q7XHJcbiAgICAgIHVwZGF0ZXNbYGd1aWxkTGlzdHMvJHtndWlsZElkfS93aGl0ZWxpc3QvJHtwbGF5ZXJJZH1gXSA9IG51bGw7XHJcbiAgICAgIHVwZGF0ZXNbYHVzZXJHdWlsZHMvJHtwbGF5ZXJJZH0vJHtndWlsZElkfWBdID0gbnVsbDtcclxuICAgICAgdXBkYXRlKHJlZihkYXRhYmFzZSksIHVwZGF0ZXMpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHNldExvYWRpbmcpIHtcclxuICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGUpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgbWFuYWdlTWVtYmVyID0gYXN5bmMgKHBsYXllcklkLCBndWlsZElkLCB0aXRsZSwgc2V0TG9hZGluZykgPT4ge1xyXG4gICAgaWYgKHNldExvYWRpbmcpIHtcclxuICAgICAgc2V0TG9hZGluZyh0cnVlKTtcclxuICAgIH1cclxuICAgIGdldChjaGlsZChyZWYoZGF0YWJhc2UpLCBgZ3VpbGRMaXN0cy8ke2d1aWxkSWR9LyR7Y3VycmVudFVzZXIudWlkfWApKVxyXG4gICAgICAudGhlbigoRGF0YVNuYXBzaG90KSA9PiB7XHJcbiAgICAgICAgaWYgKERhdGFTbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgaWYgKERhdGFTbmFwc2hvdC52YWwoKSA9PT0gJ3RpdGxlTWFzdGVyJykge1xyXG4gICAgICAgICAgICBpZiAodGl0bGUgPT09ICd0aXRsZU1hc3RlcicgfHwgdGl0bGUgPT09ICd0aXRsZU1vZGVyYXRvcicgfHwgdGl0bGUgPT09ICd0aXRsZU1lbWJlcicpIHtcclxuICAgICAgICAgICAgICBsZXQgdXBkYXRlcyA9IHt9O1xyXG4gICAgICAgICAgICAgIHVwZGF0ZXNbYGd1aWxkTGlzdHMvJHtndWlsZElkfS8ke3BsYXllcklkfWBdID0gdGl0bGU7XHJcbiAgICAgICAgICAgICAgaWYgKHRpdGxlID09PSAndGl0bGVNYXN0ZXInKSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVzW2BndWlsZExpc3RzLyR7Z3VpbGRJZH0vJHtjdXJyZW50VXNlci51aWR9YF0gPSAndGl0bGVNb2RlcmF0b3InO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB1cGRhdGUocmVmKGRhdGFiYXNlKSwgdXBkYXRlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICBpZiAoc2V0TG9hZGluZykge1xyXG4gICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCByZW1vdmVHYW1lciA9IGFzeW5jIChwbGF5ZXJJZCwgaXNCbGFja2xpc3QsIHNldExvYWRpbmcpID0+IHtcclxuICAgIGlmIChzZXRMb2FkaW5nKSB7XHJcbiAgICAgIHNldExvYWRpbmcodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBnZXQoY2hpbGQocmVmKGRhdGFiYXNlKSwgYHNlc3Npb25MaXN0cy8ke3VzZXJEYXRhLnNlc3Npb25JZH0vd2hpdGVsaXN0LyR7cGxheWVySWR9YCkpXHJcbiAgICAgIC50aGVuKChEYXRhU25hcHNob3QpID0+IHtcclxuICAgICAgICBpZiAoRGF0YVNuYXBzaG90LmV4aXN0cygpKSB7XHJcbiAgICAgICAgICBpZiAodXNlckRhdGEuc2Vzc2lvbklkID09PSBjdXJyZW50VXNlci51aWQgfHwgcGxheWVySWQgPT09IGN1cnJlbnRVc2VyLnVpZCkge1xyXG4gICAgICAgICAgICBsZXQgdXBkYXRlcyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAocGxheWVySWQgPT09IGN1cnJlbnRVc2VyLnVpZCAmJiBjdXJyZW50VXNlci51aWQgPT09IHVzZXJEYXRhLnNlc3Npb25JZCkge1xyXG4gICAgICAgICAgICAgIHVwZGF0ZXNbYHNlc3Npb25BY3Rpb25zLyR7dXNlckRhdGEuc2Vzc2lvbklkfWBdID0gbnVsbDtcclxuICAgICAgICAgICAgICB1cGRhdGVzW2BzZXNzaW9uQnV0dG9ucy8ke3VzZXJEYXRhLnNlc3Npb25JZH1gXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgdXBkYXRlc1tgc2Vzc2lvbkRhdGEvJHt1c2VyRGF0YS5zZXNzaW9uSWR9YF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgIHVwZGF0ZXNbYHNlc3Npb25MaXN0cy8ke3VzZXJEYXRhLnNlc3Npb25JZH1gXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgdXBkYXRlc1tgc2Vzc2lvbk1lc3NhZ2VzLyR7dXNlckRhdGEuc2Vzc2lvbklkfWBdID0gbnVsbDtcclxuICAgICAgICAgICAgICB1cGRhdGVzW2BzZXNzaW9uTXNnSG9ub3JzLyR7dXNlckRhdGEuc2Vzc2lvbklkfWBdID0gbnVsbDtcclxuICAgICAgICAgICAgICB1cGRhdGVzW2BzZXNzaW9uU3BlZWNoLyR7dXNlckRhdGEuc2Vzc2lvbklkfWBdID0gbnVsbDtcclxuICAgICAgICAgICAgICB1cGRhdGUocmVmKGRhdGFiYXNlKSwgdXBkYXRlcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZ2V0KGNoaWxkKHJlZihkYXRhYmFzZSksIGB1c2VyRGF0YS8ke3BsYXllcklkfS9zZXNzaW9uSWRgKSkudGhlbigoU25hcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKFNuYXAuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKFNuYXAudmFsKCkgPT09IHVzZXJEYXRhLnNlc3Npb25JZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZXNbYHVzZXJEYXRhLyR7cGxheWVySWR9L3Nlc3Npb25JZGBdID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBvYmogPSB7fTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgMTc7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICBsZXQgY2hhciA9IChpICsgOSkudG9TdHJpbmcoMzYpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAuLi5vYmosXHJcbiAgICAgICAgICAgICAgICAgICAgW2NoYXJdOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICBpc1NoaWZ0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgIHVzZXJJZDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZXNbYHNlc3Npb25BY3Rpb25zLyR7dXNlckRhdGEuc2Vzc2lvbklkfWBdID0geyAuLi5vYmogfTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZXNbYHNlc3Npb25MaXN0cy8ke3VzZXJEYXRhLnNlc3Npb25JZH0vd2hpdGVsaXN0LyR7cGxheWVySWR9YF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1tgc2Vzc2lvblNwZWVjaC8ke3VzZXJEYXRhLnNlc3Npb25JZH0vJHtwbGF5ZXJJZH1gXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNCbGFja2xpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgdXBkYXRlc1tgc2Vzc2lvbkxpc3RzLyR7dXNlckRhdGEuc2Vzc2lvbklkfS9ibGFja2xpc3QvJHtwbGF5ZXJJZH1gXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGUocmVmKGRhdGFiYXNlKSwgdXBkYXRlcyk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICBpZiAoc2V0TG9hZGluZykge1xyXG4gICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBkZWxldGVQbGF5ZXIgPSBhc3luYyAoc2V0TG9hZGluZywgcGFzc3dvcmQpID0+IHtcclxuICAgIGlmIChzZXRMb2FkaW5nKSB7XHJcbiAgICAgIHNldExvYWRpbmcodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBsZXQgdXBkYXRlcyA9IHt9O1xyXG4gICAgbGV0IHRlbXBBcnIgPSBbXTtcclxuICAgIGF3YWl0IGdldChjaGlsZChyZWYoZGF0YWJhc2UpLCBgdXNlckd1aWxkcy8ke3VzZXJEYXRhLnVzZXJJZH1gKSkudGhlbihhc3luYyAoRGF0YVNuYXBzaG90KSA9PiB7XHJcbiAgICAgIGlmIChEYXRhU25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICBsZXQgYXJyYXkgPSBPYmplY3Qua2V5cyhEYXRhU25hcHNob3QudmFsKCkpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGF3YWl0IGdldChcclxuICAgICAgICAgICAgY2hpbGQocmVmKGRhdGFiYXNlKSwgYGd1aWxkQWxpYXNlcy8ke2FycmF5W2ldfS93aGl0ZWxpc3QvJHt1c2VyRGF0YS51c2VySWR9YClcclxuICAgICAgICAgICkudGhlbigoRGF0YVNuYXBzaG90MSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoRGF0YVNuYXBzaG90MS5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgIGlmIChEYXRhU25hcHNob3QxLnZhbCgpID09PSAndGl0bGVNYXN0ZXInKSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVzW2BndWlsZEFsaWFzZXMvJHthcnJheVtpXX1gXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVzW2BndWlsZFJvb21zLyR7YXJyYXlbaV19YF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1tgZ3VpbGRMaXN0cy8ke2FycmF5W2ldfWBdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZXNbYGd1aWxkTWVzc2FnZXMvJHthcnJheVtpXX1gXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVzW2BndWlsZE1zZ0hvbm9ycy8ke2FycmF5W2ldfWBdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZXNbYGd1aWxkUmVwdXRhdGlvbi8ke2FycmF5W2ldfWBdID0gbnVsbDtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1tgZ3VpbGRBbGlhc2VzLyR7YXJyYXlbaV19L3VzZXJzYF0gPSBpbmNyZW1lbnQoLTEpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1tgZ3VpbGRMaXN0cy8ke2FycmF5W2ldfS8ke3VzZXJEYXRhLnVzZXJJZH1gXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHRlbXBBcnIgPSBbLi4udGVtcEFyciwgRGF0YVNuYXBzaG90MS5rZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGVtcEFyciA9IFsuLi50ZW1wQXJyLCBEYXRhU25hcHNob3Qua2V5XTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBhd2FpdCBnZXQoY2hpbGQocmVmKGRhdGFiYXNlKSwgYHVzZXJEYXRhLyR7dXNlckRhdGEudXNlcklkfS9zZXNzaW9uSWRgKSkudGhlbihcclxuICAgICAgKERhdGFTbmFwc2hvdCkgPT4ge1xyXG4gICAgICAgIGlmIChEYXRhU25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgIGlmIChEYXRhU25hcHNob3QudmFsKCkgPT09IHVzZXJEYXRhLnVzZXJJZCkge1xyXG4gICAgICAgICAgICB1cGRhdGVzW2BzZXNzaW9uQWN0aW9ucy8ke0RhdGFTbmFwc2hvdC52YWwoKX1gXSA9IG51bGw7XHJcbiAgICAgICAgICAgIHVwZGF0ZXNbYHNlc3Npb25CdXR0b25zLyR7RGF0YVNuYXBzaG90LnZhbCgpfWBdID0gbnVsbDtcclxuICAgICAgICAgICAgdXBkYXRlc1tgc2Vzc2lvbkRhdGEvJHtEYXRhU25hcHNob3QudmFsKCl9YF0gPSBudWxsO1xyXG4gICAgICAgICAgICB1cGRhdGVzW2BzZXNzaW9uTGlzdHMvJHtEYXRhU25hcHNob3QudmFsKCl9YF0gPSBudWxsO1xyXG4gICAgICAgICAgICB1cGRhdGVzW2BzZXNzaW9uTWVzc2FnZXMvJHtEYXRhU25hcHNob3QudmFsKCl9YF0gPSBudWxsO1xyXG4gICAgICAgICAgICB1cGRhdGVzW2BzZXNzaW9uTXNnSG9ub3JzLyR7RGF0YVNuYXBzaG90LnZhbCgpfWBdID0gbnVsbDtcclxuICAgICAgICAgICAgdXBkYXRlc1tgc2Vzc2lvblNwZWVjaC8ke0RhdGFTbmFwc2hvdC52YWwoKX1gXSA9IG51bGw7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgb2JqID0ge307XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgMTc7IGkrKykge1xyXG4gICAgICAgICAgICAgIGxldCBjaGFyID0gKGkgKyA5KS50b1N0cmluZygzNikudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAuLi5vYmosXHJcbiAgICAgICAgICAgICAgICBbY2hhcl06IHtcclxuICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6ICcnLFxyXG4gICAgICAgICAgICAgICAgICBpc1NoaWZ0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiAwLFxyXG4gICAgICAgICAgICAgICAgICB1c2VySWQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHVwZGF0ZXNbYHNlc3Npb25BY3Rpb25zLyR7RGF0YVNuYXBzaG90LnZhbCgpfWBdID0geyAuLi5vYmogfTtcclxuICAgICAgICAgICAgdXBkYXRlc1tgc2Vzc2lvbkRhdGEvJHtEYXRhU25hcHNob3QudmFsKCl9L3VzZXJzYF0gPSBpbmNyZW1lbnQoLTEpO1xyXG4gICAgICAgICAgICB1cGRhdGVzW2BzZXNzaW9uTGlzdHMvJHtEYXRhU25hcHNob3QudmFsKCl9L3doaXRlbGlzdC8ke3VzZXJEYXRhLnVzZXJJZH1gXSA9IG51bGw7XHJcbiAgICAgICAgICAgIHVwZGF0ZXNbYHNlc3Npb25TcGVlY2gvJHtEYXRhU25hcHNob3QudmFsKCl9LyR7dXNlckRhdGEudXNlcklkfWBdID0gbnVsbDtcclxuICAgICAgICAgICAgdXBkYXRlc1tgdXNlckJpb3MvJHt1c2VyRGF0YS51c2VySWR9YF0gPSBudWxsO1xyXG4gICAgICAgICAgICB1cGRhdGVzW2B1c2VyRGF0YS8ke3VzZXJEYXRhLnVzZXJJZH1gXSA9IG51bGw7XHJcbiAgICAgICAgICAgIHVwZGF0ZXNbYHVzZXJHdWlsZHMvJHt1c2VyRGF0YS51c2VySWR9YF0gPSBudWxsO1xyXG4gICAgICAgICAgICB1cGRhdGVzW2B1c2VyTGlzdHMvJHt1c2VyRGF0YS51c2VySWR9YF0gPSBudWxsO1xyXG4gICAgICAgICAgICB1cGRhdGVzW2B1c2VyU2V0dGluZ3MvJHt1c2VyRGF0YS51c2VySWR9YF0gPSBudWxsO1xyXG4gICAgICAgICAgICB1cGRhdGVzW2B1c2VyU3RhdHVzLyR7dXNlckRhdGEudXNlcklkfWBdID0gbnVsbDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRlbXBBcnIgPSBbLi4udGVtcEFyciwgRGF0YVNuYXBzaG90LmtleV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIFByb21pc2UuYWxsU2V0dGxlZCh0ZW1wQXJyKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgdXBkYXRlKHJlZihkYXRhYmFzZSksIHVwZGF0ZXMpO1xyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseShhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHNldExvYWRpbmcpIHtcclxuICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXBhc3N3b3JkKSByZXR1cm4gZGVsZXRlVXNlcihhdXRoLmN1cnJlbnRVc2VyKTtcclxuICAgICAgICBjb25zdCBjcmVkZW50aWFsID0gRW1haWxBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChhdXRoLmN1cnJlbnRVc2VyLmVtYWlsLCBwYXNzd29yZCk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbChhdXRoLmN1cnJlbnRVc2VyLCBjcmVkZW50aWFsKTtcclxuICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICByZXR1cm4gZGVsZXRlVXNlcihhdXRoLmN1cnJlbnRVc2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IG9uQXV0aFN0YXRlQ2hhbmdlZChhdXRoLCAodXNlcikgPT4ge1xyXG4gICAgICBzZXRDdXJyZW50VXNlcih1c2VyKTtcclxuICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAvLyBjb25zdCBtZXNzYWdpbmdUb2tlbiA9IGdldFRva2VuKG1lc3NhZ2luZywge1xyXG4gICAgICAgIC8vICAgdmFwaWRLZXk6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX1ZBUElES0VZLFxyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgICAgIG9uVmFsdWUocmVmKGRhdGFiYXNlLCBgdXNlckRhdGEvJHt1c2VyLnVpZH1gKSwgKHNuYXBzaG90KSA9PiB7XHJcbiAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgIHVzZXIuaXNBbm9ueW1vdXMgJiZcclxuICAgICAgICAgICAgICBzbmFwc2hvdC52YWwoKS5zZXNzaW9uSWQgIT09IHVzZXJEYXRhLnNlc3Npb25JZCAmJlxyXG4gICAgICAgICAgICAgIHVzZXJEYXRhLnNlc3Npb25JZCAhPT0gJydcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgZGVsZXRlUGxheWVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0VXNlckRhdGEoc25hcHNob3QudmFsKCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHByZXNlbmNlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuICgpID0+IHVuc3Vic2NyaWJlKCk7XHJcbiAgfSwgW10pO1xyXG5cclxuICBjb25zdCBwcmVzZW5jZSA9ICgpID0+IHtcclxuICAgIGlmICh1c2VyRGF0YS5pc1N0YXR1c1B1YmxpYykge1xyXG4gICAgICAvLyBzdG9yZXMgdGhlIHRpbWVzdGFtcCBvZiBteSBsYXN0IGRpc2Nvbm5lY3QgKHRoZSBsYXN0IHRpbWUgSSB3YXMgc2VlbiBvbmxpbmUpXHJcbiAgICAgIG9uVmFsdWUocmVmKGRhdGFiYXNlLCAnLmluZm8vY29ubmVjdGVkJyksIChzbmFwKSA9PiB7XHJcbiAgICAgICAgaWYgKHNuYXAudmFsKCkgPT09IHRydWUpIHtcclxuICAgICAgICAgIC8vIFdlJ3JlIGNvbm5lY3RlZCAob3IgcmVjb25uZWN0ZWQpISBEbyBhbnl0aGluZyBoZXJlIHRoYXQgc2hvdWxkIGhhcHBlbiBvbmx5IGlmIG9ubGluZSAob3Igb24gcmVjb25uZWN0KVxyXG4gICAgICAgICAgbGV0IGNvbm5lY3QgPSB7fTtcclxuICAgICAgICAgIGNvbm5lY3RbYHVzZXJEYXRhLyR7dXNlckRhdGEudXNlcklkfS9zdGF0dXNgXSA9ICdvbmxpbmUnO1xyXG4gICAgICAgICAgY29ubmVjdFtgdXNlckRhdGEvJHt1c2VyRGF0YS51c2VySWR9L3RpbWVzdGFtcGBdID0gc2VydmVyVGltZXN0YW1wKCk7XHJcbiAgICAgICAgICB1cGRhdGUocmVmKGRhdGFiYXNlKSkudXBkYXRlKGNvbm5lY3QpO1xyXG5cclxuICAgICAgICAgIC8vIFdoZW4gdXNlciBkaXNjb25uZWN0LCB1cGRhdGUgdGhlIGxhc3QgdGltZSB1c2VyIHdhcyBzZWVuIG9ubGluZVxyXG4gICAgICAgICAgbGV0IGRpc2Nvbm5lY3QgPSB7fTtcclxuICAgICAgICAgIGRpc2Nvbm5lY3RbYHVzZXJEYXRhLyR7dXNlckRhdGEudXNlcklkfS9zdGF0dXNgXSA9ICdvZmZsaW5lJztcclxuICAgICAgICAgIGRpc2Nvbm5lY3RbYHVzZXJEYXRhLyR7dXNlckRhdGEudXNlcklkfS90aW1lc3RhbXBgXSA9IHNlcnZlclRpbWVzdGFtcCgpO1xyXG4gICAgICAgICAgLy8gaWYgKHNlc3Npb24gPT09IHVzZXJEYXRhLnVzZXJJZCkge1xyXG4gICAgICAgICAgLy8gICBkaXNjb25uZWN0W2BzZXNzaW9uQWN0aW9ucy8ke3VzZXJEYXRhLnNlc3Npb25JZH1gXSA9IG51bGw7XHJcbiAgICAgICAgICAvLyAgIGRpc2Nvbm5lY3RbYHNlc3Npb25CdXR0b25zLyR7dXNlckRhdGEuc2Vzc2lvbklkfWBdID0gbnVsbDtcclxuICAgICAgICAgIC8vICAgZGlzY29ubmVjdFtgc2Vzc2lvbkRhdGEvJHt1c2VyRGF0YS5zZXNzaW9uSWR9YF0gPSBudWxsO1xyXG4gICAgICAgICAgLy8gICBkaXNjb25uZWN0W2BzZXNzaW9uTGlzdHMvJHt1c2VyRGF0YS5zZXNzaW9uSWR9YF0gPSBudWxsO1xyXG4gICAgICAgICAgLy8gICBkaXNjb25uZWN0W2BzZXNzaW9uTWVzc2FnZXMvJHt1c2VyRGF0YS5zZXNzaW9uSWR9YF0gPSBudWxsO1xyXG4gICAgICAgICAgLy8gICBkaXNjb25uZWN0W2BzZXNzaW9uTXNnSG9ub3JzLyR7dXNlckRhdGEuc2Vzc2lvbklkfWBdID0gbnVsbDtcclxuICAgICAgICAgIC8vICAgZGlzY29ubmVjdFtgc2Vzc2lvblNwZWVjaC8ke3VzZXJEYXRhLnNlc3Npb25JZH1gXSA9IG51bGw7XHJcbiAgICAgICAgICAvLyB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gICBkaXNjb25uZWN0W2BzZXNzaW9uRGF0YS8ke3VzZXJEYXRhLnNlc3Npb25JZH0vdXNlcnNDb3VudGBdID0gaW5jcmVtZW50KC0xKTtcclxuICAgICAgICAgIC8vICAgZGlzY29ubmVjdFtgc2Vzc2lvbkRhdGEvJHt1c2VyRGF0YS5zZXNzaW9uSWR9L3RpbWVzdGFtcGBdID0gc2VydmVyVGltZXN0YW1wKCk7XHJcbiAgICAgICAgICAvLyAgIGRpc2Nvbm5lY3RbYHNlc3Npb25MaXN0cy8ke3VzZXJEYXRhLnNlc3Npb25JZH0vd2hpdGVsaXN0LyR7dXNlckRhdGEudXNlcklkfWBdID0gbnVsbDtcclxuICAgICAgICAgIC8vICAgZGlzY29ubmVjdFtgc2Vzc2lvblNwZWVjaC8ke3VzZXJEYXRhLnNlc3Npb25JZH0vJHt1c2VyRGF0YS51c2VySWR9YF0gPSBudWxsO1xyXG4gICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgIG9uRGlzY29ubmVjdChyZWYoZGF0YWJhc2UpKS51cGRhdGUoZGlzY29ubmVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCAoZSkgPT4ge1xyXG4gICAgICAgIGlmICh1c2VyRGF0YS5zZXNzaW9uSWQgJiYgdXNlckRhdGEuc2Vzc2lvbklkICE9PSAnc2Vzc2lvbnMnICYmIHVzZXJEYXRhLnNlc3Npb25JZCAhPT0gJycpIHtcclxuICAgICAgICAgIHJlbW92ZUdhbWVyKGN1cnJlbnRVc2VyLnVpZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIChlKSA9PiB7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHVzZXJEYXRhLnNlc3Npb25JZCAmJlxyXG4gICAgICAgICAgICB1c2VyRGF0YS5zZXNzaW9uSWQgIT09ICdzZXNzaW9ucycgJiZcclxuICAgICAgICAgICAgdXNlckRhdGEuc2Vzc2lvbklkICE9PSAnJ1xyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJlbW92ZUdhbWVyKGN1cnJlbnRVc2VyLnVpZCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfSwgW10pO1xyXG5cclxuICBjb25zdCB2YWx1ZSA9IHtcclxuICAgIGFub255bW91c0xvZ2luLFxyXG4gICAgZGVsZXRlUGxheWVyLFxyXG4gICAgY3VycmVudFVzZXIsXHJcbiAgICBsb2dvdXQsXHJcbiAgICByZXNldFBhc3N3b3JkLFxyXG4gICAgc2lnbmluLFxyXG4gICAgc2lnbnVwLFxyXG4gICAgcmVtb3ZlR2FtZXIsXHJcbiAgICBtYW5hZ2VNZW1iZXIsXHJcbiAgICByZW1vdmVNZW1iZXIsXHJcbiAgICBzZXRDdXJyZW50VXNlcixcclxuICAgIHVwZGF0ZURpc3BsYXlOYW1lLFxyXG4gICAgdXBkYXRlVXNlckVtYWlsLFxyXG4gICAgdXBkYXRlVXNlclBhc3N3b3JkLFxyXG4gICAgdXBkYXRlUGhvdG9VUkwsXHJcbiAgICB1c2VyRGF0YSxcclxuICAgIHNldFVzZXJEYXRhLFxyXG4gIH07XHJcblxyXG4gIHJldHVybiA8QXV0aENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3ZhbHVlfT57Y2hpbGRyZW59PC9BdXRoQ29udGV4dC5Qcm92aWRlcj47XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJFbWFpbEF1dGhQcm92aWRlciIsImNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCIsImRlbGV0ZVVzZXIiLCJsaW5rV2l0aENyZWRlbnRpYWwiLCJvbkF1dGhTdGF0ZUNoYW5nZWQiLCJyZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsIiwic2VuZFBhc3N3b3JkUmVzZXRFbWFpbCIsInNpZ25JbkFub255bW91c2x5Iiwic2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQiLCJzaWduT3V0IiwidXBkYXRlRW1haWwiLCJ1cGRhdGVQYXNzd29yZCIsIlJlYWN0IiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiYXV0aCIsImRhdGFiYXNlIiwibWVzc2FnaW5nIiwiY2hpbGQiLCJnZXQiLCJpbmNyZW1lbnQiLCJvbkRpc2Nvbm5lY3QiLCJvblZhbHVlIiwicmVmIiwic2VydmVyVGltZXN0YW1wIiwidXBkYXRlIiwidXNlUm91dGVyIiwiQXV0aENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidXNlQXV0aCIsIkF1dGhQcm92aWRlciIsImNoaWxkcmVuIiwidXNlckRhdGEiLCJzZXRVc2VyRGF0YSIsImNvbG9yIiwiZGlzcGxheU5hbWUiLCJob25vciIsImluZmFteSIsImlzT3BlbiIsImlzU2Vzc2lvbklkUHVibGljIiwiaXNTdGF0dXNQdWJsaWMiLCJzZXNzaW9uSWQiLCJzdGF0dXMiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwidGl0bGUiLCJ1c2VySWQiLCJ1c2VyUGhvdG9VUkwiLCJjdXJyZW50VXNlciIsInNldEN1cnJlbnRVc2VyIiwicm91dGVyIiwiYW5vbnltb3VzTG9naW4iLCJpZCIsIm5hbWVzIiwidXNlciIsIm5hbWUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJ1cGRhdGVzIiwidWlkIiwibG9nb3V0IiwiaXNBbm9ueW1vdXMiLCJkZWxldGVQbGF5ZXIiLCJ0aGVuIiwicHVzaCIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwicmVzZXRQYXNzd29yZCIsImVtYWlsIiwic2lnbmluIiwicGFzc3dvcmQiLCJzaWdudXAiLCJ1c2VybmFtZSIsImNyZWRlbnRpYWwiLCJiaW8iLCJtZXNzYWdlIiwidXBkYXRlRGlzcGxheU5hbWUiLCJ1cGRhdGVVc2VyRW1haWwiLCJyZXN1bHQiLCJ1cGRhdGVVc2VyUGFzc3dvcmQiLCJwYXNzd29yZE9sZCIsInBhc3N3b3JkTmV3IiwidXBkYXRlUGhvdG9VUkwiLCJwaG90byIsInJlbW92ZU1lbWJlciIsInBsYXllcklkIiwiZ3VpbGRJZCIsImd1aWxkTG9jYXRpb24iLCJndWlsZFRpdGxlIiwiaXNCbGFja2xpc3QiLCJzZXRMb2FkaW5nIiwiZSIsIm1hbmFnZU1lbWJlciIsIkRhdGFTbmFwc2hvdCIsImV4aXN0cyIsInZhbCIsImZpbmFsbHkiLCJyZW1vdmVHYW1lciIsIlNuYXAiLCJvYmoiLCJpIiwiY2hhciIsInRvU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJpc1NoaWZ0IiwidGVtcEFyciIsImFycmF5IiwiT2JqZWN0Iiwia2V5cyIsIkRhdGFTbmFwc2hvdDEiLCJrZXkiLCJQcm9taXNlIiwiYWxsU2V0dGxlZCIsInVuc3Vic2NyaWJlIiwic25hcHNob3QiLCJwcmVzZW5jZSIsInNuYXAiLCJjb25uZWN0IiwiZGlzY29ubmVjdCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./context/AuthContext.js\n");

/***/ }),

/***/ "./context/SettingsContext.js":
/*!************************************!*\
  !*** ./context/SettingsContext.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useSettings\": () => (/* binding */ useSettings),\n/* harmony export */   \"SettingsProvider\": () => (/* binding */ SettingsProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var firebase_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/database */ \"firebase/database\");\n/* harmony import */ var _firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../firebase/firebaseClient */ \"./firebase/firebaseClient.js\");\n/* harmony import */ var _AuthContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AuthContext */ \"./context/AuthContext.js\");\n/* harmony import */ var _stripe_usePremiumStatus__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../stripe/usePremiumStatus */ \"./stripe/usePremiumStatus.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__, firebase_database__WEBPACK_IMPORTED_MODULE_1__, _stripe_usePremiumStatus__WEBPACK_IMPORTED_MODULE_4__, _AuthContext__WEBPACK_IMPORTED_MODULE_3__]);\n([_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__, firebase_database__WEBPACK_IMPORTED_MODULE_1__, _stripe_usePremiumStatus__WEBPACK_IMPORTED_MODULE_4__, _AuthContext__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__);\nvar _jsxFileName = \"C:\\\\Dev\\\\calloutsevolved\\\\context\\\\SettingsContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nconst SettingsContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createContext();\nconst useSettings = () => {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SettingsContext);\n};\nconst SettingsProvider = ({\n  children\n}) => {\n  // helper constants for language / stt managment\n  const allLanguagesArr = [{\n    lang: 'Afrikaans',\n    code: 'af'\n  }, {\n    lang: 'Azərbaycanca',\n    code: 'az'\n  }, {\n    lang: 'Bahasa Indonesia',\n    code: 'id'\n  }, {\n    lang: 'Bahasa Melayu',\n    code: 'ms'\n  }, {\n    lang: 'Basa Jawa',\n    code: 'jv'\n  }, {\n    lang: 'Basa Sunda',\n    code: 'su'\n  }, {\n    lang: 'Català',\n    code: 'ca'\n  }, {\n    lang: 'Čeština',\n    code: 'cs'\n  }, {\n    lang: 'Dansk',\n    code: 'da'\n  }, {\n    lang: 'Deutsch',\n    code: 'de'\n  }, {\n    lang: 'English',\n    code: 'en'\n  }, {\n    lang: 'Español',\n    code: 'es'\n  }, {\n    lang: 'Euskara',\n    code: 'eu'\n  }, {\n    lang: 'Filipino',\n    code: 'fi'\n  }, {\n    lang: 'Français',\n    code: 'fr'\n  }, {\n    lang: 'Galego',\n    code: 'gl'\n  }, {\n    lang: 'Hrvatski',\n    code: 'hr'\n  }, {\n    lang: 'IsiZulu',\n    code: 'zu'\n  }, {\n    lang: 'Íslenska',\n    code: 'is'\n  }, {\n    lang: 'Italiano',\n    code: 'it'\n  }, {\n    lang: 'Kiswahili',\n    code: 'sw'\n  }, {\n    lang: 'Latviešu',\n    code: 'lv'\n  }, {\n    lang: 'Lietuvių',\n    code: 'lt'\n  }, {\n    lang: 'Magyar',\n    code: 'hu'\n  }, {\n    lang: 'Nederlands',\n    code: 'nl'\n  }, {\n    lang: 'Norsk bokmål',\n    code: 'nb'\n  }, {\n    lang: 'Polski',\n    code: 'pl'\n  }, {\n    lang: 'Português',\n    code: 'pt'\n  }, {\n    lang: 'Pусский',\n    code: 'ru'\n  }, {\n    lang: 'Română',\n    code: 'ro'\n  }, {\n    lang: 'Slovenčina',\n    code: 'sk'\n  }, {\n    lang: 'Slovenščina',\n    code: 'sl'\n  }, {\n    lang: 'Suomi',\n    code: 'fi'\n  }, {\n    lang: 'Svenska',\n    code: 'sv'\n  }, {\n    lang: 'Tiếng Việt',\n    code: 'vi'\n  }, {\n    lang: 'Türkçe',\n    code: 'tr'\n  }, {\n    lang: 'Ελληνικά',\n    code: 'el'\n  }, {\n    lang: 'български',\n    code: 'bg'\n  }, {\n    lang: 'Српски',\n    code: 'sr'\n  }, {\n    lang: 'Українська',\n    code: 'uk'\n  }, {\n    lang: 'ქართული',\n    code: 'ka'\n  }, {\n    lang: 'Հայերեն',\n    code: 'hy'\n  }, {\n    lang: 'اُردُو',\n    code: 'ur'\n  }, {\n    lang: 'አማርኛ',\n    code: 'am'\n  }, {\n    lang: 'नेपाली भाषा',\n    code: 'ne'\n  }, {\n    lang: 'मराठी',\n    code: 'mr'\n  }, {\n    lang: 'हिन्दी',\n    code: 'hi'\n  }, {\n    lang: 'বাংলা',\n    code: 'bn'\n  }, {\n    lang: 'ગુજરાતી',\n    code: 'gu'\n  }, {\n    lang: 'தமிழ்',\n    code: 'ta'\n  }, {\n    lang: 'తెలుగు',\n    code: 'te'\n  }, {\n    lang: 'ಕನ್ನಡ',\n    code: 'kn'\n  }, {\n    lang: 'മലയാളം',\n    code: 'ml'\n  }, {\n    lang: 'සිංහල',\n    code: 'si'\n  }, {\n    lang: 'ภาษาไทย',\n    code: 'th'\n  }, {\n    lang: 'ລາວ',\n    code: 'lo'\n  }, {\n    lang: 'ភាសាខ្មែរ',\n    code: 'km'\n  }, {\n    lang: '한국어',\n    code: 'ko'\n  }, {\n    lang: '中文',\n    code: 'cmn'\n  }, {\n    lang: '日本語',\n    code: 'ja'\n  }];\n  const allDialectsArr = [{\n    dialect: 'Afrikaans',\n    code: 'af-ZA'\n  }, {\n    dialect: 'Azərbaycanca',\n    code: 'az-AZ'\n  }, {\n    dialect: 'Bahasa Indonesia',\n    code: 'id-ID'\n  }, {\n    dialect: 'Bahasa Melayu',\n    code: 'ms-MY'\n  }, {\n    dialect: 'Basa Jawa',\n    code: 'jv-ID'\n  }, {\n    dialect: 'Basa Sunda',\n    code: 'su-ID'\n  }, {\n    dialect: 'Català',\n    code: 'ca-ES'\n  }, {\n    dialect: 'Čeština',\n    code: 'cs-CZ'\n  }, {\n    dialect: 'Dansk',\n    code: 'da-DK'\n  }, {\n    dialect: 'Deutsch',\n    code: 'de-DE'\n  }, {\n    dialect: 'English (Australia)',\n    code: 'en-AU'\n  }, {\n    dialect: 'English (Canada)',\n    code: 'en-CA'\n  }, {\n    dialect: 'English (Ghana)',\n    code: 'en-GH'\n  }, {\n    dialect: 'English (India)',\n    code: 'en-IN'\n  }, {\n    dialect: 'English (Kenya)',\n    code: 'en-KE'\n  }, {\n    dialect: 'English (New Zealand)',\n    code: 'en-NZ'\n  }, {\n    dialect: 'English (Nigeria)',\n    code: 'en-NG'\n  }, {\n    dialect: 'English (Philippines)',\n    code: 'en-PH'\n  }, {\n    dialect: 'English (South Africa)',\n    code: 'en-ZA'\n  }, {\n    dialect: 'English (Tanzania)',\n    code: 'en-TZ'\n  }, {\n    dialect: 'English (UK)',\n    code: 'en-GB'\n  }, {\n    dialect: 'English (United States)',\n    code: 'en-US'\n  }, {\n    dialect: 'Español (Argentina)',\n    code: 'es-AR'\n  }, {\n    dialect: 'Español (Bolivia)',\n    code: 'es-BO'\n  }, {\n    dialect: 'Español (Chile)',\n    code: 'es-CL'\n  }, {\n    dialect: 'Español (Colombia)',\n    code: 'es-CO'\n  }, {\n    dialect: 'Español (Costa Rica)',\n    code: 'es-CR'\n  }, {\n    dialect: 'Español (Ecuador)',\n    code: 'es-EC'\n  }, {\n    dialect: 'Español (El Salvador)',\n    code: 'es-SV'\n  }, {\n    dialect: 'Español (España)',\n    code: 'es-ES'\n  }, {\n    dialect: 'Español (US)',\n    code: 'es-US'\n  }, {\n    dialect: 'Español (Guatemala)',\n    code: 'es-GT'\n  }, {\n    dialect: 'Español (Honduras)',\n    code: 'es-HN'\n  }, {\n    dialect: 'Español (México)',\n    code: 'es-MX'\n  }, {\n    dialect: 'Español (Nicaragua)',\n    code: 'es-NI'\n  }, {\n    dialect: 'Español (Panamá)',\n    code: 'es-PA'\n  }, {\n    dialect: 'Español (Paraguay)',\n    code: 'es-PY'\n  }, {\n    dialect: 'Español (Perú)',\n    code: 'es-PE'\n  }, {\n    dialect: 'Español (Puerto Rico)',\n    code: 'es-PR'\n  }, {\n    dialect: 'Español (RD)',\n    code: 'es-DO'\n  }, {\n    dialect: 'Español (Uruguay)',\n    code: 'es-UY'\n  }, {\n    dialect: 'Español (Venezuela)',\n    code: 'es-VE'\n  }, {\n    dialect: 'Euskara',\n    code: 'eu-ES'\n  }, {\n    dialect: 'Filipino',\n    code: 'fil-PH'\n  }, {\n    dialect: 'Français',\n    code: 'fr-FR'\n  }, {\n    dialect: 'Galego',\n    code: 'gl-ES'\n  }, {\n    dialect: 'Hrvatski',\n    code: 'hr-HR'\n  }, {\n    dialect: 'IsiZulu',\n    code: 'zu-ZA'\n  }, {\n    dialect: 'Íslenska',\n    code: 'is-IS'\n  }, {\n    dialect: 'Italiano (Italia)',\n    code: 'it-IT'\n  }, {\n    dialect: 'Italiano (Svizzera)',\n    code: 'it-CH'\n  }, {\n    dialect: 'Kiswahili (Kenya)',\n    code: 'sw-KE'\n  }, {\n    dialect: 'Kiswahili (Tanzania)',\n    code: 'sw-TZ'\n  }, {\n    dialect: 'Latviešu',\n    code: 'lv-LV'\n  }, {\n    dialect: 'Lietuvių',\n    code: 'lt-LT'\n  }, {\n    dialect: 'Magyar',\n    code: 'hu-HU'\n  }, {\n    dialect: 'Nederlands',\n    code: 'nl-NL'\n  }, {\n    dialect: 'Norsk bokmål',\n    code: 'nb-NO'\n  }, {\n    dialect: 'Polski',\n    code: 'pl-PL'\n  }, {\n    dialect: 'Português (Brasil)',\n    code: 'pt-BR'\n  }, {\n    dialect: 'Português (Portugal)',\n    code: 'pt-PT'\n  }, {\n    dialect: 'Pусский',\n    code: 'ru-RU'\n  }, {\n    dialect: 'Română',\n    code: 'ro-RO'\n  }, {\n    dialect: 'Slovenčina',\n    code: 'sk-SK'\n  }, {\n    dialect: 'Slovenščina',\n    code: 'sl-SI'\n  }, {\n    dialect: 'Suomi',\n    code: 'fi-FI'\n  }, {\n    dialect: 'Svenska',\n    code: 'sv-SE'\n  }, {\n    dialect: 'Tiếng Việt',\n    code: 'vi-VN'\n  }, {\n    dialect: 'Türkçe',\n    code: 'tr-TR'\n  }, {\n    dialect: 'Ελληνικά',\n    code: 'el-GR'\n  }, {\n    dialect: 'български',\n    code: 'bg-BG'\n  }, {\n    dialect: 'Српски',\n    code: 'sr-RS'\n  }, {\n    dialect: 'Українська',\n    code: 'uk-UA'\n  }, {\n    dialect: 'ქართული',\n    code: 'ka-GE'\n  }, {\n    dialect: 'Հայերեն',\n    code: 'hy-AM'\n  }, {\n    dialect: 'اُردُو (بھارت)',\n    code: 'ur-IN'\n  }, {\n    dialect: 'اُردُو (پاکستان)',\n    code: 'ur-PK'\n  }, {\n    dialect: 'አማርኛ',\n    code: 'am-ET'\n  }, {\n    dialect: 'नेपाली भाषा',\n    code: 'ne-NP'\n  }, {\n    dialect: 'मराठी',\n    code: 'mr-IN'\n  }, {\n    dialect: 'हिन्दी',\n    code: 'hi-IN'\n  }, {\n    dialect: 'বাংলা (বাংলাদেশ)',\n    code: 'bn-BD'\n  }, {\n    dialect: 'বাংলা (ভারত)',\n    code: 'bn-IN'\n  }, {\n    dialect: 'ગુજરાતી',\n    code: 'gu-IN'\n  }, {\n    dialect: 'தமிழ் (இந்தியா)',\n    code: 'ta-IN'\n  }, {\n    dialect: 'தமிழ் (இலங்கை)',\n    code: 'ta-LK'\n  }, {\n    dialect: 'தமிழ் (சிங்கப்பூர்)',\n    code: 'ta-SG'\n  }, {\n    dialect: 'தமிழ் (மலேசியா)',\n    code: 'ta-MY'\n  }, {\n    dialect: 'తెలుగు',\n    code: 'te-IN'\n  }, {\n    dialect: 'ಕನ್ನಡ',\n    code: 'kn-IN'\n  }, {\n    dialect: 'മലയാളം',\n    code: 'ml-IN'\n  }, {\n    dialect: 'සිංහල',\n    code: 'si-LK'\n  }, {\n    dialect: 'ภาษาไทย',\n    code: 'th-TH'\n  }, {\n    dialect: 'ລາວ',\n    code: 'lo-LA'\n  }, {\n    dialect: 'ភាសាខ្មែរ',\n    code: 'km-KH'\n  }, {\n    dialect: '한국어',\n    code: 'ko-KR'\n  }, {\n    dialect: '中文 (台灣)',\n    code: 'cmn-Hant-TW'\n  }, {\n    dialect: '中文 (中国大陆)',\n    code: 'cmn-Hans-CN'\n  }, {\n    dialect: '中文 (香港)',\n    code: 'cmn-Hans-HK'\n  }, {\n    dialect: '日本語',\n    code: 'ja-JP'\n  }]; // helper constants for changing between 3 different themes\n\n  const contrast = {\n    mba: '0, 0, 0',\n    mbb: '0, 0, 0',\n    mbc: '0, 0, 0',\n    mbd: '0, 0, 0',\n    mca: '255, 255, 255',\n    mcb: '255, 255, 255',\n    mod: 'contrast'\n  };\n  const dark = {\n    mba: '38, 41, 44',\n    mbb: '47, 51, 55',\n    mbc: '56, 61, 66',\n    mbd: '66, 71, 77',\n    mca: '200, 204, 208',\n    mcb: '211, 214, 217',\n    mod: 'dark'\n  };\n  const light = {\n    mba: '249, 249, 249',\n    mbb: '225, 225, 225',\n    mbc: '201, 201, 201',\n    mbd: '180, 180, 180',\n    mca: '32, 32, 32',\n    mcb: '64, 64, 64',\n    mod: 'light'\n  }; // helper constants that help reset user settings to default values\n\n  const originalAhkData = {\n    sendGameChat: true,\n    gameChatClose: '',\n    gameChatDelay: 250,\n    gameChatOpen: 'Enter',\n    gameChatSend: 'Enter',\n    macroMode: 'touch',\n    macroToggle: '`'\n  };\n  const originalAudioData = {\n    lang: 'EN',\n    sttDialect: 'en-US',\n    threshold: 70,\n    ttsVoice: 'Microsoft David - English (United States)',\n    ttsCalloutsI: true,\n    ttsCalloutsO: true,\n    ttsChatI: true,\n    ttsChatO: true,\n    ttsPitch: 1,\n    ttsRate: 1,\n    ttsVolume: 0.8\n  };\n  const originalThemeData = {\n    bbc: '0, 61, 165',\n    bcc: '255, 255, 255',\n    cba: '238, 0, 0',\n    cbb: '122, 122, 0',\n    cbc: '0, 138, 0',\n    cbd: '0, 132, 132',\n    cbe: '97, 97, 255',\n    cbf: '209, 0, 209',\n    cca: '255, 255, 255',\n    ccb: '255, 255, 255',\n    ccc: '255, 255, 255',\n    ccd: '255, 255, 255',\n    cce: '255, 255, 255',\n    ccf: '255, 255, 255',\n    fsz: 20,\n    hrs: true,\n    lyt: 'touch',\n    mba: '249, 249, 249',\n    mbb: '225, 225, 225',\n    mbc: '201, 201, 201',\n    mbd: '180, 180, 180',\n    mca: '32, 32, 32',\n    mcb: '64, 64, 64',\n    mod: 'light'\n  }; // states that hold the data currently in use\n\n  const synth = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const utter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const {\n    currentUser,\n    userData\n  } = (0,_AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth)();\n  const userIsPremium = (0,_stripe_usePremiumStatus__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currentUser);\n  const {\n    0: ahk,\n    1: setAhk\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(originalAhkData);\n  const {\n    0: audio,\n    1: setAudio\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(originalAudioData);\n  const {\n    0: theme,\n    1: setTheme\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(originalThemeData);\n  const {\n    0: allVoicesObj,\n    1: setAllVoicesObj\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({}); // updates the localstorage for each setting\n\n  const updateLocalStorage = (data, key, val) => {\n    const str = localStorage.getItem(data);\n    let obj, newObj, newStr;\n\n    if (val) {\n      if (val === originalThemeData[key]) {\n        if (str) {\n          obj = JSON.parse(str);\n\n          if (obj[key]) {\n            delete obj[key];\n            newStr = JSON.stringify(obj);\n            localStorage.setItem(data, newStr);\n          }\n        }\n      }\n\n      obj = JSON.parse(str);\n      newObj = _objectSpread(_objectSpread({}, obj), {}, {\n        [key]: val\n      });\n      newStr = JSON.stringify(newObj);\n\n      if (str !== newStr) {\n        localStorage.setItem(data, newStr);\n      }\n    } else {\n      if (str) {\n        obj = JSON.parse(str);\n\n        if (obj[key]) {\n          delete obj[key];\n          newStr = JSON.stringify(obj);\n          localStorage.setItem(data, newStr);\n        }\n      }\n    }\n  }; // updates localStorage from firebase for premium users to sync settings across devices\n\n\n  const getFirebaseSettings = (val = 'all') => {\n    if (val !== 'all' && val !== 'ahkData' && val !== 'audioData' && val !== 'themeData') return console.error(`Invalid getFirebaseSettings (all ahkData audioData themeData): ${val}`);\n\n    if (currentUser && !currentUser.isAnonymous && userIsPremium) {\n      (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.get)((0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.child)((0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), `userSettings/${currentUser.uid}`)).then(dataSnapshot => {\n        if (dataSnapshot.exists()) {\n          if (dataSnapshot.val().ahkData && (val === 'all' || val === 'ahkData')) {\n            let ahkObj, newAhkObj;\n            localStorage.setItem('ceAhkData', dataSnapshot.val().ahkData);\n            ahkObj = JSON.parse(dataSnapshot.val().ahkData);\n            newAhkObj = _objectSpread(_objectSpread({}, originalAhkData), ahkObj);\n            setAhk(newAhkObj);\n          } else if (val === 'all' || val === 'ahkData') {\n            const localAhkData = localStorage.getItem('ceAhkData');\n            let obj1, newObj1;\n\n            if (localAhkData) {\n              obj1 = JSON.parse(localAhkData);\n              newObj1 = _objectSpread(_objectSpread({}, originalAhkData), obj1);\n              setAhk(newObj1);\n            } else {\n              setAhk(originalAhkData);\n            }\n          }\n\n          if (dataSnapshot.val().audioData && (val === 'all' || val === 'audioData')) {\n            let audioObj, newAudioObj;\n            localStorage.setItem('ceAudioData', dataSnapshot.val().audioData);\n            audioObj = JSON.parse(dataSnapshot.val().audioData);\n            newAudioObj = _objectSpread(_objectSpread({}, originalAudioData), audioObj);\n            setAudio(newAudioObj);\n          } else if (val === 'all' || val === 'audioData') {\n            const localAudioData = localStorage.getItem('ceAudioData');\n            let obj2, newObj2;\n\n            if (localAudioData) {\n              obj2 = JSON.parse(localAudioData);\n              newObj2 = _objectSpread(_objectSpread({}, originalAudioData), obj2);\n              document.documentElement.style.fontSize = `${newObj2.fsz}px`;\n              setAudio(newObj2);\n            } else {\n              setAudio(originalAudioData);\n            }\n          }\n\n          if (dataSnapshot.val().themeData && (val === 'all' || val === 'themeData')) {\n            let themeObj, newThemeObj;\n            localStorage.setItem('ceThemeData', dataSnapshot.val().themeData);\n            themeObj = JSON.parse(dataSnapshot.val().themeData);\n            newThemeObj = _objectSpread(_objectSpread({}, originalThemeData), themeObj);\n            document.documentElement.style.fontSize = `${newThemeObj.fsz}px`;\n            setTheme(newThemeObj);\n          } else if (val === 'all' || val === 'themeData') {\n            const localThemeData = localStorage.getItem('ceThemeData');\n            let obj3, newObj3;\n\n            if (localThemeData) {\n              obj3 = JSON.parse(localThemeData);\n              newObj3 = _objectSpread(_objectSpread({}, originalThemeData), obj3);\n              document.documentElement.style.fontSize = `${newObj3.fsz}px`;\n              setTheme(newObj3);\n            } else {\n              setTheme(originalThemeData);\n            }\n          }\n        } else {\n          if (val === 'all' || val === 'ahkData') {\n            const localAhkData = localStorage.getItem('ceAhkData');\n            let obj1, newObj1;\n\n            if (localAhkData) {\n              obj1 = JSON.parse(localAhkData);\n              newObj1 = _objectSpread(_objectSpread({}, originalAhkData), obj1);\n              setAhk(newObj1);\n            } else {\n              setAhk(originalAhkData);\n            }\n          }\n\n          if (val === 'all' || val === 'audioData') {\n            const localAudioData = localStorage.getItem('ceAudioData');\n            let obj2, newObj2;\n\n            if (localAudioData) {\n              obj2 = JSON.parse(localAudioData);\n              newObj2 = _objectSpread(_objectSpread({}, originalAudioData), obj2);\n              document.documentElement.style.fontSize = `${newObj2.fsz}px`;\n              setAudio(newObj2);\n            } else {\n              setAudio(originalAudioData);\n            }\n          }\n\n          if (val === 'all' || val === 'themeData') {\n            const localThemeData = localStorage.getItem('ceThemeData');\n            let obj3, newObj3;\n\n            if (localThemeData) {\n              obj3 = JSON.parse(localThemeData);\n              newObj3 = _objectSpread(_objectSpread({}, originalThemeData), obj3);\n              document.documentElement.style.fontSize = `${newObj3.fsz}px`;\n              setTheme(newObj3);\n            } else {\n              setTheme(originalThemeData);\n            }\n          }\n        }\n      });\n    }\n  }; // saves localStorage to firebase for premium users to sync settings across devices\n\n\n  const saveFirebaseSettings = (val = 'all') => {\n    const localAhkData = localStorage.getItem('ceAhkData');\n    const localAudioData = localStorage.getItem('ceAudioData');\n    const localThemeData = localStorage.getItem('ceThemeData');\n    if (val !== 'all' && val !== 'ahkData' && val !== 'audioData' && val !== 'themeData') return console.error(`Invalid saveFirebaseSettings (all ahkData audioData themeData): ${val}`);\n\n    if (currentUser && !currentUser.isAnonymous && userIsPremium) {\n      if (localAhkData && (val === 'all' || val === 'ahkData')) {\n        (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.set)((0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database, `userSettings/${currentUser.uid}/ahkData`), localAhkData);\n      }\n\n      if (localAudioData && (val === 'all' || val === 'audioData')) {\n        (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.set)((0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database, `userSettings/${currentUser.uid}/audioData`), localAudioData);\n      }\n\n      if (localThemeData && (val === 'all' || val === 'themeData')) {\n        (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.set)((0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database, `userSettings/${currentUser.uid}/themeData`), localThemeData);\n      }\n    }\n  }; // helper functions that validate input before updating localStorage and current state\n\n\n  const setAhkData = (key, val) => {\n    const target = key.trim();\n\n    switch (target) {\n      case 'gameChatClose':\n        if (typeof val === 'string') {\n          updateLocalStorage('ceAhkData', target, val);\n          setAhk(ahk => _objectSpread(_objectSpread({}, ahk), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAhkData.gameChatClose (string): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'gameChatDelay':\n        if (typeof val === 'number') {\n          updateLocalStorage('ceAhkData', target, val);\n          setAhk(ahk => _objectSpread(_objectSpread({}, ahk), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAhkData.gameChatDelay (number): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'gameChatOpen':\n        if (typeof val === 'string') {\n          updateLocalStorage('ceAhkData', target, val);\n          setAhk(ahk => _objectSpread(_objectSpread({}, ahk), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAhkData.gameChatOpen (string): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'gameChatSend':\n        if (typeof val === 'string') {\n          updateLocalStorage('ceAhkData', target, val);\n          setAhk(ahk => _objectSpread(_objectSpread({}, ahk), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAhkData.gameChatSend (string): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'sendGameChat':\n        if (typeof val === 'boolean') {\n          updateLocalStorage('ceAhkData', target, val);\n          setAhk(ahk => _objectSpread(_objectSpread({}, ahk), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAhkData.sendGameChat (boolean): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'macroMode':\n        if (val === 'keyboard' || val === 'list' || val === 'numberpad' || val === 'touch') {\n          updateLocalStorage('ceAhkData', target, val);\n          setAhk(ahk => _objectSpread(_objectSpread({}, ahk), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAhkData.macroMode (keyboard, list, numberpad, touch): ${val}`);\n        }\n\n        break;\n\n      case 'macroToggle':\n        if (typeof val === 'string') {\n          updateLocalStorage('ceAhkData', target, val);\n          setAhk(ahk => _objectSpread(_objectSpread({}, ahk), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAhkData.macroToggle (string): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      default:\n        console.error(`Invalid setAhkData key (sendGameChat, gameChatClose, gameChatDelay, gameChatOpen, gameChatSend, macroMode, macroToggle): ${key}`);\n        break;\n    }\n  };\n\n  const setAudioData = (key, val) => {\n    const target = key.trim();\n\n    switch (target) {\n      case 'sttDialect':\n        if (typeof val === 'string') {\n          updateLocalStorage('ceAudioData', target, val);\n          setAudio(audio => _objectSpread(_objectSpread({}, audio), {}, {\n            lang: val.split('-')[0].toUpperCase(),\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAudioData.sttDialect (string): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'threshold':\n        if (typeof val === 'number') {\n          updateLocalStorage('ceAudioData', target, val);\n          setAudio(audio => _objectSpread(_objectSpread({}, audio), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAudioData.threshold (number): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'ttsCalloutsI':\n        if (typeof val === 'boolean') {\n          updateLocalStorage('ceAudioData', target, val);\n          setAudio(audio => _objectSpread(_objectSpread({}, audio), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAudioData.ttsCalloutsI (boolean): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'ttsCalloutsO':\n        if (typeof val === 'boolean') {\n          updateLocalStorage('ceAudioData', target, val);\n          setAudio(audio => _objectSpread(_objectSpread({}, audio), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAudioData.ttsCalloutsO (boolean): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'ttsChatI':\n        if (typeof val === 'boolean') {\n          updateLocalStorage('ceAudioData', target, val);\n          setAudio(audio => _objectSpread(_objectSpread({}, audio), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAudioData.ttsChatI (boolean): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'ttsChatO':\n        if (typeof val === 'boolean') {\n          updateLocalStorage('ceAudioData', target, val);\n          setAudio(audio => _objectSpread(_objectSpread({}, audio), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAudioData.ttsChatO (boolean): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'ttsPitch':\n        if (typeof val === 'number') {\n          updateLocalStorage('ceAudioData', target, val);\n          setAudio(audio => _objectSpread(_objectSpread({}, audio), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAudioData.ttsPitch (number): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'ttsRate':\n        if (typeof val === 'number') {\n          updateLocalStorage('ceAudioData', target, val);\n          setAudio(audio => _objectSpread(_objectSpread({}, audio), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAudioData.ttsRate (number): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'ttsVoice':\n        if (typeof val === 'string') {\n          updateLocalStorage('ceAudioData', target, val);\n          setAudio(audio => _objectSpread(_objectSpread({}, audio), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAudioData.ttsVoice (string): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'ttsVolume':\n        if (typeof val === 'number') {\n          updateLocalStorage('ceAudioData', target, val);\n          setAudio(audio => _objectSpread(_objectSpread({}, audio), {}, {\n            [target]: val\n          }));\n        } else {\n          console.error(`Invalid setAudioData.ttsVolume (number): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      default:\n        console.error(`Invalid setAudioData key (sttDialect, threshold, ttsVoice, ttsCalloutsI, ttsCalloutsO, ttsChatI, ttsChatO, ttsPitch, ttsRate, ttsVolume): ${key}`);\n        break;\n    }\n  }; // returns white or black rgb values based on highest contrast with provided color\n\n\n  const maxContrast = col => {\n    if (col) {\n      let rgb = hexToRgb(col);\n      if (rgb === 'invalid') return 'invalid';\n      let arr = rgb.split(', ');\n      let r = parseInt(arr[0], 10);\n      let g = parseInt(arr[1], 10);\n      let b = parseInt(arr[2], 10);\n      let v = Math.min(Math.max(((r * 299 + g * 587 + b * 144) / 1000 - 128) * -1000, 0), 255);\n      return `${v}, ${v}, ${v}`;\n    }\n  }; // converts hex to rgb or rgb to formatted rgb\n\n\n  const hexToRgb = col => {\n    if (col) {\n      let r, b, g;\n      let hex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(col);\n\n      if (hex === null) {\n        let rgb = col.split(',');\n\n        if (rgb.length === 3) {\n          r = parseInt(rgb[0].replace(/[{()}]/g, '').trim(), 10);\n          g = parseInt(rgb[1].replace(/[{()}]/g, '').trim(), 10);\n          b = parseInt(rgb[2].replace(/[{()}]/g, '').trim(), 10);\n        } else {\n          return 'invalid';\n        }\n      } else {\n        r = parseInt(hex[1], 16);\n        g = parseInt(hex[2], 16);\n        b = parseInt(hex[3], 16);\n      }\n\n      return `${r}, ${g}, ${b}`;\n    }\n  };\n\n  const setThemeClr = (key, value) => {\n    let val = value;\n\n    if (value.includes('rgb')) {\n      val = value.slice(4, -1);\n    }\n\n    let bkg = `cb${key}`;\n    let clr = `cc${key}`;\n    let rgb = hexToRgb(val);\n    let inv = maxContrast(rgb);\n    if (rgb === 'invalid' || val === 'invalid') return console.error(`Invalid setThemeClr ('#000000' or '0, 0, 0'): ${hex}`);\n    updateLocalStorage('ceThemeData', bkg, rgb);\n    updateLocalStorage('ceThemeData', clr, inv);\n    setTheme(theme => _objectSpread(_objectSpread({}, theme), {}, {\n      [bkg]: rgb,\n      [clr]: inv\n    }));\n  };\n\n  const setThemeData = (key, val) => {\n    const target = key.toLowerCase().trim();\n    const clr = val.toLowerCase().trim();\n\n    switch (target) {\n      case 'a':\n        setThemeClr(target, clr);\n        break;\n\n      case 'b':\n        setThemeClr(target, clr);\n        break;\n\n      case 'c':\n        setThemeClr(target, clr);\n        break;\n\n      case 'd':\n        setThemeClr(target, clr);\n        break;\n\n      case 'e':\n        setThemeClr(target, clr);\n        break;\n\n      case 'f':\n        setThemeClr(target, clr);\n        break;\n\n      case 'fsz':\n        const size = parseInt(val, 10);\n\n        if (typeof size === 'number') {\n          document.documentElement.style.fontSize = `${size}px`;\n          updateLocalStorage('ceThemeData', 'fsz', size);\n          setTheme(theme => _objectSpread(_objectSpread({}, theme), {}, {\n            fsz: size\n          }));\n        } else {\n          console.error(`Invalid setThemeData.fsz (number): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'hrs':\n        if (typeof val === 'boolean') {\n          updateLocalStorage('ceThemeData', 'fsz', val);\n          setTheme(theme => _objectSpread(_objectSpread({}, theme), {}, {\n            hrs: val\n          }));\n        } else {\n          console.error(`Invalid setThemeData.hrs (boolean): ${val} ${typeof val}`);\n        }\n\n        break;\n\n      case 'mod':\n        const mode = val.toLowerCase().trim();\n\n        if (mode === 'contrast' || mode === 'dark' || mode === 'light') {\n          let obj;\n\n          switch (mode) {\n            case 'contrast':\n              obj = contrast;\n              break;\n\n            case 'dark':\n              obj = dark;\n              break;\n\n            default:\n              obj = light;\n              break;\n          }\n\n          for (const [key, val] of Object.entries(obj)) {\n            updateLocalStorage('ceThemeData', key, val);\n          }\n\n          setTheme(theme => _objectSpread(_objectSpread({}, theme), obj));\n        } else {\n          console.error(`Invalid setThemeData.mod (contrast dark light): ${mode}`);\n        }\n\n        break;\n\n      default:\n        console.error(`Invalid setThemeDatan key (a-f fsz hrs mod): ${key}`);\n        break;\n    }\n  };\n\n  const speak = (text, rate, priority = false) => {\n    if (priority) {\n      synth.current.cancel();\n    }\n\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.volume = audio.ttsVolume;\n    utterance.voice = speechSynthesis.getVoices().filter(voice => voice.name === audio.ttsVoice)[0];\n    utterance.pitch = audio.ttsPitch;\n    utterance.rate = rate ? rate : audio.ttsRate;\n    synth.current.speak(utterance);\n  }; // fetches user settings from localhost, then firebase, then uses defaults.\n\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    async function fetchData() {\n      const localAhkData = localStorage.getItem('ceAhkData');\n      let obj1, newObj1;\n\n      if (localAhkData) {\n        obj1 = JSON.parse(localAhkData);\n        newObj1 = _objectSpread(_objectSpread({}, originalAhkData), obj1);\n        setAhk(newObj1);\n      } else {\n        setAhk(originalAhkData);\n      }\n\n      const localAudioData = localStorage.getItem('ceAudioData');\n      let obj2, newObj2;\n\n      if (localAudioData) {\n        obj2 = JSON.parse(localAudioData);\n        newObj2 = _objectSpread(_objectSpread({}, originalAudioData), obj2);\n        setAudio(newObj2);\n      } else {\n        setAudio(originalAudioData);\n      }\n\n      const localThemeData = localStorage.getItem('ceThemeData');\n      let obj3, newObj3;\n\n      if (localThemeData) {\n        obj3 = JSON.parse(localThemeData);\n        newObj3 = _objectSpread(_objectSpread({}, originalThemeData), obj3);\n        document.documentElement.style.fontSize = `${newObj3.fsz}px`;\n        setTheme(newObj3);\n      } else {\n        setTheme(originalThemeData);\n      }\n\n      if (!localAhkData && !localAudioData && !localThemeData) {\n        getFirebaseSettings('all');\n      }\n    }\n\n    fetchData();\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (true) return;\n    synth.current = window.speechSynthesis;\n    synth.current.onvoiceschanged = setAllVoicesObj(synth.current.getVoices());\n    setTimeout(() => {\n      setAllVoicesObj(synth.current.getVoices());\n    }, 1000);\n    utter.current = new SpeechSynthesisUtterance();\n    return () => {\n      synth.current.onvoiceschanged = null;\n    };\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    async function setTitle() {\n      if (!currentUser) return;\n      if (currentUser.isAnonymous) return;\n      let updates = {};\n\n      if (userIsPremium) {\n        if (userData.title === 'Gamer') {\n          updates[`userData/${currentUser.uid}/title`] = 'MVP';\n        }\n      } else {\n        if (userData.title === 'MVP') {\n          updates[`userData/${currentUser.uid}/title`] = 'Gamer';\n        }\n      }\n\n      if (updates !== {}) {\n        (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.update)((0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.ref)(_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_2__.database), updates);\n      }\n    }\n\n    setTitle();\n  }, [userIsPremium]);\n  const value = {\n    ahk,\n    audio,\n    theme,\n    speak,\n    synth,\n    allVoicesObj,\n    allDialectsArr,\n    allLanguagesArr,\n    originalAhkData,\n    originalAudioData,\n    originalThemeData,\n    getFirebaseSettings,\n    saveFirebaseSettings,\n    setAhkData,\n    setAudioData,\n    setThemeData,\n    userIsPremium\n  };\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(SettingsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 934,\n    columnNumber: 10\n  }, undefined);\n};\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./context/SettingsContext.js\n");

/***/ }),

/***/ "./firebase/firebaseClient.js":
/*!************************************!*\
  !*** ./firebase/firebaseClient.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"app\": () => (/* binding */ app),\n/* harmony export */   \"auth\": () => (/* binding */ auth),\n/* harmony export */   \"firestore\": () => (/* binding */ firestore),\n/* harmony export */   \"storage\": () => (/* binding */ storage),\n/* harmony export */   \"database\": () => (/* binding */ database)\n/* harmony export */ });\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/auth */ \"firebase/auth\");\n/* harmony import */ var firebase_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/database */ \"firebase/database\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/storage */ \"firebase/storage\");\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! firebase/app */ \"firebase/app\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_database__WEBPACK_IMPORTED_MODULE_1__, firebase_storage__WEBPACK_IMPORTED_MODULE_3__, firebase_firestore__WEBPACK_IMPORTED_MODULE_2__, firebase_auth__WEBPACK_IMPORTED_MODULE_0__, firebase_app__WEBPACK_IMPORTED_MODULE_4__]);\n([firebase_database__WEBPACK_IMPORTED_MODULE_1__, firebase_storage__WEBPACK_IMPORTED_MODULE_3__, firebase_firestore__WEBPACK_IMPORTED_MODULE_2__, firebase_auth__WEBPACK_IMPORTED_MODULE_0__, firebase_app__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__);\n// import { getMessaging, getToken } from 'firebase/messaging';\n\n\n\n\n\nconst clientCredentials = {\n  apiKey: \"AIzaSyCMgE-k8juQ0bWkhlONo1zJi8vhh44U86A\",\n  authDomain: \"calloutsevolved.firebaseapp.com\",\n  projectId: \"calloutsevolved\",\n  storageBucket: \"calloutsevolved.appspot.com\",\n  messagingSenderId: \"580878402383\",\n  appId: \"1:580878402383:web:e352bf5ae81444a58f3b3a\",\n  databaseURL: \"https://calloutsevolved-default-rtdb.firebaseio.com\",\n  measurementId: \"G-81CHW652K4\"\n};\nconst app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_4__.initializeApp)(clientCredentials);\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getAuth)(app);\nconst firestore = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getFirestore)(app);\nconst storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_3__.getStorage)(app);\nconst database = (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.getDatabase)(app); // export const messaging = getMessaging(app);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9maXJlYmFzZS9maXJlYmFzZUNsaWVudC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTUssaUJBQWlCLEdBQUc7QUFDeEJDLEVBQUFBLE1BQU0sRUFBRUMseUNBRGdCO0FBRXhCRyxFQUFBQSxVQUFVLEVBQUVILGlDQUZZO0FBR3hCSyxFQUFBQSxTQUFTLEVBQUVMLGlCQUhhO0FBSXhCTyxFQUFBQSxhQUFhLEVBQUVQLDZCQUpTO0FBS3hCUyxFQUFBQSxpQkFBaUIsRUFBRVQsY0FMSztBQU14QlcsRUFBQUEsS0FBSyxFQUFFWCwyQ0FOaUI7QUFPeEJhLEVBQUFBLFdBQVcsRUFBRWIscURBUFc7QUFReEJlLEVBQUFBLGFBQWEsRUFBRWYsY0FBOENnQjtBQVJyQyxDQUExQjtBQVdPLE1BQU1DLEdBQUcsR0FBR3BCLDJEQUFhLENBQUNDLGlCQUFELENBQXpCO0FBQ0EsTUFBTW9CLElBQUksR0FBR3pCLHNEQUFPLENBQUN3QixHQUFELENBQXBCO0FBQ0EsTUFBTUUsU0FBUyxHQUFHeEIsZ0VBQVksQ0FBQ3NCLEdBQUQsQ0FBOUI7QUFDQSxNQUFNRyxPQUFPLEdBQUd4Qiw0REFBVSxDQUFDcUIsR0FBRCxDQUExQjtBQUNBLE1BQU1JLFFBQVEsR0FBRzNCLDhEQUFXLENBQUN1QixHQUFELENBQTVCLEVBQ1AsOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWxsb3V0c2V2b2x2ZWQvLi9maXJlYmFzZS9maXJlYmFzZUNsaWVudC5qcz8wNDFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IGdldE1lc3NhZ2luZywgZ2V0VG9rZW4gfSBmcm9tICdmaXJlYmFzZS9tZXNzYWdpbmcnO1xyXG5cclxuaW1wb3J0IHsgZ2V0QXV0aCB9IGZyb20gJ2ZpcmViYXNlL2F1dGgnO1xyXG5pbXBvcnQgeyBnZXREYXRhYmFzZSB9IGZyb20gJ2ZpcmViYXNlL2RhdGFiYXNlJztcclxuaW1wb3J0IHsgZ2V0RmlyZXN0b3JlIH0gZnJvbSAnZmlyZWJhc2UvZmlyZXN0b3JlJztcclxuaW1wb3J0IHsgZ2V0U3RvcmFnZSB9IGZyb20gJ2ZpcmViYXNlL3N0b3JhZ2UnO1xyXG5pbXBvcnQgeyBpbml0aWFsaXplQXBwIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcclxuXHJcbmNvbnN0IGNsaWVudENyZWRlbnRpYWxzID0ge1xyXG4gIGFwaUtleTogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfQVBJX0tFWSxcclxuICBhdXRoRG9tYWluOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GSVJFQkFTRV9BVVRIX0RPTUFJTixcclxuICBwcm9qZWN0SWQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX1BST0pFQ1RfSUQsXHJcbiAgc3RvcmFnZUJ1Y2tldDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfU1RPUkFHRV9CVUNLRVQsXHJcbiAgbWVzc2FnaW5nU2VuZGVySWQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX01FU1NBR0lOR19TRU5ERVJfSUQsXHJcbiAgYXBwSWQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX0FQUF9JRCxcclxuICBkYXRhYmFzZVVSTDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfREFUQUJBU0VVUkwsXHJcbiAgbWVhc3VyZW1lbnRJZDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfTUVBU1VSRU1FTlRJRCxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBhcHAgPSBpbml0aWFsaXplQXBwKGNsaWVudENyZWRlbnRpYWxzKTtcclxuZXhwb3J0IGNvbnN0IGF1dGggPSBnZXRBdXRoKGFwcCk7XHJcbmV4cG9ydCBjb25zdCBmaXJlc3RvcmUgPSBnZXRGaXJlc3RvcmUoYXBwKTtcclxuZXhwb3J0IGNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlKGFwcCk7XHJcbmV4cG9ydCBjb25zdCBkYXRhYmFzZSA9IGdldERhdGFiYXNlKGFwcCk7XHJcbi8vIGV4cG9ydCBjb25zdCBtZXNzYWdpbmcgPSBnZXRNZXNzYWdpbmcoYXBwKTtcclxuIl0sIm5hbWVzIjpbImdldEF1dGgiLCJnZXREYXRhYmFzZSIsImdldEZpcmVzdG9yZSIsImdldFN0b3JhZ2UiLCJpbml0aWFsaXplQXBwIiwiY2xpZW50Q3JlZGVudGlhbHMiLCJhcGlLZXkiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfQVBJX0tFWSIsImF1dGhEb21haW4iLCJORVhUX1BVQkxJQ19GSVJFQkFTRV9BVVRIX0RPTUFJTiIsInByb2plY3RJZCIsIk5FWFRfUFVCTElDX0ZJUkVCQVNFX1BST0pFQ1RfSUQiLCJzdG9yYWdlQnVja2V0IiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfU1RPUkFHRV9CVUNLRVQiLCJtZXNzYWdpbmdTZW5kZXJJZCIsIk5FWFRfUFVCTElDX0ZJUkVCQVNFX01FU1NBR0lOR19TRU5ERVJfSUQiLCJhcHBJZCIsIk5FWFRfUFVCTElDX0ZJUkVCQVNFX0FQUF9JRCIsImRhdGFiYXNlVVJMIiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfREFUQUJBU0VVUkwiLCJtZWFzdXJlbWVudElkIiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfTUVBU1VSRU1FTlRJRCIsImFwcCIsImF1dGgiLCJmaXJlc3RvcmUiLCJzdG9yYWdlIiwiZGF0YWJhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./firebase/firebaseClient.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = __webpack_require__(/*! ../shared/lib/router/router */ \"./node_modules/next/dist/shared/lib/router/router.js\");\n\nvar _router1 = __webpack_require__(/*! ./router */ \"./node_modules/next/dist/client/router.js\");\n\nvar _useIntersection = __webpack_require__(/*! ./use-intersection */ \"./node_modules/next/dist/client/use-intersection.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst prefetched = {};\n\nfunction prefetch(router, href, as, options) {\n  if (true) return;\n  if (!(0, _router).isLocalURL(href)) return; // Prefetch the JSON page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n\n  router.prefetch(href, as, options).catch(err => {\n    if (true) {\n      // rethrow to show invalid URL errors\n      throw err;\n    }\n  });\n  const curLocale = options && typeof options.locale !== 'undefined' ? options.locale : router && router.locale; // Join on an invalid URI character\n\n  prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')] = true;\n}\n\nfunction isModifiedEvent(event) {\n  const {\n    target\n  } = event.currentTarget;\n  return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || event.nativeEvent && event.nativeEvent.which === 2;\n}\n\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale) {\n  const {\n    nodeName\n  } = e.currentTarget;\n\n  if (nodeName === 'A' && (isModifiedEvent(e) || !(0, _router).isLocalURL(href))) {\n    // ignore click for browser’s default behavior\n    return;\n  }\n\n  e.preventDefault(); //  avoid scroll for urls with anchor refs\n\n  if (scroll == null && as.indexOf('#') >= 0) {\n    scroll = false;\n  } // replace state instead of push if prop is present\n\n\n  router[replace ? 'replace' : 'push'](href, as, {\n    shallow,\n    locale,\n    scroll\n  });\n}\n\nfunction Link(props) {\n  if (true) {\n    function createPropError(args) {\n      return new Error(`Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` + ( false ? 0 : ''));\n    } // TypeScript trick for type-guarding:\n\n\n    const requiredPropsGuard = {\n      href: true\n    };\n    const requiredProps = Object.keys(requiredPropsGuard);\n    requiredProps.forEach(key => {\n      if (key === 'href') {\n        if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: props[key] === null ? 'null' : typeof props[key]\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    }); // TypeScript trick for type-guarding:\n\n    const optionalPropsGuard = {\n      as: true,\n      replace: true,\n      scroll: true,\n      shallow: true,\n      passHref: true,\n      prefetch: true,\n      locale: true\n    };\n    const optionalProps = Object.keys(optionalPropsGuard);\n    optionalProps.forEach(key => {\n      const valType = typeof props[key];\n\n      if (key === 'as') {\n        if (props[key] && valType !== 'string' && valType !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: valType\n          });\n        }\n      } else if (key === 'locale') {\n        if (props[key] && valType !== 'string') {\n          throw createPropError({\n            key,\n            expected: '`string`',\n            actual: valType\n          });\n        }\n      } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch') {\n        if (props[key] != null && valType !== 'boolean') {\n          throw createPropError({\n            key,\n            expected: '`boolean`',\n            actual: valType\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    }); // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n\n    const hasWarned = _react.default.useRef(false);\n\n    if (props.prefetch && !hasWarned.current) {\n      hasWarned.current = true;\n      console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated');\n    }\n  }\n\n  const p = props.prefetch !== false;\n  const router = (0, _router1).useRouter();\n\n  const {\n    href,\n    as\n  } = _react.default.useMemo(() => {\n    const [resolvedHref, resolvedAs] = (0, _router).resolveHref(router, props.href, true);\n    return {\n      href: resolvedHref,\n      as: props.as ? (0, _router).resolveHref(router, props.as) : resolvedAs || resolvedHref\n    };\n  }, [router, props.href, props.as]);\n\n  let {\n    children,\n    replace,\n    shallow,\n    scroll,\n    locale\n  } = props;\n\n  if (typeof children === 'string') {\n    children = /*#__PURE__*/_react.default.createElement(\"a\", null, children);\n  } // This will return the first child, if multiple are provided it will throw an error\n\n\n  let child;\n\n  if (true) {\n    try {\n      child = _react.default.Children.only(children);\n    } catch (err) {\n      throw new Error(`Multiple children were passed to <Link> with \\`href\\` of \\`${props.href}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` + ( false ? 0 : ''));\n    }\n  } else {}\n\n  const childRef = child && typeof child === 'object' && child.ref;\n  const [setIntersectionRef, isVisible] = (0, _useIntersection).useIntersection({\n    rootMargin: '200px'\n  });\n\n  const setRef = _react.default.useCallback(el => {\n    setIntersectionRef(el);\n\n    if (childRef) {\n      if (typeof childRef === 'function') childRef(el);else if (typeof childRef === 'object') {\n        childRef.current = el;\n      }\n    }\n  }, [childRef, setIntersectionRef]);\n\n  _react.default.useEffect(() => {\n    const shouldPrefetch = isVisible && p && (0, _router).isLocalURL(href);\n    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale;\n    const isPrefetched = prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')];\n\n    if (shouldPrefetch && !isPrefetched) {\n      prefetch(router, href, as, {\n        locale: curLocale\n      });\n    }\n  }, [as, href, isVisible, locale, p, router]);\n\n  const childProps = {\n    ref: setRef,\n    onClick: e => {\n      if (child.props && typeof child.props.onClick === 'function') {\n        child.props.onClick(e);\n      }\n\n      if (!e.defaultPrevented) {\n        linkClicked(e, router, href, as, replace, shallow, scroll, locale);\n      }\n    }\n  };\n\n  childProps.onMouseEnter = e => {\n    if (child.props && typeof child.props.onMouseEnter === 'function') {\n      child.props.onMouseEnter(e);\n    }\n\n    if ((0, _router).isLocalURL(href)) {\n      prefetch(router, href, as, {\n        priority: true\n      });\n    }\n  }; // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n  // defined, we specify the current 'href', so that repetition is not needed by the user\n\n\n  if (props.passHref || child.type === 'a' && !('href' in child.props)) {\n    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale; // we only render domain locales if we are currently on a domain locale\n    // so that locale links are still visitable in development/preview envs\n\n    const localeDomain = router && router.isLocaleDomain && (0, _router).getDomainLocale(as, curLocale, router && router.locales, router && router.domainLocales);\n    childProps.href = localeDomain || (0, _router).addBasePath((0, _router).addLocale(as, curLocale, router && router.defaultLocale));\n  }\n\n  return /*#__PURE__*/_react.default.cloneElement(child, childProps);\n}\n\nvar _default = Link;\nexports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/link.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.removePathTrailingSlash = removePathTrailingSlash;\nexports.normalizePathTrailingSlash = void 0;\n\nfunction removePathTrailingSlash(path) {\n  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;\n}\n\nconst normalizePathTrailingSlash =  false ? 0 : removePathTrailingSlash;\nexports.normalizePathTrailingSlash = normalizePathTrailingSlash;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELCtCQUFBLEdBQWtDRSx1QkFBbEM7QUFDQUYsa0NBQUEsR0FBcUMsS0FBSyxDQUExQzs7QUFDQSxTQUFTRSx1QkFBVCxDQUFpQ0UsSUFBakMsRUFBdUM7QUFDbkMsU0FBT0EsSUFBSSxDQUFDQyxRQUFMLENBQWMsR0FBZCxLQUFzQkQsSUFBSSxLQUFLLEdBQS9CLEdBQXFDQSxJQUFJLENBQUNFLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBQyxDQUFmLENBQXJDLEdBQXlERixJQUFoRTtBQUNIOztBQUNELE1BQU1ELDBCQUEwQixHQUFHSSxNQUFBLEdBQXFDSCxDQUFyQyxHQVEvQkYsdUJBUko7QUFTQUYsa0NBQUEsR0FBcUNHLDBCQUFyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGxvdXRzZXZvbHZlZC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaC5qcz80YzJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5yZW1vdmVQYXRoVHJhaWxpbmdTbGFzaCA9IHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoO1xuZXhwb3J0cy5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbmZ1bmN0aW9uIHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aC5lbmRzV2l0aCgnLycpICYmIHBhdGggIT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmNvbnN0IG5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoID0gcHJvY2Vzcy5lbnYuX19ORVhUX1RSQUlMSU5HX1NMQVNIID8gKHBhdGgpPT57XG4gICAgaWYgKC9cXC5bXi9dK1xcLz8kLy50ZXN0KHBhdGgpKSB7XG4gICAgICAgIHJldHVybiByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChwYXRoKTtcbiAgICB9IGVsc2UgaWYgKHBhdGguZW5kc1dpdGgoJy8nKSkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGF0aCArICcvJztcbiAgICB9XG59IDogcmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2g7XG5leHBvcnRzLm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoID0gbm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2g7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vcm1hbGl6ZS10cmFpbGluZy1zbGFzaC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZW1vdmVQYXRoVHJhaWxpbmdTbGFzaCIsIm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoIiwicGF0aCIsImVuZHNXaXRoIiwic2xpY2UiLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX1RSQUlMSU5HX1NMQVNIIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/normalize-trailing-slash.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.cancelIdleCallback = exports.requestIdleCallback = void 0;\n\nconst requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function (cb) {\n  let start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function () {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n};\n\nexports.requestIdleCallback = requestIdleCallback;\n\nconst cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function (id) {\n  return clearTimeout(id);\n};\n\nexports.cancelIdleCallback = cancelIdleCallback;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELDBCQUFBLEdBQTZCQSwyQkFBQSxHQUE4QixLQUFLLENBQWhFOztBQUNBLE1BQU1HLG1CQUFtQixHQUFHLE9BQU9DLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0JBLElBQUksQ0FBQ0QsbUJBQXBDLElBQTJEQyxJQUFJLENBQUNELG1CQUFMLENBQXlCRSxJQUF6QixDQUE4QkMsTUFBOUIsQ0FBM0QsSUFBb0csVUFBU0MsRUFBVCxFQUFhO0FBQ3pJLE1BQUlDLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFMLEVBQVo7QUFDQSxTQUFPQyxVQUFVLENBQUMsWUFBVztBQUN6QkosSUFBQUEsRUFBRSxDQUFDO0FBQ0NLLE1BQUFBLFVBQVUsRUFBRSxLQURiO0FBRUNDLE1BQUFBLGFBQWEsRUFBRSxZQUFXO0FBQ3RCLGVBQU9DLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWSxNQUFNTixJQUFJLENBQUNDLEdBQUwsS0FBYUYsS0FBbkIsQ0FBWixDQUFQO0FBQ0g7QUFKRixLQUFELENBQUY7QUFNSCxHQVBnQixFQU9kLENBUGMsQ0FBakI7QUFRSCxDQVZEOztBQVdBUiwyQkFBQSxHQUE4QkcsbUJBQTlCOztBQUNBLE1BQU1ELGtCQUFrQixHQUFHLE9BQU9FLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0JBLElBQUksQ0FBQ0Ysa0JBQXBDLElBQTBERSxJQUFJLENBQUNGLGtCQUFMLENBQXdCRyxJQUF4QixDQUE2QkMsTUFBN0IsQ0FBMUQsSUFBa0csVUFBU1UsRUFBVCxFQUFhO0FBQ3RJLFNBQU9DLFlBQVksQ0FBQ0QsRUFBRCxDQUFuQjtBQUNILENBRkQ7O0FBR0FoQiwwQkFBQSxHQUE2QkUsa0JBQTdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FsbG91dHNldm9sdmVkLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvcmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzPzFlMjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNhbmNlbElkbGVDYWxsYmFjayA9IGV4cG9ydHMucmVxdWVzdElkbGVDYWxsYmFjayA9IHZvaWQgMDtcbmNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICYmIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjay5iaW5kKHdpbmRvdykgfHwgZnVuY3Rpb24oY2IpIHtcbiAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBjYih7XG4gICAgICAgICAgICBkaWRUaW1lb3V0OiBmYWxzZSxcbiAgICAgICAgICAgIHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSwgMSk7XG59O1xuZXhwb3J0cy5yZXF1ZXN0SWRsZUNhbGxiYWNrID0gcmVxdWVzdElkbGVDYWxsYmFjaztcbmNvbnN0IGNhbmNlbElkbGVDYWxsYmFjayA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLmNhbmNlbElkbGVDYWxsYmFjayAmJiBzZWxmLmNhbmNlbElkbGVDYWxsYmFjay5iaW5kKHdpbmRvdykgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKTtcbn07XG5leHBvcnRzLmNhbmNlbElkbGVDYWxsYmFjayA9IGNhbmNlbElkbGVDYWxsYmFjaztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNhbmNlbElkbGVDYWxsYmFjayIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJzZWxmIiwiYmluZCIsIndpbmRvdyIsImNiIiwic3RhcnQiLCJEYXRlIiwibm93Iiwic2V0VGltZW91dCIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwiTWF0aCIsIm1heCIsImlkIiwiY2xlYXJUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/request-idle-callback.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/route-loader.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/route-loader.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.markAssetError = markAssetError;\nexports.isAssetError = isAssetError;\nexports.getClientBuildManifest = getClientBuildManifest;\nexports.getMiddlewareManifest = getMiddlewareManifest;\nexports.createRouteLoader = createRouteLoader;\n\nvar _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/utils/get-asset-path-from-route */ \"../shared/lib/router/utils/get-asset-path-from-route\"));\n\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive\n// considers as \"Good\" time-to-interactive. We must assume something went\n// wrong beyond this point, and then fall-back to a full page transition to\n// show the user something of value.\n\n\nconst MS_MAX_IDLE_DELAY = 3800;\n\nfunction withFuture(key, map, generator) {\n  let entry = map.get(key);\n\n  if (entry) {\n    if ('future' in entry) {\n      return entry.future;\n    }\n\n    return Promise.resolve(entry);\n  }\n\n  let resolver;\n  const prom = new Promise(resolve => {\n    resolver = resolve;\n  });\n  map.set(key, entry = {\n    resolve: resolver,\n    future: prom\n  });\n  return generator ? generator() // eslint-disable-next-line no-sequences\n  .then(value => (resolver(value), value)).catch(err => {\n    map.delete(key);\n    throw err;\n  }) : prom;\n}\n\nfunction hasPrefetch(link) {\n  try {\n    link = document.createElement('link');\n    return (// detect IE11 since it supports prefetch but isn't detected\n      // with relList.support\n      !!window.MSInputMethodContext && !!document.documentMode || link.relList.supports('prefetch')\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\nconst canPrefetch = hasPrefetch();\n\nfunction prefetchViaDom(href, as, link) {\n  return new Promise((res, rej) => {\n    const selector = `\n      link[rel=\"prefetch\"][href^=\"${href}\"],\n      link[rel=\"preload\"][href^=\"${href}\"],\n      script[src^=\"${href}\"]`;\n\n    if (document.querySelector(selector)) {\n      return res();\n    }\n\n    link = document.createElement('link'); // The order of property assignment here is intentional:\n\n    if (as) link.as = as;\n    link.rel = `prefetch`;\n    link.crossOrigin = undefined;\n    link.onload = res;\n    link.onerror = rej; // `href` should always be last:\n\n    link.href = href;\n    document.head.appendChild(link);\n  });\n}\n\nconst ASSET_LOAD_ERROR = Symbol('ASSET_LOAD_ERROR');\n\nfunction markAssetError(err) {\n  return Object.defineProperty(err, ASSET_LOAD_ERROR, {});\n}\n\nfunction isAssetError(err) {\n  return err && ASSET_LOAD_ERROR in err;\n}\n\nfunction appendScript(src, script) {\n  return new Promise((resolve, reject) => {\n    script = document.createElement('script'); // The order of property assignment here is intentional.\n    // 1. Setup success/failure hooks in case the browser synchronously\n    //    executes when `src` is set.\n\n    script.onload = resolve;\n\n    script.onerror = () => reject(markAssetError(new Error(`Failed to load script: ${src}`))); // 2. Configure the cross-origin attribute before setting `src` in case the\n    //    browser begins to fetch.\n\n\n    script.crossOrigin = undefined; // 3. Finally, set the source and inject into the DOM in case the child\n    //    must be appended for fetching to start.\n\n    script.src = src;\n    document.body.appendChild(script);\n  });\n} // We wait for pages to be built in dev before we start the route transition\n// timeout to prevent an un-necessary hard navigation in development.\n\n\nlet devBuildPromise; // Resolve a promise that times out after given amount of milliseconds.\n\nfunction resolvePromiseWithTimeout(p, ms, err) {\n  return new Promise((resolve, reject) => {\n    let cancelled = false;\n    p.then(r => {\n      // Resolved, cancel the timeout\n      cancelled = true;\n      resolve(r);\n    }).catch(reject); // We wrap these checks separately for better dead-code elimination in\n    // production bundles.\n\n    if (true) {\n      (devBuildPromise || Promise.resolve()).then(() => {\n        (0, _requestIdleCallback).requestIdleCallback(() => setTimeout(() => {\n          if (!cancelled) {\n            reject(err);\n          }\n        }, ms));\n      });\n    }\n\n    if (false) {}\n  });\n}\n\nfunction getClientBuildManifest() {\n  if (self.__BUILD_MANIFEST) {\n    return Promise.resolve(self.__BUILD_MANIFEST);\n  }\n\n  const onBuildManifest = new Promise(resolve => {\n    // Mandatory because this is not concurrent safe:\n    const cb = self.__BUILD_MANIFEST_CB;\n\n    self.__BUILD_MANIFEST_CB = () => {\n      resolve(self.__BUILD_MANIFEST);\n      cb && cb();\n    };\n  });\n  return resolvePromiseWithTimeout(onBuildManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client build manifest')));\n}\n\nfunction getMiddlewareManifest() {\n  if (self.__MIDDLEWARE_MANIFEST) {\n    return Promise.resolve(self.__MIDDLEWARE_MANIFEST);\n  }\n\n  const onMiddlewareManifest = new Promise(resolve => {\n    const cb = self.__MIDDLEWARE_MANIFEST_CB;\n\n    self.__MIDDLEWARE_MANIFEST_CB = () => {\n      resolve(self.__MIDDLEWARE_MANIFEST);\n      cb && cb();\n    };\n  });\n  return resolvePromiseWithTimeout(onMiddlewareManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client middleware manifest')));\n}\n\nfunction getFilesForRoute(assetPrefix, route) {\n  if (true) {\n    return Promise.resolve({\n      scripts: [assetPrefix + '/_next/static/chunks/pages' + encodeURI((0, _getAssetPathFromRoute).default(route, '.js'))],\n      // Styles are handled by `style-loader` in development:\n      css: []\n    });\n  }\n\n  return getClientBuildManifest().then(manifest => {\n    if (!(route in manifest)) {\n      throw markAssetError(new Error(`Failed to lookup route: ${route}`));\n    }\n\n    const allFiles = manifest[route].map(entry => assetPrefix + '/_next/' + encodeURI(entry));\n    return {\n      scripts: allFiles.filter(v => v.endsWith('.js')),\n      css: allFiles.filter(v => v.endsWith('.css'))\n    };\n  });\n}\n\nfunction createRouteLoader(assetPrefix) {\n  const entrypoints = new Map();\n  const loadedScripts = new Map();\n  const styleSheets = new Map();\n  const routes = new Map();\n\n  function maybeExecuteScript(src) {\n    // With HMR we might need to \"reload\" scripts when they are\n    // disposed and readded. Executing scripts twice has no functional\n    // differences\n    if (false) {} else {\n      return appendScript(src);\n    }\n  }\n\n  function fetchStyleSheet(href) {\n    let prom = styleSheets.get(href);\n\n    if (prom) {\n      return prom;\n    }\n\n    styleSheets.set(href, prom = fetch(href).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to load stylesheet: ${href}`);\n      }\n\n      return res.text().then(text => ({\n        href: href,\n        content: text\n      }));\n    }).catch(err => {\n      throw markAssetError(err);\n    }));\n    return prom;\n  }\n\n  return {\n    whenEntrypoint(route) {\n      return withFuture(route, entrypoints);\n    },\n\n    onEntrypoint(route, execute) {\n      (execute ? Promise.resolve().then(() => execute()).then(exports => ({\n        component: exports && exports.default || exports,\n        exports: exports\n      }), err => ({\n        error: err\n      })) : Promise.resolve(undefined)).then(input => {\n        const old = entrypoints.get(route);\n\n        if (old && 'resolve' in old) {\n          if (input) {\n            entrypoints.set(route, input);\n            old.resolve(input);\n          }\n        } else {\n          if (input) {\n            entrypoints.set(route, input);\n          } else {\n            entrypoints.delete(route);\n          } // when this entrypoint has been resolved before\n          // the route is outdated and we want to invalidate\n          // this cache entry\n\n\n          routes.delete(route);\n        }\n      });\n    },\n\n    loadRoute(route, prefetch) {\n      return withFuture(route, routes, () => {\n        let devBuildPromiseResolve;\n\n        if (true) {\n          devBuildPromise = new Promise(resolve => {\n            devBuildPromiseResolve = resolve;\n          });\n        }\n\n        return resolvePromiseWithTimeout(getFilesForRoute(assetPrefix, route).then(({\n          scripts,\n          css\n        }) => {\n          return Promise.all([entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)), Promise.all(css.map(fetchStyleSheet))]);\n        }).then(res => {\n          return this.whenEntrypoint(route).then(entrypoint => ({\n            entrypoint,\n            styles: res[1]\n          }));\n        }), MS_MAX_IDLE_DELAY, markAssetError(new Error(`Route did not complete loading: ${route}`))).then(({\n          entrypoint,\n          styles\n        }) => {\n          const res = Object.assign({\n            styles: styles\n          }, entrypoint);\n          return 'error' in entrypoint ? entrypoint : res;\n        }).catch(err => {\n          if (prefetch) {\n            // we don't want to cache errors during prefetch\n            throw err;\n          }\n\n          return {\n            error: err\n          };\n        }).finally(() => {\n          return devBuildPromiseResolve === null || devBuildPromiseResolve === void 0 ? void 0 : devBuildPromiseResolve();\n        });\n      });\n    },\n\n    prefetch(route) {\n      // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118\n      // License: Apache 2.0\n      let cn;\n\n      if (cn = navigator.connection) {\n        // Don't prefetch if using 2G or if Save-Data is enabled.\n        if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();\n      }\n\n      return getFilesForRoute(assetPrefix, route).then(output => Promise.all(canPrefetch ? output.scripts.map(script => prefetchViaDom(script, 'script')) : [])).then(() => {\n        (0, _requestIdleCallback).requestIdleCallback(() => this.loadRoute(route, true).catch(() => {}));\n      }).catch( // swallow prefetch errors\n      () => {});\n    }\n\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/route-loader.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"Router\", ({\n  enumerable: true,\n  get: function () {\n    return _router.default;\n  }\n}));\nObject.defineProperty(exports, \"withRouter\", ({\n  enumerable: true,\n  get: function () {\n    return _withRouter.default;\n  }\n}));\nexports.useRouter = useRouter;\nexports.createRouter = createRouter;\nexports.makePublicRouterInstance = makePublicRouterInstance;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/router */ \"./node_modules/next/dist/shared/lib/router/router.js\"));\n\nvar _routerContext = __webpack_require__(/*! ../shared/lib/router-context */ \"../shared/lib/router-context\");\n\nvar _isError = _interopRequireDefault(__webpack_require__(/*! ../lib/is-error */ \"./node_modules/next/dist/lib/is-error.js\"));\n\nvar _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ \"./node_modules/next/dist/client/with-router.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst singletonRouter = {\n  router: null,\n  readyCallbacks: [],\n\n  ready(cb) {\n    if (this.router) return cb();\n\n    if (false) {}\n  }\n\n}; // Create public properties and methods of the router in the singletonRouter\n\nconst urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale', 'isReady', 'isPreview', 'isLocaleDomain', 'domainLocales'];\nconst routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];\nconst coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it\n\nObject.defineProperty(singletonRouter, 'events', {\n  get() {\n    return _router.default.events;\n  }\n\n});\nurlPropertyFields.forEach(field => {\n  // Here we need to use Object.defineProperty because we need to return\n  // the property assigned to the actual router\n  // The value might get changed as we change routes and this is the\n  // proper way to access it\n  Object.defineProperty(singletonRouter, field, {\n    get() {\n      const router = getRouter();\n      return router[field];\n    }\n\n  });\n});\ncoreMethodFields.forEach(field => {\n  singletonRouter[field] = (...args) => {\n    const router = getRouter();\n    return router[field](...args);\n  };\n});\nrouterEvents.forEach(event => {\n  singletonRouter.ready(() => {\n    _router.default.events.on(event, (...args) => {\n      const eventField = `on${event.charAt(0).toUpperCase()}${event.substring(1)}`;\n      const _singletonRouter = singletonRouter;\n\n      if (_singletonRouter[eventField]) {\n        try {\n          _singletonRouter[eventField](...args);\n        } catch (err) {\n          console.error(`Error when running the Router event: ${eventField}`);\n          console.error((0, _isError).default(err) ? `${err.message}\\n${err.stack}` : err + '');\n        }\n      }\n    });\n  });\n});\n\nfunction getRouter() {\n  if (!singletonRouter.router) {\n    const message = 'No router instance found.\\n' + 'You should only use \"next/router\" on the client side of your app.\\n';\n    throw new Error(message);\n  }\n\n  return singletonRouter.router;\n}\n\nvar _default = singletonRouter;\nexports[\"default\"] = _default;\n\nfunction useRouter() {\n  return _react.default.useContext(_routerContext.RouterContext);\n}\n\nfunction createRouter(...args) {\n  singletonRouter.router = new _router.default(...args);\n  singletonRouter.readyCallbacks.forEach(cb => cb());\n  singletonRouter.readyCallbacks = [];\n  return singletonRouter.router;\n}\n\nfunction makePublicRouterInstance(router) {\n  const scopedRouter = router;\n  const instance = {};\n\n  for (const property of urlPropertyFields) {\n    if (typeof scopedRouter[property] === 'object') {\n      instance[property] = Object.assign(Array.isArray(scopedRouter[property]) ? [] : {}, scopedRouter[property]) // makes sure query is not stateful\n      ;\n      continue;\n    }\n\n    instance[property] = scopedRouter[property];\n  } // Events is a static property on the router, the router doesn't have to be initialized to use it\n\n\n  instance.events = _router.default.events;\n  coreMethodFields.forEach(field => {\n    instance[field] = (...args) => {\n      return scopedRouter[field](...args);\n    };\n  });\n  return instance;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/router.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/use-intersection.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/use-intersection.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.useIntersection = useIntersection;\n\nvar _react = __webpack_require__(/*! react */ \"react\");\n\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\");\n\nconst hasIntersectionObserver = typeof IntersectionObserver !== 'undefined';\n\nfunction useIntersection({\n  rootRef,\n  rootMargin,\n  disabled\n}) {\n  const isDisabled = disabled || !hasIntersectionObserver;\n  const unobserve = (0, _react).useRef();\n  const [visible, setVisible] = (0, _react).useState(false);\n  const [root, setRoot] = (0, _react).useState(rootRef ? rootRef.current : null);\n  const setRef = (0, _react).useCallback(el => {\n    if (unobserve.current) {\n      unobserve.current();\n      unobserve.current = undefined;\n    }\n\n    if (isDisabled || visible) return;\n\n    if (el && el.tagName) {\n      unobserve.current = observe(el, isVisible => isVisible && setVisible(isVisible), {\n        root,\n        rootMargin\n      });\n    }\n  }, [isDisabled, root, rootMargin, visible]);\n  (0, _react).useEffect(() => {\n    if (!hasIntersectionObserver) {\n      if (!visible) {\n        const idleCallback = (0, _requestIdleCallback).requestIdleCallback(() => setVisible(true));\n        return () => (0, _requestIdleCallback).cancelIdleCallback(idleCallback);\n      }\n    }\n  }, [visible]);\n  (0, _react).useEffect(() => {\n    if (rootRef) setRoot(rootRef.current);\n  }, [rootRef]);\n  return [setRef, visible];\n}\n\nfunction observe(element, callback, options) {\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options);\n  elements.set(element, callback);\n  observer.observe(element);\n  return function unobserve() {\n    elements.delete(element);\n    observer.unobserve(element); // Destroy observer when there's nothing left to watch:\n\n    if (elements.size === 0) {\n      observer.disconnect();\n      observers.delete(id);\n    }\n  };\n}\n\nconst observers = new Map();\n\nfunction createObserver(options) {\n  const id = options.rootMargin || '';\n  let instance = observers.get(id);\n\n  if (instance) {\n    return instance;\n  }\n\n  const elements = new Map();\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      const callback = elements.get(entry.target);\n      const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n\n      if (callback && isVisible) {\n        callback(isVisible);\n      }\n    });\n  }, options);\n  observers.set(id, instance = {\n    id,\n    observer,\n    elements\n  });\n  return instance;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/use-intersection.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = withRouter;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = __webpack_require__(/*! ./router */ \"./node_modules/next/dist/client/router.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction withRouter(ComposedComponent) {\n  function WithRouterWrapper(props) {\n    return /*#__PURE__*/_react.default.createElement(ComposedComponent, Object.assign({\n      router: (0, _router).useRouter()\n    }, props));\n  }\n\n  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps;\n  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;\n\n  if (true) {\n    const name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';\n    WithRouterWrapper.displayName = `withRouter(${name})`;\n  }\n\n  return WithRouterWrapper;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC93aXRoLXJvdXRlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0FBQ3pDRyxFQUFBQSxLQUFLLEVBQUU7QUFEa0MsQ0FBN0M7QUFHQUQsa0JBQUEsR0FBa0JHLFVBQWxCOztBQUNBLElBQUlDLE1BQU0sR0FBR0Msc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsb0JBQUQsQ0FBUixDQUFuQzs7QUFDQSxJQUFJQyxPQUFPLEdBQUdELG1CQUFPLENBQUMsMkRBQUQsQ0FBckI7O0FBQ0EsU0FBU0Qsc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDO0FBQ2pDLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUNqQ04sSUFBQUEsT0FBTyxFQUFFTTtBQUR3QixHQUFyQztBQUdIOztBQUNELFNBQVNMLFVBQVQsQ0FBb0JPLGlCQUFwQixFQUF1QztBQUNuQyxXQUFTQyxpQkFBVCxDQUEyQkMsS0FBM0IsRUFBa0M7QUFDOUIsV0FBTyxhQUFjUixNQUFNLENBQUNGLE9BQVAsQ0FBZVcsYUFBZixDQUE2QkgsaUJBQTdCLEVBQWdEWixNQUFNLENBQUNnQixNQUFQLENBQWM7QUFDL0VDLE1BQUFBLE1BQU0sRUFBRSxDQUFDLEdBQUdSLE9BQUosRUFBYVMsU0FBYjtBQUR1RSxLQUFkLEVBRWxFSixLQUZrRSxDQUFoRCxDQUFyQjtBQUdIOztBQUNERCxFQUFBQSxpQkFBaUIsQ0FBQ00sZUFBbEIsR0FBb0NQLGlCQUFpQixDQUFDTyxlQUF0RDtBQUNBTixFQUFBQSxpQkFBaUIsQ0FBQ08sbUJBQWxCLEdBQXdDUixpQkFBaUIsQ0FBQ1EsbUJBQTFEOztBQUNBLFlBQTJDO0FBQ3ZDLFVBQU1DLElBQUksR0FBR1QsaUJBQWlCLENBQUNVLFdBQWxCLElBQWlDVixpQkFBaUIsQ0FBQ1MsSUFBbkQsSUFBMkQsU0FBeEU7QUFDQVIsSUFBQUEsaUJBQWlCLENBQUNTLFdBQWxCLEdBQWlDLGNBQWFELElBQUssR0FBbkQ7QUFDSDs7QUFDRCxTQUFPUixpQkFBUDtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FsbG91dHNldm9sdmVkLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvd2l0aC1yb3V0ZXIuanM/YWM3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHdpdGhSb3V0ZXI7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9yb3V0ZXIgPSByZXF1aXJlKFwiLi9yb3V0ZXJcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvc2VkQ29tcG9uZW50KSB7XG4gICAgZnVuY3Rpb24gV2l0aFJvdXRlcldyYXBwZXIocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuKC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb3NlZENvbXBvbmVudCwgT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICByb3V0ZXI6ICgwLCBfcm91dGVyKS51c2VSb3V0ZXIoKVxuICAgICAgICB9LCBwcm9wcykpKTtcbiAgICB9XG4gICAgV2l0aFJvdXRlcldyYXBwZXIuZ2V0SW5pdGlhbFByb3BzID0gQ29tcG9zZWRDb21wb25lbnQuZ2V0SW5pdGlhbFByb3BzO1xuICAgIFdpdGhSb3V0ZXJXcmFwcGVyLm9yaWdHZXRJbml0aWFsUHJvcHMgPSBDb21wb3NlZENvbXBvbmVudC5vcmlnR2V0SW5pdGlhbFByb3BzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBDb21wb3NlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb3NlZENvbXBvbmVudC5uYW1lIHx8ICdVbmtub3duJztcbiAgICAgICAgV2l0aFJvdXRlcldyYXBwZXIuZGlzcGxheU5hbWUgPSBgd2l0aFJvdXRlcigke25hbWV9KWA7XG4gICAgfVxuICAgIHJldHVybiBXaXRoUm91dGVyV3JhcHBlcjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2l0aC1yb3V0ZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIndpdGhSb3V0ZXIiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yb3V0ZXIiLCJvYmoiLCJfX2VzTW9kdWxlIiwiQ29tcG9zZWRDb21wb25lbnQiLCJXaXRoUm91dGVyV3JhcHBlciIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsImFzc2lnbiIsInJvdXRlciIsInVzZVJvdXRlciIsImdldEluaXRpYWxQcm9wcyIsIm9yaWdHZXRJbml0aWFsUHJvcHMiLCJuYW1lIiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/with-router.js\n");

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/router.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/router.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getDomainLocale = getDomainLocale;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports[\"default\"] = void 0;\n\nvar _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ \"./node_modules/next/dist/client/normalize-trailing-slash.js\");\n\nvar _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ \"./node_modules/next/dist/client/route-loader.js\");\n\nvar _isError = _interopRequireWildcard(__webpack_require__(/*! ../../../lib/is-error */ \"./node_modules/next/dist/lib/is-error.js\"));\n\nvar _denormalizePagePath = __webpack_require__(/*! ../../../server/denormalize-page-path */ \"../../../server/denormalize-page-path\");\n\nvar _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"../i18n/normalize-locale-path\");\n\nvar _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ \"../mitt\"));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"../shared/lib/utils\");\n\nvar _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"./utils/is-dynamic\");\n\nvar _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ \"./utils/parse-relative-url\");\n\nvar _querystring = __webpack_require__(/*! ./utils/querystring */ \"./utils/querystring\");\n\nvar _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ \"./utils/resolve-rewrites\"));\n\nvar _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ \"./utils/route-matcher\");\n\nvar _routeRegex = __webpack_require__(/*! ./utils/route-regex */ \"./utils/route-regex\");\n\nvar _getMiddlewareRegex = __webpack_require__(/*! ./utils/get-middleware-regex */ \"./utils/get-middleware-regex\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nlet detectDomainLocale;\n\nif (false) {}\n\nconst basePath =  false || '';\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction addPathPrefix(path, prefix) {\n  if (!path.startsWith('/') || !prefix) {\n    return path;\n  }\n\n  const pathname = pathNoQueryHash(path);\n  return (0, _normalizeTrailingSlash).normalizePathTrailingSlash(`${prefix}${pathname}`) + path.substr(pathname.length);\n}\n\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n  if (false) {} else {\n    return false;\n  }\n}\n\nfunction addLocale(path, locale, defaultLocale) {\n  if (false) {}\n\n  return path;\n}\n\nfunction delLocale(path, locale) {\n  if (false) {}\n\n  return path;\n}\n\nfunction pathNoQueryHash(path) {\n  const queryIndex = path.indexOf('?');\n  const hashIndex = path.indexOf('#');\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);\n  }\n\n  return path;\n}\n\nfunction hasBasePath(path) {\n  path = pathNoQueryHash(path);\n  return path === basePath || path.startsWith(basePath + '/');\n}\n\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath);\n}\n\nfunction delBasePath(path) {\n  path = path.slice(basePath.length);\n  if (!path.startsWith('/')) path = `/${path}`;\n  return path;\n}\n\nfunction isLocalURL(url) {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#') || url.startsWith('?')) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = (0, _utils).getLocationOrigin();\n    const resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction interpolateAs(route, asPathname, query) {\n  let interpolatedRoute = '';\n  const dynamicRegex = (0, _routeRegex).getRouteRegex(route);\n  const dynamicGroups = dynamicRegex.groups;\n  const dynamicMatches = // Try to match the dynamic route against the asPath\n  (asPathname !== route ? (0, _routeMatcher).getRouteMatcher(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href\n  // TODO: should this take priority; also need to change in the router.\n  query;\n  interpolatedRoute = route;\n  const params = Object.keys(dynamicGroups);\n\n  if (!params.every(param => {\n    let value = dynamicMatches[param] || '';\n    const {\n      repeat,\n      optional\n    } = dynamicGroups[param]; // support single-level catch-all\n    // TODO: more robust handling for user-error (passing `/`)\n\n    let replaced = `[${repeat ? '...' : ''}${param}]`;\n\n    if (optional) {\n      replaced = `${!value ? '/' : ''}[${replaced}]`;\n    }\n\n    if (repeat && !Array.isArray(value)) value = [value];\n    return (optional || param in dynamicMatches) && (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just\n    // path delimiter escaped since they are being inserted\n    // into the URL and we expect URL encoded segments\n    // when parsing dynamic route params\n    segment => encodeURIComponent(segment)).join('/') : encodeURIComponent(value)) || '/');\n  })) {\n    interpolatedRoute = '' // did not satisfy all requirements\n    ; // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n\n  return {\n    params,\n    result: interpolatedRoute\n  };\n}\n\nfunction omitParmsFromQuery(query, params) {\n  const filteredQuery = {};\n  Object.keys(query).forEach(key => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key];\n    }\n  });\n  return filteredQuery;\n}\n\nfunction resolveHref(router, href, resolveAs) {\n  // we use a dummy base url for relative urls\n  let base;\n  let urlAsString = typeof href === 'string' ? href : (0, _utils).formatWithValidation(href); // repeated slashes and backslashes in the URL are considered\n  // invalid and will never match a Next.js page/file\n\n  const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//);\n  const urlAsStringNoProto = urlProtoMatch ? urlAsString.substr(urlProtoMatch[0].length) : urlAsString;\n  const urlParts = urlAsStringNoProto.split('?');\n\n  if ((urlParts[0] || '').match(/(\\/\\/|\\\\)/)) {\n    console.error(`Invalid href passed to next/router: ${urlAsString}, repeated forward-slashes (//) or backslashes \\\\ are not valid in the href`);\n    const normalizedUrl = (0, _utils).normalizeRepeatedSlashes(urlAsStringNoProto);\n    urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl;\n  } // Return because it cannot be routed by the Next.js router\n\n\n  if (!isLocalURL(urlAsString)) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n\n  try {\n    base = new URL(urlAsString.startsWith('#') ? router.asPath : router.pathname, 'http://n');\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n');\n  }\n\n  try {\n    const finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash).normalizePathTrailingSlash(finalUrl.pathname);\n    let interpolatedAs = '';\n\n    if ((0, _isDynamic).isDynamicRoute(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n      const query = (0, _querystring).searchParamsToUrlQuery(finalUrl.searchParams);\n      const {\n        result,\n        params\n      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);\n\n      if (result) {\n        interpolatedAs = (0, _utils).formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params)\n        });\n      }\n    } // if the origin didn't change, it means we received a relative href\n\n\n    const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;\n  } catch (_1) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n}\n\nfunction stripOrigin(url) {\n  const origin = (0, _utils).getLocationOrigin();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = resolveHref(router, url, true);\n  const origin = (0, _utils).getLocationOrigin();\n  const hrefHadOrigin = resolvedHref.startsWith(origin);\n  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);\n  const preparedAs = as ? stripOrigin(resolveHref(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  const cleanPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _denormalizePagePath).denormalizePagePath(pathname));\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(page => {\n      if ((0, _isDynamic).isDynamicRoute(page) && (0, _routeRegex).getRouteRegex(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n}\n\nconst manualScrollRestoration =  false && 0;\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\n\nfunction fetchRetry(url, attempts, opts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(res => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1, opts);\n      }\n\n      if (res.status === 404) {\n        return res.json().then(data => {\n          if (data.notFound) {\n            return {\n              notFound: SSG_DATA_NOT_FOUND\n            };\n          }\n\n          throw new Error(`Failed to load static props`);\n        });\n      }\n\n      throw new Error(`Failed to load static props`);\n    }\n\n    return opts.text ? res.text() : res.json();\n  });\n}\n\nfunction fetchNextData(dataHref, isServerRender, text, inflightCache, persistCache) {\n  const {\n    href: cacheKey\n  } = new URL(dataHref, window.location.href);\n\n  if (inflightCache[cacheKey] !== undefined) {\n    return inflightCache[cacheKey];\n  }\n\n  return inflightCache[cacheKey] = fetchRetry(dataHref, isServerRender ? 3 : 1, {\n    text\n  }).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      (0, _routeLoader).markAssetError(err);\n    }\n\n    throw err;\n  }).then(data => {\n    if (!persistCache || true) {\n      delete inflightCache[cacheKey];\n    }\n\n    return data;\n  }).catch(err => {\n    delete inflightCache[cacheKey];\n    throw err;\n  });\n}\n\nclass Router {\n  constructor(pathname, query, as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription,\n    isFallback,\n    locale,\n    locales,\n    defaultLocale,\n    domainLocales,\n    isPreview\n  }) {\n    // Static Data Cache\n    this.sdc = {}; // In-flight Server Data Requests, for deduping\n\n    this.sdr = {}; // In-flight middleware preflight requests\n\n    this.sde = {};\n    this._idx = 0;\n\n    this.onPopState = e => {\n      const state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', (0, _utils).formatWithValidation({\n          pathname: addBasePath(pathname),\n          query\n        }), (0, _utils).getURL());\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      }\n\n      let forcedScroll;\n      const {\n        url,\n        as,\n        options,\n        idx\n      } = state;\n\n      if (false) {}\n\n      this._idx = idx;\n      const {\n        pathname\n      } = (0, _parseRelativeUrl).parseRelativeUrl(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n      if (this.isSsr && as === addBasePath(this.asPath) && pathname === addBasePath(this.pathname)) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n\n      this.change('replaceState', url, as, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    this.route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== '/_error') {\n      var ref;\n      this.components[this.route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n        __N_RSC: !!((ref = Component) === null || ref === void 0 ? void 0 : ref.__next_rsc__)\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: []\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    const autoExportDynamic = (0, _isDynamic).isDynamicRoute(pathname) && self.__NEXT_DATA__.autoExport;\n\n    this.asPath = autoExportDynamic ? pathname : as;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);\n    this.isPreview = !!isPreview;\n    this.isLocaleDomain = false;\n\n    if (false) {}\n\n    if (false) {}\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\n  * Go back in history\n  */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n  * Performs a `pushState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  push(url, as, options = {}) {\n    if (false) {}\n\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  }\n  /**\n  * Performs a `replaceState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  replace(url, as, options = {}) {\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n\n  async change(method, url, as, options, forcedScroll) {\n    if (!isLocalURL(url)) {\n      window.location.href = url;\n      return false;\n    }\n\n    const shouldResolveHref = options._h || options._shouldResolveHref || pathNoQueryHash(url) === pathNoQueryHash(as); // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n\n    if (options._h) {\n      this.isReady = true;\n    }\n\n    const prevLocale = this.locale;\n\n    if (false) { var ref; }\n\n    if (!options._h) {\n      this.isSsr = false;\n    } // marking route changes as a navigation start entry\n\n\n    if (_utils.ST) {\n      performance.mark('routeChange');\n    }\n\n    const {\n      shallow = false\n    } = options;\n    const routeProps = {\n      shallow\n    };\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute, routeProps);\n    }\n\n    as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));\n    const cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);\n    this._inFlightRoute = as;\n    let localeChange = prevLocale !== this.locale; // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n\n    if (!options._h && this.onlyAHashChange(cleanedAs) && !localeChange) {\n      this.asPath = cleanedAs;\n      Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n      this.changeState(method, url, as, options);\n      this.scrollToHash(cleanedAs);\n      this.notify(this.components[this.route], null);\n      Router.events.emit('hashChangeComplete', as, routeProps);\n      return true;\n    }\n\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname,\n      query\n    } = parsed; // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n\n    let pages, rewrites;\n\n    try {\n      [pages, {\n        __rewrites: rewrites\n      }] = await Promise.all([this.pageLoader.getPageList(), (0, _routeLoader).getClientBuildManifest(), this.pageLoader.getMiddlewareList()]);\n    } catch (err) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      window.location.href = as;\n      return false;\n    } // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n\n\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = 'replaceState';\n    } // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n\n\n    let resolvedAs = as; // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n\n    pathname = pathname ? (0, _normalizeTrailingSlash).removePathTrailingSlash(delBasePath(pathname)) : pathname;\n\n    if (shouldResolveHref && pathname !== '/_error') {\n      options._shouldResolveHref = true;\n\n      if (false) {} else {\n        parsed.pathname = resolveDynamicRoute(pathname, pages);\n\n        if (parsed.pathname !== pathname) {\n          pathname = parsed.pathname;\n          parsed.pathname = addBasePath(pathname);\n          url = (0, _utils).formatWithValidation(parsed);\n        }\n      }\n    }\n\n    if (!isLocalURL(as)) {\n      if (true) {\n        throw new Error(`Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` + `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`);\n      }\n\n      window.location.href = as;\n      return false;\n    }\n\n    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);\n    /**\n    * If the route update was triggered for client-side hydration and\n    * the rendered route is not dynamic do not check the preflight\n    * request as it is not necessary.\n    */\n\n    if (options._h !== 1 || (0, _isDynamic).isDynamicRoute((0, _normalizeTrailingSlash).removePathTrailingSlash(pathname))) {\n      const effect = await this._preflightRequest({\n        as,\n        cache: false,\n        pages,\n        pathname,\n        query\n      });\n\n      if (effect.type === 'rewrite') {\n        query = _objectSpread(_objectSpread({}, query), effect.parsedAs.query);\n        resolvedAs = effect.asPath;\n        pathname = effect.resolvedHref;\n        parsed.pathname = effect.resolvedHref;\n        url = (0, _utils).formatWithValidation(parsed);\n      } else if (effect.type === 'redirect' && effect.newAs) {\n        return this.change(method, effect.newUrl, effect.newAs, options);\n      } else if (effect.type === 'redirect' && effect.destination) {\n        window.location.href = effect.destination;\n        return new Promise(() => {});\n      } else if (effect.type === 'refresh' && as !== window.location.pathname) {\n        window.location.href = as;\n        return new Promise(() => {});\n      }\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n\n    if ((0, _isDynamic).isDynamicRoute(route)) {\n      const parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs);\n      const asPathname = parsedAs.pathname;\n      const routeRegex = (0, _routeRegex).getRouteRegex(route);\n      const routeMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(asPathname);\n      const shouldInterpolate = route === asPathname;\n      const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};\n\n      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n\n        if (missingParams.length > 0) {\n          if (true) {\n            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \\`as\\` and \\`href\\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n          }\n\n          throw new Error((shouldInterpolate ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) + `Read more: https://nextjs.org/docs/messages/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);\n        }\n      } else if (shouldInterpolate) {\n        as = (0, _utils).formatWithValidation(Object.assign({}, parsedAs, {\n          pathname: interpolatedAs.result,\n          query: omitParmsFromQuery(query, interpolatedAs.params)\n        }));\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch);\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as, routeProps);\n\n    try {\n      var ref, ref1;\n      let routeInfo = await this.getRouteInfo(route, pathname, query, as, resolvedAs, routeProps);\n      let {\n        error,\n        props,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo; // handle redirect on client-transition\n\n      if ((__N_SSG || __N_SSP) && props) {\n        if (props.pageProps && props.pageProps.__N_REDIRECT) {\n          const destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n\n          if (destination.startsWith('/') && props.pageProps.__N_REDIRECT_BASE_PATH !== false) {\n            const parsedHref = (0, _parseRelativeUrl).parseRelativeUrl(destination);\n            parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n            const {\n              url: newUrl,\n              as: newAs\n            } = prepareUrlAs(this, destination, destination);\n            return this.change(method, newUrl, newAs, options);\n          }\n\n          window.location.href = destination;\n          return new Promise(() => {});\n        }\n\n        this.isPreview = !!props.__N_PREVIEW; // handle SSG data 404\n\n        if (props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute;\n\n          try {\n            await this.fetchComponent('/404');\n            notFoundRoute = '/404';\n          } catch (_) {\n            notFoundRoute = '/_error';\n          }\n\n          routeInfo = await this.getRouteInfo(notFoundRoute, notFoundRoute, query, as, resolvedAs, {\n            shallow: false\n          });\n        }\n      }\n\n      Router.events.emit('beforeHistoryChange', as, routeProps);\n      this.changeState(method, url, as, options);\n\n      if (options._h && pathname === '/_error' && ((ref = self.__NEXT_DATA__.props) === null || ref === void 0 ? void 0 : (ref1 = ref.pageProps) === null || ref1 === void 0 ? void 0 : ref1.statusCode) === 500 && (props === null || props === void 0 ? void 0 : props.pageProps)) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        props.pageProps.statusCode = 500;\n      } // shallow routing is only allowed for same page URL changes.\n\n\n      const isValidShallowRoute = options.shallow && this.route === route;\n\n      var _scroll;\n\n      const shouldScroll = (_scroll = options.scroll) !== null && _scroll !== void 0 ? _scroll : !isValidShallowRoute;\n      const resetScroll = shouldScroll ? {\n        x: 0,\n        y: 0\n      } : null;\n      await this.set(route, pathname, query, cleanedAs, routeInfo, forcedScroll !== null && forcedScroll !== void 0 ? forcedScroll : resetScroll).catch(e => {\n        if (e.cancelled) error = error || e;else throw e;\n      });\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs, routeProps);\n        throw error;\n      }\n\n      if (false) {}\n\n      Router.events.emit('routeChangeComplete', as, routeProps);\n      return true;\n    } catch (err1) {\n      if ((0, _isError).default(err1) && err1.cancelled) {\n        return false;\n      }\n\n      throw err1;\n    }\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || (0, _utils).getURL() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true,\n        idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1\n      }, // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n\n  async handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n\n    if ((0, _routeLoader).isAssetError(err) || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n\n      window.location.href = as; // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n\n      throw buildCancellationError();\n    }\n\n    try {\n      let Component;\n      let styleSheets;\n      let props;\n\n      if (typeof Component === 'undefined' || typeof styleSheets === 'undefined') {\n        ({\n          page: Component,\n          styleSheets\n        } = await this.fetchComponent('/_error'));\n      }\n\n      const routeInfo = {\n        props,\n        Component,\n        styleSheets,\n        err,\n        error: err\n      };\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query\n          });\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr);\n          routeInfo.props = {};\n        }\n      }\n\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError((0, _isError).default(routeInfoErr) ? routeInfoErr : new Error(routeInfoErr + ''), pathname, query, as, routeProps, true);\n    }\n  }\n\n  async getRouteInfo(route, pathname, query, as, resolvedAs, routeProps) {\n    try {\n      const existingRouteInfo = this.components[route];\n\n      if (routeProps.shallow && existingRouteInfo && this.route === route) {\n        return existingRouteInfo;\n      }\n\n      let cachedRouteInfo = undefined; // can only use non-initial route info\n      // cannot reuse route info in development since it can change after HMR\n\n      if (false) {}\n\n      const routeInfo = cachedRouteInfo || (await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        styleSheets: res.styleSheets,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP,\n        __N_RSC: !!res.page.__next_rsc__\n      })));\n      const {\n        Component,\n        __N_SSG,\n        __N_SSP,\n        __N_RSC\n      } = routeInfo;\n\n      if (true) {\n        const {\n          isValidElementType\n        } = __webpack_require__(/*! next/dist/compiled/react-is */ \"next/dist/compiled/react-is\");\n\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n\n      let dataHref;\n\n      if (__N_SSG || __N_SSP || __N_RSC) {\n        dataHref = this.pageLoader.getDataHref({\n          href: (0, _utils).formatWithValidation({\n            pathname,\n            query\n          }),\n          asPath: resolvedAs,\n          ssg: __N_SSG,\n          rsc: __N_RSC,\n          locale: this.locale\n        });\n      }\n\n      const props = await this._getData(() => __N_SSG || __N_SSP ? fetchNextData(dataHref, this.isSsr, false, __N_SSG ? this.sdc : this.sdr, !!__N_SSG && !this.isPreview) : this.getInitialProps(Component, // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as,\n        locale: this.locale,\n        locales: this.locales,\n        defaultLocale: this.defaultLocale\n      }));\n\n      if (__N_RSC) {\n        const {\n          fresh,\n          data\n        } = await this._getData(() => this._getFlightData(dataHref));\n        props.pageProps = Object.assign(props.pageProps, {\n          __flight_serialized__: data,\n          __flight_fresh__: fresh\n        });\n      }\n\n      routeInfo.props = props;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err) {\n      return this.handleRouteInfoError((0, _isError).getProperError(err), pathname, query, as, routeProps);\n    }\n  }\n\n  set(route, pathname, query, as, data, resetScroll) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    return this.notify(data, resetScroll);\n  }\n  /**\n  * Callback to execute before replacing router state\n  * @param cb callback to be executed\n  */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash = ''] = as.split('#'); // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n\n    if (hash === '' || hash === 'top') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n  * Prefetch page code, you may wait for the data during page rendering.\n  * This feature only works in production!\n  * @param url the href of prefetched page\n  * @param asPath the as path of the prefetched page\n  */\n\n\n  async prefetch(url, asPath = url, options = {}) {\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname,\n      query\n    } = parsed;\n\n    if (false) {}\n\n    const pages = await this.pageLoader.getPageList();\n    let resolvedAs = asPath;\n\n    if (false) {} else {\n      parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n      if (parsed.pathname !== pathname) {\n        pathname = parsed.pathname;\n        parsed.pathname = pathname;\n        url = (0, _utils).formatWithValidation(parsed);\n      }\n    } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n\n    if (true) {\n      return;\n    }\n\n    const effects = await this._preflightRequest({\n      as: addBasePath(asPath),\n      cache: true,\n      pages,\n      pathname,\n      query\n    });\n\n    if (effects.type === 'rewrite') {\n      parsed.pathname = effects.resolvedHref;\n      pathname = effects.resolvedHref;\n      query = _objectSpread(_objectSpread({}, query), effects.parsedAs.query);\n      resolvedAs = effects.asPath;\n      url = (0, _utils).formatWithValidation(parsed);\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n    await Promise.all([this.pageLoader._isSsg(route).then(isSsg => {\n      return isSsg ? fetchNextData(this.pageLoader.getDataHref({\n        href: url,\n        asPath: resolvedAs,\n        ssg: true,\n        locale: typeof options.locale !== 'undefined' ? options.locale : this.locale\n      }), false, false, this.sdc, true) : false;\n    }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n  }\n\n  async fetchComponent(route) {\n    let cancelled = false;\n\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n\n    const handleCancelled = () => {\n      if (cancelled) {\n        const error = new Error(`Abort fetching component for route: \"${route}\"`);\n        error.cancelled = true;\n        throw error;\n      }\n\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n    };\n\n    try {\n      const componentResult = await this.pageLoader.loadPage(route);\n      handleCancelled();\n      return componentResult;\n    } catch (err) {\n      handleCancelled();\n      throw err;\n    }\n  }\n\n  _getData(fn) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n\n      return data;\n    });\n  }\n\n  _getFlightData(dataHref) {\n    // Do not cache RSC flight response since it's not a static resource\n    return fetchNextData(dataHref, true, true, this.sdc, false).then(serialized => {\n      return {\n        fresh: true,\n        data: serialized\n      };\n    });\n  }\n\n  async _preflightRequest(options) {\n    var ref;\n    const cleanedAs = delLocale(hasBasePath(options.as) ? delBasePath(options.as) : options.as, this.locale);\n    const fns = await this.pageLoader.getMiddlewareList();\n    const requiresPreflight = fns.some(([middleware, isSSR]) => {\n      return (0, _routeMatcher).getRouteMatcher((0, _getMiddlewareRegex).getMiddlewareRegex(middleware, !isSSR))(cleanedAs);\n    });\n\n    if (!requiresPreflight) {\n      return {\n        type: 'next'\n      };\n    }\n\n    const preflight = await this._getPreflightData({\n      preflightHref: options.as,\n      shouldCache: options.cache\n    });\n\n    if ((ref = preflight.rewrite) === null || ref === void 0 ? void 0 : ref.startsWith('/')) {\n      const parsed = (0, _parseRelativeUrl).parseRelativeUrl((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(preflight.rewrite) ? delBasePath(preflight.rewrite) : preflight.rewrite, this.locales).pathname);\n      const fsPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash(parsed.pathname);\n      let matchedPage;\n      let resolvedHref;\n\n      if (options.pages.includes(fsPathname)) {\n        matchedPage = true;\n        resolvedHref = fsPathname;\n      } else {\n        resolvedHref = resolveDynamicRoute(fsPathname, options.pages);\n\n        if (resolvedHref !== parsed.pathname && options.pages.includes(resolvedHref)) {\n          matchedPage = true;\n        }\n      }\n\n      return {\n        type: 'rewrite',\n        asPath: parsed.pathname,\n        parsedAs: parsed,\n        matchedPage,\n        resolvedHref\n      };\n    }\n\n    if (preflight.redirect) {\n      if (preflight.redirect.startsWith('/')) {\n        const cleanRedirect = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(preflight.redirect) ? delBasePath(preflight.redirect) : preflight.redirect, this.locales).pathname);\n        const {\n          url: newUrl,\n          as: newAs\n        } = prepareUrlAs(this, cleanRedirect, cleanRedirect);\n        return {\n          type: 'redirect',\n          newUrl,\n          newAs\n        };\n      }\n\n      return {\n        type: 'redirect',\n        destination: preflight.redirect\n      };\n    } // For SSR requests, they will be handled like normal pages.\n\n\n    if (preflight.refresh && !preflight.ssr) {\n      return {\n        type: 'refresh'\n      };\n    }\n\n    return {\n      type: 'next'\n    };\n  }\n\n  _getPreflightData(params) {\n    const {\n      preflightHref,\n      shouldCache = false\n    } = params;\n    const {\n      href: cacheKey\n    } = new URL(preflightHref, window.location.href);\n\n    if (false) {}\n\n    return fetch(preflightHref, {\n      method: 'HEAD',\n      credentials: 'same-origin',\n      headers: {\n        'x-middleware-preflight': '1'\n      }\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to preflight request`);\n      }\n\n      return {\n        cache: res.headers.get('x-middleware-cache'),\n        redirect: res.headers.get('Location'),\n        refresh: res.headers.has('x-middleware-refresh'),\n        rewrite: res.headers.get('x-middleware-rewrite'),\n        ssr: !!res.headers.get('x-middleware-ssr')\n      };\n    }).then(data => {\n      if (shouldCache && data.cache !== 'no-cache') {\n        this.sde[cacheKey] = data;\n      }\n\n      return data;\n    }).catch(err => {\n      delete this.sde[cacheKey];\n      throw err;\n    });\n  }\n\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n\n    const AppTree = this._wrapApp(App);\n\n    ctx.AppTree = AppTree;\n    return (0, _utils).loadGetInitialProps(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n\n  abortComponentLoad(as, routeProps) {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  notify(data, resetScroll) {\n    return this.sub(data, this.components['/_app'].Component, resetScroll);\n  }\n\n}\n\nRouter.events = (0, _mitt).default();\nexports[\"default\"] = Router;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3JvdXRlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7Ozs7Ozs7QUFDYkEsOENBQTZDO0FBQ3pDRyxFQUFBQSxLQUFLLEVBQUU7QUFEa0MsQ0FBN0M7QUFHQUQsdUJBQUEsR0FBMEJFLGVBQTFCO0FBQ0FGLGlCQUFBLEdBQW9CRyxTQUFwQjtBQUNBSCxpQkFBQSxHQUFvQkksU0FBcEI7QUFDQUosbUJBQUEsR0FBc0JLLFdBQXRCO0FBQ0FMLG1CQUFBLEdBQXNCTSxXQUF0QjtBQUNBTixtQkFBQSxHQUFzQk8sV0FBdEI7QUFDQVAsa0JBQUEsR0FBcUJRLFVBQXJCO0FBQ0FSLHFCQUFBLEdBQXdCUyxhQUF4QjtBQUNBVCxtQkFBQSxHQUFzQlUsV0FBdEI7QUFDQVYsa0JBQUEsR0FBa0IsS0FBSyxDQUF2Qjs7QUFDQSxJQUFJWSx1QkFBdUIsR0FBR0MsbUJBQU8sQ0FBQyw2R0FBRCxDQUFyQzs7QUFDQSxJQUFJQyxZQUFZLEdBQUdELG1CQUFPLENBQUMscUZBQUQsQ0FBMUI7O0FBQ0EsSUFBSUUsUUFBUSxHQUFHQyx1QkFBdUIsQ0FBQ0gsbUJBQU8sQ0FBQyx1RUFBRCxDQUFSLENBQXRDOztBQUNBLElBQUlJLG9CQUFvQixHQUFHSixtQkFBTyxDQUFDLG9GQUFELENBQWxDOztBQUNBLElBQUlLLG9CQUFvQixHQUFHTCxtQkFBTyxDQUFDLG9FQUFELENBQWxDOztBQUNBLElBQUlNLEtBQUssR0FBR0Msc0JBQXNCLENBQUNQLG1CQUFPLENBQUMsd0JBQUQsQ0FBUixDQUFsQzs7QUFDQSxJQUFJUSxNQUFNLEdBQUdSLG1CQUFPLENBQUMscUNBQUQsQ0FBcEI7O0FBQ0EsSUFBSVMsVUFBVSxHQUFHVCxtQkFBTyxDQUFDLDhDQUFELENBQXhCOztBQUNBLElBQUlVLGlCQUFpQixHQUFHVixtQkFBTyxDQUFDLDhEQUFELENBQS9COztBQUNBLElBQUlXLFlBQVksR0FBR1gsbUJBQU8sQ0FBQyxnREFB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cUMsRUFBQUEsTUFBTSxDQUFDdEcsSUFBRCxFQUFPOEksV0FBUCxFQUFvQjtBQUN0QixXQUFPLEtBQUs5RSxHQUFMLENBQVNoRSxJQUFULEVBQWUsS0FBS21ELFVBQUwsQ0FBZ0IsT0FBaEIsRUFBeUJoQyxTQUF4QyxFQUFtRDJILFdBQW5ELENBQVA7QUFDSDs7QUFoNkJROztBQWs2QmJqSSxNQUFNLENBQUMrQyxNQUFQLEdBQWdCLENBQUMsR0FBR3hOLEtBQUosRUFBV1IsT0FBWCxFQUFoQjtBQUNBWCxrQkFBQSxHQUFrQjRMLE1BQWxCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FsbG91dHNldm9sdmVkLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci9yb3V0ZXIuanM/ODY4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0RG9tYWluTG9jYWxlID0gZ2V0RG9tYWluTG9jYWxlO1xuZXhwb3J0cy5hZGRMb2NhbGUgPSBhZGRMb2NhbGU7XG5leHBvcnRzLmRlbExvY2FsZSA9IGRlbExvY2FsZTtcbmV4cG9ydHMuaGFzQmFzZVBhdGggPSBoYXNCYXNlUGF0aDtcbmV4cG9ydHMuYWRkQmFzZVBhdGggPSBhZGRCYXNlUGF0aDtcbmV4cG9ydHMuZGVsQmFzZVBhdGggPSBkZWxCYXNlUGF0aDtcbmV4cG9ydHMuaXNMb2NhbFVSTCA9IGlzTG9jYWxVUkw7XG5leHBvcnRzLmludGVycG9sYXRlQXMgPSBpbnRlcnBvbGF0ZUFzO1xuZXhwb3J0cy5yZXNvbHZlSHJlZiA9IHJlc29sdmVIcmVmO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9ub3JtYWxpemVUcmFpbGluZ1NsYXNoID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2hcIik7XG52YXIgX3JvdXRlTG9hZGVyID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9yb3V0ZS1sb2FkZXJcIik7XG52YXIgX2lzRXJyb3IgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi4vLi4vLi4vbGliL2lzLWVycm9yXCIpKTtcbnZhciBfZGVub3JtYWxpemVQYWdlUGF0aCA9IHJlcXVpcmUoXCIuLi8uLi8uLi9zZXJ2ZXIvZGVub3JtYWxpemUtcGFnZS1wYXRoXCIpO1xudmFyIF9ub3JtYWxpemVMb2NhbGVQYXRoID0gcmVxdWlyZShcIi4uL2kxOG4vbm9ybWFsaXplLWxvY2FsZS1wYXRoXCIpO1xudmFyIF9taXR0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbWl0dFwiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xudmFyIF9pc0R5bmFtaWMgPSByZXF1aXJlKFwiLi91dGlscy9pcy1keW5hbWljXCIpO1xudmFyIF9wYXJzZVJlbGF0aXZlVXJsID0gcmVxdWlyZShcIi4vdXRpbHMvcGFyc2UtcmVsYXRpdmUtdXJsXCIpO1xudmFyIF9xdWVyeXN0cmluZyA9IHJlcXVpcmUoXCIuL3V0aWxzL3F1ZXJ5c3RyaW5nXCIpO1xudmFyIF9yZXNvbHZlUmV3cml0ZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL3Jlc29sdmUtcmV3cml0ZXNcIikpO1xudmFyIF9yb3V0ZU1hdGNoZXIgPSByZXF1aXJlKFwiLi91dGlscy9yb3V0ZS1tYXRjaGVyXCIpO1xudmFyIF9yb3V0ZVJlZ2V4ID0gcmVxdWlyZShcIi4vdXRpbHMvcm91dGUtcmVnZXhcIik7XG52YXIgX2dldE1pZGRsZXdhcmVSZWdleCA9IHJlcXVpcmUoXCIuL3V0aWxzL2dldC1taWRkbGV3YXJlLXJlZ2V4XCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gICAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBuZXdPYmogPSB7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChvYmogIT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gb2JqKXtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7XG4gICAgICAgIHJldHVybiBuZXdPYmo7XG4gICAgfVxufVxubGV0IGRldGVjdERvbWFpbkxvY2FsZTtcbmlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgZGV0ZWN0RG9tYWluTG9jYWxlID0gcmVxdWlyZSgnLi4vaTE4bi9kZXRlY3QtZG9tYWluLWxvY2FsZScpLmRldGVjdERvbWFpbkxvY2FsZTtcbn1cbmNvbnN0IGJhc2VQYXRoID0gcHJvY2Vzcy5lbnYuX19ORVhUX1JPVVRFUl9CQVNFUEFUSCB8fCAnJztcbmZ1bmN0aW9uIGJ1aWxkQ2FuY2VsbGF0aW9uRXJyb3IoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IEVycm9yKCdSb3V0ZSBDYW5jZWxsZWQnKSwge1xuICAgICAgICBjYW5jZWxsZWQ6IHRydWVcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGFkZFBhdGhQcmVmaXgocGF0aCwgcHJlZml4KSB7XG4gICAgaWYgKCFwYXRoLnN0YXJ0c1dpdGgoJy8nKSB8fCAhcHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBjb25zdCBwYXRobmFtZSA9IHBhdGhOb1F1ZXJ5SGFzaChwYXRoKTtcbiAgICByZXR1cm4gKDAsIF9ub3JtYWxpemVUcmFpbGluZ1NsYXNoKS5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaChgJHtwcmVmaXh9JHtwYXRobmFtZX1gKSArIHBhdGguc3Vic3RyKHBhdGhuYW1lLmxlbmd0aCk7XG59XG5mdW5jdGlvbiBnZXREb21haW5Mb2NhbGUocGF0aCwgbG9jYWxlLCBsb2NhbGVzLCBkb21haW5Mb2NhbGVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgbG9jYWxlID0gbG9jYWxlIHx8ICgwLCBfbm9ybWFsaXplTG9jYWxlUGF0aCkubm9ybWFsaXplTG9jYWxlUGF0aChwYXRoLCBsb2NhbGVzKS5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgY29uc3QgZGV0ZWN0ZWREb21haW4gPSBkZXRlY3REb21haW5Mb2NhbGUoZG9tYWluTG9jYWxlcywgdW5kZWZpbmVkLCBsb2NhbGUpO1xuICAgICAgICBpZiAoZGV0ZWN0ZWREb21haW4pIHtcbiAgICAgICAgICAgIHJldHVybiBgaHR0cCR7ZGV0ZWN0ZWREb21haW4uaHR0cCA/ICcnIDogJ3MnfTovLyR7ZGV0ZWN0ZWREb21haW4uZG9tYWlufSR7YmFzZVBhdGggfHwgJyd9JHtsb2NhbGUgPT09IGRldGVjdGVkRG9tYWluLmRlZmF1bHRMb2NhbGUgPyAnJyA6IGAvJHtsb2NhbGV9YH0ke3BhdGh9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZExvY2FsZShwYXRoLCBsb2NhbGUsIGRlZmF1bHRMb2NhbGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICBjb25zdCBwYXRobmFtZSA9IHBhdGhOb1F1ZXJ5SGFzaChwYXRoKTtcbiAgICAgICAgY29uc3QgcGF0aExvd2VyID0gcGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgbG9jYWxlTG93ZXIgPSBsb2NhbGUgJiYgbG9jYWxlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiBsb2NhbGUgJiYgbG9jYWxlICE9PSBkZWZhdWx0TG9jYWxlICYmICFwYXRoTG93ZXIuc3RhcnRzV2l0aCgnLycgKyBsb2NhbGVMb3dlciArICcvJykgJiYgcGF0aExvd2VyICE9PSAnLycgKyBsb2NhbGVMb3dlciA/IGFkZFBhdGhQcmVmaXgocGF0aCwgJy8nICsgbG9jYWxlKSA6IHBhdGg7XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xufVxuZnVuY3Rpb24gZGVsTG9jYWxlKHBhdGgsIGxvY2FsZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgIGNvbnN0IHBhdGhuYW1lID0gcGF0aE5vUXVlcnlIYXNoKHBhdGgpO1xuICAgICAgICBjb25zdCBwYXRoTG93ZXIgPSBwYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCBsb2NhbGVMb3dlciA9IGxvY2FsZSAmJiBsb2NhbGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZSAmJiAocGF0aExvd2VyLnN0YXJ0c1dpdGgoJy8nICsgbG9jYWxlTG93ZXIgKyAnLycpIHx8IHBhdGhMb3dlciA9PT0gJy8nICsgbG9jYWxlTG93ZXIpID8gKHBhdGhuYW1lLmxlbmd0aCA9PT0gbG9jYWxlLmxlbmd0aCArIDEgPyAnLycgOiAnJykgKyBwYXRoLnN1YnN0cihsb2NhbGUubGVuZ3RoICsgMSkgOiBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbn1cbmZ1bmN0aW9uIHBhdGhOb1F1ZXJ5SGFzaChwYXRoKSB7XG4gICAgY29uc3QgcXVlcnlJbmRleCA9IHBhdGguaW5kZXhPZignPycpO1xuICAgIGNvbnN0IGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZignIycpO1xuICAgIGlmIChxdWVyeUluZGV4ID4gLTEgfHwgaGFzaEluZGV4ID4gLTEpIHtcbiAgICAgICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKDAsIHF1ZXJ5SW5kZXggPiAtMSA/IHF1ZXJ5SW5kZXggOiBoYXNoSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VQYXRoKHBhdGgpIHtcbiAgICBwYXRoID0gcGF0aE5vUXVlcnlIYXNoKHBhdGgpO1xuICAgIHJldHVybiBwYXRoID09PSBiYXNlUGF0aCB8fCBwYXRoLnN0YXJ0c1dpdGgoYmFzZVBhdGggKyAnLycpO1xufVxuZnVuY3Rpb24gYWRkQmFzZVBhdGgocGF0aCkge1xuICAgIC8vIHdlIG9ubHkgYWRkIHRoZSBiYXNlcGF0aCBvbiByZWxhdGl2ZSB1cmxzXG4gICAgcmV0dXJuIGFkZFBhdGhQcmVmaXgocGF0aCwgYmFzZVBhdGgpO1xufVxuZnVuY3Rpb24gZGVsQmFzZVBhdGgocGF0aCkge1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKGJhc2VQYXRoLmxlbmd0aCk7XG4gICAgaWYgKCFwYXRoLnN0YXJ0c1dpdGgoJy8nKSkgcGF0aCA9IGAvJHtwYXRofWA7XG4gICAgcmV0dXJuIHBhdGg7XG59XG5mdW5jdGlvbiBpc0xvY2FsVVJMKHVybCkge1xuICAgIC8vIHByZXZlbnQgYSBoeWRyYXRpb24gbWlzbWF0Y2ggb24gaHJlZiBmb3IgdXJsIHdpdGggYW5jaG9yIHJlZnNcbiAgICBpZiAodXJsLnN0YXJ0c1dpdGgoJy8nKSB8fCB1cmwuc3RhcnRzV2l0aCgnIycpIHx8IHVybC5zdGFydHNXaXRoKCc/JykpIHJldHVybiB0cnVlO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGFic29sdXRlIHVybHMgY2FuIGJlIGxvY2FsIGlmIHRoZXkgYXJlIG9uIHRoZSBzYW1lIG9yaWdpblxuICAgICAgICBjb25zdCBsb2NhdGlvbk9yaWdpbiA9ICgwLCBfdXRpbHMpLmdldExvY2F0aW9uT3JpZ2luKCk7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkID0gbmV3IFVSTCh1cmwsIGxvY2F0aW9uT3JpZ2luKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkLm9yaWdpbiA9PT0gbG9jYXRpb25PcmlnaW4gJiYgaGFzQmFzZVBhdGgocmVzb2x2ZWQucGF0aG5hbWUpO1xuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGludGVycG9sYXRlQXMocm91dGUsIGFzUGF0aG5hbWUsIHF1ZXJ5KSB7XG4gICAgbGV0IGludGVycG9sYXRlZFJvdXRlID0gJyc7XG4gICAgY29uc3QgZHluYW1pY1JlZ2V4ID0gKDAsIF9yb3V0ZVJlZ2V4KS5nZXRSb3V0ZVJlZ2V4KHJvdXRlKTtcbiAgICBjb25zdCBkeW5hbWljR3JvdXBzID0gZHluYW1pY1JlZ2V4Lmdyb3VwcztcbiAgICBjb25zdCBkeW5hbWljTWF0Y2hlcyA9IC8vIFRyeSB0byBtYXRjaCB0aGUgZHluYW1pYyByb3V0ZSBhZ2FpbnN0IHRoZSBhc1BhdGhcbiAgICAoYXNQYXRobmFtZSAhPT0gcm91dGUgPyAoMCwgX3JvdXRlTWF0Y2hlcikuZ2V0Um91dGVNYXRjaGVyKGR5bmFtaWNSZWdleCkoYXNQYXRobmFtZSkgOiAnJykgfHwgLy8gRmFsbCBiYWNrIHRvIHJlYWRpbmcgdGhlIHZhbHVlcyBmcm9tIHRoZSBocmVmXG4gICAgLy8gVE9ETzogc2hvdWxkIHRoaXMgdGFrZSBwcmlvcml0eTsgYWxzbyBuZWVkIHRvIGNoYW5nZSBpbiB0aGUgcm91dGVyLlxuICAgIHF1ZXJ5O1xuICAgIGludGVycG9sYXRlZFJvdXRlID0gcm91dGU7XG4gICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmtleXMoZHluYW1pY0dyb3Vwcyk7XG4gICAgaWYgKCFwYXJhbXMuZXZlcnkoKHBhcmFtKT0+e1xuICAgICAgICBsZXQgdmFsdWUgPSBkeW5hbWljTWF0Y2hlc1twYXJhbV0gfHwgJyc7XG4gICAgICAgIGNvbnN0IHsgcmVwZWF0ICwgb3B0aW9uYWwgIH0gPSBkeW5hbWljR3JvdXBzW3BhcmFtXTtcbiAgICAgICAgLy8gc3VwcG9ydCBzaW5nbGUtbGV2ZWwgY2F0Y2gtYWxsXG4gICAgICAgIC8vIFRPRE86IG1vcmUgcm9idXN0IGhhbmRsaW5nIGZvciB1c2VyLWVycm9yIChwYXNzaW5nIGAvYClcbiAgICAgICAgbGV0IHJlcGxhY2VkID0gYFske3JlcGVhdCA/ICcuLi4nIDogJyd9JHtwYXJhbX1dYDtcbiAgICAgICAgaWYgKG9wdGlvbmFsKSB7XG4gICAgICAgICAgICByZXBsYWNlZCA9IGAkeyF2YWx1ZSA/ICcvJyA6ICcnfVske3JlcGxhY2VkfV1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBlYXQgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB2YWx1ZSA9IFtcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiAob3B0aW9uYWwgfHwgcGFyYW0gaW4gZHluYW1pY01hdGNoZXMpICYmIC8vIEludGVycG9sYXRlIGdyb3VwIGludG8gZGF0YSBVUkwgaWYgcHJlc2VudFxuICAgICAgICAoaW50ZXJwb2xhdGVkUm91dGUgPSBpbnRlcnBvbGF0ZWRSb3V0ZS5yZXBsYWNlKHJlcGxhY2VkLCByZXBlYXQgPyB2YWx1ZS5tYXAoLy8gdGhlc2UgdmFsdWVzIHNob3VsZCBiZSBmdWxseSBlbmNvZGVkIGluc3RlYWQgb2YganVzdFxuICAgICAgICAvLyBwYXRoIGRlbGltaXRlciBlc2NhcGVkIHNpbmNlIHRoZXkgYXJlIGJlaW5nIGluc2VydGVkXG4gICAgICAgIC8vIGludG8gdGhlIFVSTCBhbmQgd2UgZXhwZWN0IFVSTCBlbmNvZGVkIHNlZ21lbnRzXG4gICAgICAgIC8vIHdoZW4gcGFyc2luZyBkeW5hbWljIHJvdXRlIHBhcmFtc1xuICAgICAgICAoc2VnbWVudCk9PmVuY29kZVVSSUNvbXBvbmVudChzZWdtZW50KVxuICAgICAgICApLmpvaW4oJy8nKSA6IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpIHx8ICcvJyk7XG4gICAgfSkpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVkUm91dGUgPSAnJyAvLyBkaWQgbm90IHNhdGlzZnkgYWxsIHJlcXVpcmVtZW50c1xuICAgICAgICA7XG4gICAgLy8gbi5iLiBXZSBpZ25vcmUgdGhpcyBlcnJvciBiZWNhdXNlIHdlIGhhbmRsZSB3YXJuaW5nIGZvciB0aGlzIGNhc2UgaW5cbiAgICAvLyBkZXZlbG9wbWVudCBpbiB0aGUgYDxMaW5rPmAgY29tcG9uZW50IGRpcmVjdGx5LlxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHJlc3VsdDogaW50ZXJwb2xhdGVkUm91dGVcbiAgICB9O1xufVxuZnVuY3Rpb24gb21pdFBhcm1zRnJvbVF1ZXJ5KHF1ZXJ5LCBwYXJhbXMpIHtcbiAgICBjb25zdCBmaWx0ZXJlZFF1ZXJ5ID0ge1xuICAgIH07XG4gICAgT2JqZWN0LmtleXMocXVlcnkpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgaWYgKCFwYXJhbXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgZmlsdGVyZWRRdWVyeVtrZXldID0gcXVlcnlba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmaWx0ZXJlZFF1ZXJ5O1xufVxuZnVuY3Rpb24gcmVzb2x2ZUhyZWYocm91dGVyLCBocmVmLCByZXNvbHZlQXMpIHtcbiAgICAvLyB3ZSB1c2UgYSBkdW1teSBiYXNlIHVybCBmb3IgcmVsYXRpdmUgdXJsc1xuICAgIGxldCBiYXNlO1xuICAgIGxldCB1cmxBc1N0cmluZyA9IHR5cGVvZiBocmVmID09PSAnc3RyaW5nJyA/IGhyZWYgOiAoMCwgX3V0aWxzKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihocmVmKTtcbiAgICAvLyByZXBlYXRlZCBzbGFzaGVzIGFuZCBiYWNrc2xhc2hlcyBpbiB0aGUgVVJMIGFyZSBjb25zaWRlcmVkXG4gICAgLy8gaW52YWxpZCBhbmQgd2lsbCBuZXZlciBtYXRjaCBhIE5leHQuanMgcGFnZS9maWxlXG4gICAgY29uc3QgdXJsUHJvdG9NYXRjaCA9IHVybEFzU3RyaW5nLm1hdGNoKC9eW2EtekEtWl17MSx9OlxcL1xcLy8pO1xuICAgIGNvbnN0IHVybEFzU3RyaW5nTm9Qcm90byA9IHVybFByb3RvTWF0Y2ggPyB1cmxBc1N0cmluZy5zdWJzdHIodXJsUHJvdG9NYXRjaFswXS5sZW5ndGgpIDogdXJsQXNTdHJpbmc7XG4gICAgY29uc3QgdXJsUGFydHMgPSB1cmxBc1N0cmluZ05vUHJvdG8uc3BsaXQoJz8nKTtcbiAgICBpZiAoKHVybFBhcnRzWzBdIHx8ICcnKS5tYXRjaCgvKFxcL1xcL3xcXFxcKS8pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEludmFsaWQgaHJlZiBwYXNzZWQgdG8gbmV4dC9yb3V0ZXI6ICR7dXJsQXNTdHJpbmd9LCByZXBlYXRlZCBmb3J3YXJkLXNsYXNoZXMgKC8vKSBvciBiYWNrc2xhc2hlcyBcXFxcIGFyZSBub3QgdmFsaWQgaW4gdGhlIGhyZWZgKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFVybCA9ICgwLCBfdXRpbHMpLm5vcm1hbGl6ZVJlcGVhdGVkU2xhc2hlcyh1cmxBc1N0cmluZ05vUHJvdG8pO1xuICAgICAgICB1cmxBc1N0cmluZyA9ICh1cmxQcm90b01hdGNoID8gdXJsUHJvdG9NYXRjaFswXSA6ICcnKSArIG5vcm1hbGl6ZWRVcmw7XG4gICAgfVxuICAgIC8vIFJldHVybiBiZWNhdXNlIGl0IGNhbm5vdCBiZSByb3V0ZWQgYnkgdGhlIE5leHQuanMgcm91dGVyXG4gICAgaWYgKCFpc0xvY2FsVVJMKHVybEFzU3RyaW5nKSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZUFzID8gW1xuICAgICAgICAgICAgdXJsQXNTdHJpbmdcbiAgICAgICAgXSA6IHVybEFzU3RyaW5nO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBiYXNlID0gbmV3IFVSTCh1cmxBc1N0cmluZy5zdGFydHNXaXRoKCcjJykgPyByb3V0ZXIuYXNQYXRoIDogcm91dGVyLnBhdGhuYW1lLCAnaHR0cDovL24nKTtcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIC8gZm9yIGludmFsaWQgYXNQYXRoIHZhbHVlcyBlLmcuIC8vXG4gICAgICAgIGJhc2UgPSBuZXcgVVJMKCcvJywgJ2h0dHA6Ly9uJyk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGZpbmFsVXJsID0gbmV3IFVSTCh1cmxBc1N0cmluZywgYmFzZSk7XG4gICAgICAgIGZpbmFsVXJsLnBhdGhuYW1lID0gKDAsIF9ub3JtYWxpemVUcmFpbGluZ1NsYXNoKS5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaChmaW5hbFVybC5wYXRobmFtZSk7XG4gICAgICAgIGxldCBpbnRlcnBvbGF0ZWRBcyA9ICcnO1xuICAgICAgICBpZiAoKDAsIF9pc0R5bmFtaWMpLmlzRHluYW1pY1JvdXRlKGZpbmFsVXJsLnBhdGhuYW1lKSAmJiBmaW5hbFVybC5zZWFyY2hQYXJhbXMgJiYgcmVzb2x2ZUFzKSB7XG4gICAgICAgICAgICBjb25zdCBxdWVyeSA9ICgwLCBfcXVlcnlzdHJpbmcpLnNlYXJjaFBhcmFtc1RvVXJsUXVlcnkoZmluYWxVcmwuc2VhcmNoUGFyYW1zKTtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVzdWx0ICwgcGFyYW1zICB9ID0gaW50ZXJwb2xhdGVBcyhmaW5hbFVybC5wYXRobmFtZSwgZmluYWxVcmwucGF0aG5hbWUsIHF1ZXJ5KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWRBcyA9ICgwLCBfdXRpbHMpLmZvcm1hdFdpdGhWYWxpZGF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgaGFzaDogZmluYWxVcmwuaGFzaCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IG9taXRQYXJtc0Zyb21RdWVyeShxdWVyeSwgcGFyYW1zKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHRoZSBvcmlnaW4gZGlkbid0IGNoYW5nZSwgaXQgbWVhbnMgd2UgcmVjZWl2ZWQgYSByZWxhdGl2ZSBocmVmXG4gICAgICAgIGNvbnN0IHJlc29sdmVkSHJlZiA9IGZpbmFsVXJsLm9yaWdpbiA9PT0gYmFzZS5vcmlnaW4gPyBmaW5hbFVybC5ocmVmLnNsaWNlKGZpbmFsVXJsLm9yaWdpbi5sZW5ndGgpIDogZmluYWxVcmwuaHJlZjtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVBcyA/IFtcbiAgICAgICAgICAgIHJlc29sdmVkSHJlZixcbiAgICAgICAgICAgIGludGVycG9sYXRlZEFzIHx8IHJlc29sdmVkSHJlZlxuICAgICAgICBdIDogcmVzb2x2ZWRIcmVmO1xuICAgIH0gY2F0Y2ggKF8xKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlQXMgPyBbXG4gICAgICAgICAgICB1cmxBc1N0cmluZ1xuICAgICAgICBdIDogdXJsQXNTdHJpbmc7XG4gICAgfVxufVxuZnVuY3Rpb24gc3RyaXBPcmlnaW4odXJsKSB7XG4gICAgY29uc3Qgb3JpZ2luID0gKDAsIF91dGlscykuZ2V0TG9jYXRpb25PcmlnaW4oKTtcbiAgICByZXR1cm4gdXJsLnN0YXJ0c1dpdGgob3JpZ2luKSA/IHVybC5zdWJzdHJpbmcob3JpZ2luLmxlbmd0aCkgOiB1cmw7XG59XG5mdW5jdGlvbiBwcmVwYXJlVXJsQXMocm91dGVyLCB1cmwsIGFzKSB7XG4gICAgLy8gSWYgdXJsIGFuZCBhcyBwcm92aWRlZCBhcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24sXG4gICAgLy8gd2UnbGwgZm9ybWF0IHRoZW0gaW50byB0aGUgc3RyaW5nIHZlcnNpb24gaGVyZS5cbiAgICBsZXQgW3Jlc29sdmVkSHJlZiwgcmVzb2x2ZWRBc10gPSByZXNvbHZlSHJlZihyb3V0ZXIsIHVybCwgdHJ1ZSk7XG4gICAgY29uc3Qgb3JpZ2luID0gKDAsIF91dGlscykuZ2V0TG9jYXRpb25PcmlnaW4oKTtcbiAgICBjb25zdCBocmVmSGFkT3JpZ2luID0gcmVzb2x2ZWRIcmVmLnN0YXJ0c1dpdGgob3JpZ2luKTtcbiAgICBjb25zdCBhc0hhZE9yaWdpbiA9IHJlc29sdmVkQXMgJiYgcmVzb2x2ZWRBcy5zdGFydHNXaXRoKG9yaWdpbik7XG4gICAgcmVzb2x2ZWRIcmVmID0gc3RyaXBPcmlnaW4ocmVzb2x2ZWRIcmVmKTtcbiAgICByZXNvbHZlZEFzID0gcmVzb2x2ZWRBcyA/IHN0cmlwT3JpZ2luKHJlc29sdmVkQXMpIDogcmVzb2x2ZWRBcztcbiAgICBjb25zdCBwcmVwYXJlZFVybCA9IGhyZWZIYWRPcmlnaW4gPyByZXNvbHZlZEhyZWYgOiBhZGRCYXNlUGF0aChyZXNvbHZlZEhyZWYpO1xuICAgIGNvbnN0IHByZXBhcmVkQXMgPSBhcyA/IHN0cmlwT3JpZ2luKHJlc29sdmVIcmVmKHJvdXRlciwgYXMpKSA6IHJlc29sdmVkQXMgfHwgcmVzb2x2ZWRIcmVmO1xuICAgIHJldHVybiB7XG4gICAgICAgIHVybDogcHJlcGFyZWRVcmwsXG4gICAgICAgIGFzOiBhc0hhZE9yaWdpbiA/IHByZXBhcmVkQXMgOiBhZGRCYXNlUGF0aChwcmVwYXJlZEFzKVxuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlRHluYW1pY1JvdXRlKHBhdGhuYW1lLCBwYWdlcykge1xuICAgIGNvbnN0IGNsZWFuUGF0aG5hbWUgPSAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKCgwLCBfZGVub3JtYWxpemVQYWdlUGF0aCkuZGVub3JtYWxpemVQYWdlUGF0aChwYXRobmFtZSkpO1xuICAgIGlmIChjbGVhblBhdGhuYW1lID09PSAnLzQwNCcgfHwgY2xlYW5QYXRobmFtZSA9PT0gJy9fZXJyb3InKSB7XG4gICAgICAgIHJldHVybiBwYXRobmFtZTtcbiAgICB9XG4gICAgLy8gaGFuZGxlIHJlc29sdmluZyBocmVmIGZvciBkeW5hbWljIHJvdXRlc1xuICAgIGlmICghcGFnZXMuaW5jbHVkZXMoY2xlYW5QYXRobmFtZSkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuICAgICAgICBwYWdlcy5zb21lKChwYWdlKT0+e1xuICAgICAgICAgICAgaWYgKCgwLCBfaXNEeW5hbWljKS5pc0R5bmFtaWNSb3V0ZShwYWdlKSAmJiAoMCwgX3JvdXRlUmVnZXgpLmdldFJvdXRlUmVnZXgocGFnZSkucmUudGVzdChjbGVhblBhdGhuYW1lKSkge1xuICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gcGFnZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGhuYW1lKTtcbn1cbmNvbnN0IG1hbnVhbFNjcm9sbFJlc3RvcmF0aW9uID0gcHJvY2Vzcy5lbnYuX19ORVhUX1NDUk9MTF9SRVNUT1JBVElPTiAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAnc2Nyb2xsUmVzdG9yYXRpb24nIGluIHdpbmRvdy5oaXN0b3J5ICYmICEhZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IHYgPSAnX19uZXh0JztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlcXVlbmNlc1xuICAgICAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSh2LCB2KSwgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSh2KSwgdHJ1ZTtcbiAgICB9IGNhdGNoIChuKSB7XG4gICAgfVxufSgpO1xuY29uc3QgU1NHX0RBVEFfTk9UX0ZPVU5EID0gU3ltYm9sKCdTU0dfREFUQV9OT1RfRk9VTkQnKTtcbmZ1bmN0aW9uIGZldGNoUmV0cnkodXJsLCBhdHRlbXB0cywgb3B0cykge1xuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgICAgLy8gQ29va2llcyBhcmUgcmVxdWlyZWQgdG8gYmUgcHJlc2VudCBmb3IgTmV4dC5qcycgU1NHIFwiUHJldmlldyBNb2RlXCIuXG4gICAgICAgIC8vIENvb2tpZXMgbWF5IGFsc28gYmUgcmVxdWlyZWQgZm9yIGBnZXRTZXJ2ZXJTaWRlUHJvcHNgLlxuICAgICAgICAvL1xuICAgICAgICAvLyA+IGBmZXRjaGAgd29u4oCZdCBzZW5kIGNvb2tpZXMsIHVubGVzcyB5b3Ugc2V0IHRoZSBjcmVkZW50aWFscyBpbml0XG4gICAgICAgIC8vID4gb3B0aW9uLlxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmV0Y2hfQVBJL1VzaW5nX0ZldGNoXG4gICAgICAgIC8vXG4gICAgICAgIC8vID4gRm9yIG1heGltdW0gYnJvd3NlciBjb21wYXRpYmlsaXR5IHdoZW4gaXQgY29tZXMgdG8gc2VuZGluZyAmXG4gICAgICAgIC8vID4gcmVjZWl2aW5nIGNvb2tpZXMsIGFsd2F5cyBzdXBwbHkgdGhlIGBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJ2BcbiAgICAgICAgLy8gPiBvcHRpb24gaW5zdGVhZCBvZiByZWx5aW5nIG9uIHRoZSBkZWZhdWx0LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2l0aHViL2ZldGNoI2NhdmVhdHNcbiAgICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbidcbiAgICB9KS50aGVuKChyZXMpPT57XG4gICAgICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgICAgICBpZiAoYXR0ZW1wdHMgPiAxICYmIHJlcy5zdGF0dXMgPj0gNTAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoUmV0cnkodXJsLCBhdHRlbXB0cyAtIDEsIG9wdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpLnRoZW4oKGRhdGEpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm5vdEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEZvdW5kOiBTU0dfREFUQV9OT1RfRk9VTkRcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gbG9hZCBzdGF0aWMgcHJvcHNgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgc3RhdGljIHByb3BzYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdHMudGV4dCA/IHJlcy50ZXh0KCkgOiByZXMuanNvbigpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZmV0Y2hOZXh0RGF0YShkYXRhSHJlZiwgaXNTZXJ2ZXJSZW5kZXIsIHRleHQsIGluZmxpZ2h0Q2FjaGUsIHBlcnNpc3RDYWNoZSkge1xuICAgIGNvbnN0IHsgaHJlZjogY2FjaGVLZXkgIH0gPSBuZXcgVVJMKGRhdGFIcmVmLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgaWYgKGluZmxpZ2h0Q2FjaGVbY2FjaGVLZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGluZmxpZ2h0Q2FjaGVbY2FjaGVLZXldO1xuICAgIH1cbiAgICByZXR1cm4gaW5mbGlnaHRDYWNoZVtjYWNoZUtleV0gPSBmZXRjaFJldHJ5KGRhdGFIcmVmLCBpc1NlcnZlclJlbmRlciA/IDMgOiAxLCB7XG4gICAgICAgIHRleHRcbiAgICB9KS5jYXRjaCgoZXJyKT0+e1xuICAgICAgICAvLyBXZSBzaG91bGQgb25seSB0cmlnZ2VyIGEgc2VydmVyLXNpZGUgdHJhbnNpdGlvbiBpZiB0aGlzIHdhcyBjYXVzZWRcbiAgICAgICAgLy8gb24gYSBjbGllbnQtc2lkZSB0cmFuc2l0aW9uLiBPdGhlcndpc2UsIHdlJ2QgZ2V0IGludG8gYW4gaW5maW5pdGVcbiAgICAgICAgLy8gbG9vcC5cbiAgICAgICAgaWYgKCFpc1NlcnZlclJlbmRlcikge1xuICAgICAgICAgICAgKDAsIF9yb3V0ZUxvYWRlcikubWFya0Fzc2V0RXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgfSkudGhlbigoZGF0YSk9PntcbiAgICAgICAgaWYgKCFwZXJzaXN0Q2FjaGUgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgZGVsZXRlIGluZmxpZ2h0Q2FjaGVbY2FjaGVLZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlcnIpPT57XG4gICAgICAgIGRlbGV0ZSBpbmZsaWdodENhY2hlW2NhY2hlS2V5XTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH0pO1xufVxuY2xhc3MgUm91dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihwYXRobmFtZSwgcXVlcnksIGFzLCB7IGluaXRpYWxQcm9wcyAsIHBhZ2VMb2FkZXIgLCBBcHAgLCB3cmFwQXBwICwgQ29tcG9uZW50ICwgZXJyICwgc3Vic2NyaXB0aW9uICwgaXNGYWxsYmFjayAsIGxvY2FsZSAsIGxvY2FsZXMgLCBkZWZhdWx0TG9jYWxlICwgZG9tYWluTG9jYWxlcyAsIGlzUHJldmlldyAgfSl7XG4gICAgICAgIC8vIFN0YXRpYyBEYXRhIENhY2hlXG4gICAgICAgIHRoaXMuc2RjID0ge1xuICAgICAgICB9O1xuICAgICAgICAvLyBJbi1mbGlnaHQgU2VydmVyIERhdGEgUmVxdWVzdHMsIGZvciBkZWR1cGluZ1xuICAgICAgICB0aGlzLnNkciA9IHtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSW4tZmxpZ2h0IG1pZGRsZXdhcmUgcHJlZmxpZ2h0IHJlcXVlc3RzXG4gICAgICAgIHRoaXMuc2RlID0ge1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9pZHggPSAwO1xuICAgICAgICB0aGlzLm9uUG9wU3RhdGUgPSAoZSk9PntcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gZS5zdGF0ZTtcbiAgICAgICAgICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBnZXQgc3RhdGUgYXMgdW5kZWZpbmVkIGZvciB0d28gcmVhc29ucy5cbiAgICAgICAgICAgICAgICAvLyAgMS4gV2l0aCBvbGRlciBzYWZhcmkgKDwgOCkgYW5kIG9sZGVyIGNocm9tZSAoPCAzNClcbiAgICAgICAgICAgICAgICAvLyAgMi4gV2hlbiB0aGUgVVJMIGNoYW5nZWQgd2l0aCAjXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBJbiB0aGUgYm90aCBjYXNlcywgd2UgZG9uJ3QgbmVlZCB0byBwcm9jZWVkIGFuZCBjaGFuZ2UgdGhlIHJvdXRlLlxuICAgICAgICAgICAgICAgIC8vIChhcyBpdCdzIGFscmVhZHkgY2hhbmdlZClcbiAgICAgICAgICAgICAgICAvLyBCdXQgd2UgY2FuIHNpbXBseSByZXBsYWNlIHRoZSBzdGF0ZSB3aXRoIHRoZSBuZXcgY2hhbmdlcy5cbiAgICAgICAgICAgICAgICAvLyBBY3R1YWxseSwgZm9yICgxKSB3ZSBkb24ndCBuZWVkIHRvIG5vdGhpbmcuIEJ1dCBpdCdzIGhhcmQgdG8gZGV0ZWN0IHRoYXQgZXZlbnQuXG4gICAgICAgICAgICAgICAgLy8gU28sIGRvaW5nIHRoZSBmb2xsb3dpbmcgZm9yICgxKSBkb2VzIG5vIGhhcm0uXG4gICAgICAgICAgICAgICAgY29uc3QgeyBwYXRobmFtZSAsIHF1ZXJ5ICB9ID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKCdyZXBsYWNlU3RhdGUnLCAoMCwgX3V0aWxzKS5mb3JtYXRXaXRoVmFsaWRhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBhZGRCYXNlUGF0aChwYXRobmFtZSksXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICAgICAgfSksICgwLCBfdXRpbHMpLmdldFVSTCgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0YXRlLl9fTikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBmb3JjZWRTY3JvbGw7XG4gICAgICAgICAgICBjb25zdCB7IHVybCAsIGFzICwgb3B0aW9ucyAsIGlkeCAgfSA9IHN0YXRlO1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9TQ1JPTExfUkVTVE9SQVRJT04pIHtcbiAgICAgICAgICAgICAgICBpZiAobWFudWFsU2Nyb2xsUmVzdG9yYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lkeCAhPT0gaWR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTbmFwc2hvdCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnX19uZXh0X3Njcm9sbF8nICsgdGhpcy5faWR4LCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHNlbGYucGFnZVhPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHNlbGYucGFnZVlPZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXN0b3JlIG9sZCBzY3JvbGwgcG9zaXRpb246XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdfX25leHRfc2Nyb2xsXycgKyBpZHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlZFNjcm9sbCA9IEpTT04ucGFyc2Uodik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VkU2Nyb2xsID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2lkeCA9IGlkeDtcbiAgICAgICAgICAgIGNvbnN0IHsgcGF0aG5hbWUgIH0gPSAoMCwgX3BhcnNlUmVsYXRpdmVVcmwpLnBhcnNlUmVsYXRpdmVVcmwodXJsKTtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBkb24ndCByZS1yZW5kZXIgb24gaW5pdGlhbCBsb2FkLFxuICAgICAgICAgICAgLy8gY2FuIGJlIGNhdXNlZCBieSBuYXZpZ2F0aW5nIGJhY2sgZnJvbSBhbiBleHRlcm5hbCBzaXRlXG4gICAgICAgICAgICBpZiAodGhpcy5pc1NzciAmJiBhcyA9PT0gYWRkQmFzZVBhdGgodGhpcy5hc1BhdGgpICYmIHBhdGhuYW1lID09PSBhZGRCYXNlUGF0aCh0aGlzLnBhdGhuYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRoZSBkb3duc3RyZWFtIGFwcGxpY2F0aW9uIHJldHVybnMgZmFsc3ksIHJldHVybi5cbiAgICAgICAgICAgIC8vIFRoZXkgd2lsbCB0aGVuIGJlIHJlc3BvbnNpYmxlIGZvciBoYW5kbGluZyB0aGUgZXZlbnQuXG4gICAgICAgICAgICBpZiAodGhpcy5fYnBzICYmICF0aGlzLl9icHMoc3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jaGFuZ2UoJ3JlcGxhY2VTdGF0ZScsIHVybCwgYXMsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgfSwgb3B0aW9ucywge1xuICAgICAgICAgICAgICAgIHNoYWxsb3c6IG9wdGlvbnMuc2hhbGxvdyAmJiB0aGlzLl9zaGFsbG93LFxuICAgICAgICAgICAgICAgIGxvY2FsZTogb3B0aW9ucy5sb2NhbGUgfHwgdGhpcy5kZWZhdWx0TG9jYWxlXG4gICAgICAgICAgICB9KSwgZm9yY2VkU2Nyb2xsKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gcmVwcmVzZW50cyB0aGUgY3VycmVudCBjb21wb25lbnQga2V5XG4gICAgICAgIHRoaXMucm91dGUgPSAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGhuYW1lKTtcbiAgICAgICAgLy8gc2V0IHVwIHRoZSBjb21wb25lbnQgY2FjaGUgKGJ5IHJvdXRlIGtleXMpXG4gICAgICAgIHRoaXMuY29tcG9uZW50cyA9IHtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gV2Ugc2hvdWxkIG5vdCBrZWVwIHRoZSBjYWNoZSwgaWYgdGhlcmUncyBhbiBlcnJvclxuICAgICAgICAvLyBPdGhlcndpc2UsIHRoaXMgY2F1c2UgaXNzdWVzIHdoZW4gd2hlbiBnb2luZyBiYWNrIGFuZFxuICAgICAgICAvLyBjb21lIGFnYWluIHRvIHRoZSBlcnJvcmVkIHBhZ2UuXG4gICAgICAgIGlmIChwYXRobmFtZSAhPT0gJy9fZXJyb3InKSB7XG4gICAgICAgICAgICB2YXIgcmVmO1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzW3RoaXMucm91dGVdID0ge1xuICAgICAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBpbml0aWFsOiB0cnVlLFxuICAgICAgICAgICAgICAgIHByb3BzOiBpbml0aWFsUHJvcHMsXG4gICAgICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgICAgIF9fTl9TU0c6IGluaXRpYWxQcm9wcyAmJiBpbml0aWFsUHJvcHMuX19OX1NTRyxcbiAgICAgICAgICAgICAgICBfX05fU1NQOiBpbml0aWFsUHJvcHMgJiYgaW5pdGlhbFByb3BzLl9fTl9TU1AsXG4gICAgICAgICAgICAgICAgX19OX1JTQzogISEoKHJlZiA9IENvbXBvbmVudCkgPT09IG51bGwgfHwgcmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYuX19uZXh0X3JzY19fKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbXBvbmVudHNbJy9fYXBwJ10gPSB7XG4gICAgICAgICAgICBDb21wb25lbnQ6IEFwcCxcbiAgICAgICAgICAgIHN0eWxlU2hlZXRzOiBbXVxuICAgICAgICB9O1xuICAgICAgICAvLyBCYWNrd2FyZHMgY29tcGF0IGZvciBSb3V0ZXIucm91dGVyLmV2ZW50c1xuICAgICAgICAvLyBUT0RPOiBTaG91bGQgYmUgcmVtb3ZlIHRoZSBmb2xsb3dpbmcgbWFqb3IgdmVyc2lvbiBhcyBpdCB3YXMgbmV2ZXIgZG9jdW1lbnRlZFxuICAgICAgICB0aGlzLmV2ZW50cyA9IFJvdXRlci5ldmVudHM7XG4gICAgICAgIHRoaXMucGFnZUxvYWRlciA9IHBhZ2VMb2FkZXI7XG4gICAgICAgIHRoaXMucGF0aG5hbWUgPSBwYXRobmFtZTtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICAvLyBpZiBhdXRvIHByZXJlbmRlcmVkIGFuZCBkeW5hbWljIHJvdXRlIHdhaXQgdG8gdXBkYXRlIGFzUGF0aFxuICAgICAgICAvLyB1bnRpbCBhZnRlciBtb3VudCB0byBwcmV2ZW50IGh5ZHJhdGlvbiBtaXNtYXRjaFxuICAgICAgICBjb25zdCBhdXRvRXhwb3J0RHluYW1pYyA9ICgwLCBfaXNEeW5hbWljKS5pc0R5bmFtaWNSb3V0ZShwYXRobmFtZSkgJiYgc2VsZi5fX05FWFRfREFUQV9fLmF1dG9FeHBvcnQ7XG4gICAgICAgIHRoaXMuYXNQYXRoID0gYXV0b0V4cG9ydER5bmFtaWMgPyBwYXRobmFtZSA6IGFzO1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgICAgIHRoaXMuc3ViID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmNsYyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3dyYXBBcHAgPSB3cmFwQXBwO1xuICAgICAgICAvLyBtYWtlIHN1cmUgdG8gaWdub3JlIGV4dHJhIHBvcFN0YXRlIGluIHNhZmFyaSBvbiBuYXZpZ2F0aW5nXG4gICAgICAgIC8vIGJhY2sgZnJvbSBleHRlcm5hbCBzaXRlXG4gICAgICAgIHRoaXMuaXNTc3IgPSB0cnVlO1xuICAgICAgICB0aGlzLmlzRmFsbGJhY2sgPSBpc0ZhbGxiYWNrO1xuICAgICAgICB0aGlzLmlzUmVhZHkgPSAhIShzZWxmLl9fTkVYVF9EQVRBX18uZ3NzcCB8fCBzZWxmLl9fTkVYVF9EQVRBX18uZ2lwIHx8IHNlbGYuX19ORVhUX0RBVEFfXy5hcHBHaXAgJiYgIXNlbGYuX19ORVhUX0RBVEFfXy5nc3AgfHwgIWF1dG9FeHBvcnREeW5hbWljICYmICFzZWxmLmxvY2F0aW9uLnNlYXJjaCAmJiAhcHJvY2Vzcy5lbnYuX19ORVhUX0hBU19SRVdSSVRFUyk7XG4gICAgICAgIHRoaXMuaXNQcmV2aWV3ID0gISFpc1ByZXZpZXc7XG4gICAgICAgIHRoaXMuaXNMb2NhbGVEb21haW4gPSBmYWxzZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYWxlID0gbG9jYWxlO1xuICAgICAgICAgICAgdGhpcy5sb2NhbGVzID0gbG9jYWxlcztcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdExvY2FsZSA9IGRlZmF1bHRMb2NhbGU7XG4gICAgICAgICAgICB0aGlzLmRvbWFpbkxvY2FsZXMgPSBkb21haW5Mb2NhbGVzO1xuICAgICAgICAgICAgdGhpcy5pc0xvY2FsZURvbWFpbiA9ICEhZGV0ZWN0RG9tYWluTG9jYWxlKGRvbWFpbkxvY2FsZXMsIHNlbGYubG9jYXRpb24uaG9zdG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIFwiYXNcIiBkb2Vzbid0IHN0YXJ0IHdpdGggZG91YmxlIHNsYXNoZXMgb3IgZWxzZSBpdCBjYW5cbiAgICAgICAgICAgIC8vIHRocm93IGFuIGVycm9yIGFzIGl0J3MgY29uc2lkZXJlZCBpbnZhbGlkXG4gICAgICAgICAgICBpZiAoYXMuc3Vic3RyKDAsIDIpICE9PSAnLy8nKSB7XG4gICAgICAgICAgICAgICAgLy8gaW4gb3JkZXIgZm9yIGBlLnN0YXRlYCB0byB3b3JrIG9uIHRoZSBgb25wb3BzdGF0ZWAgZXZlbnRcbiAgICAgICAgICAgICAgICAvLyB3ZSBoYXZlIHRvIHJlZ2lzdGVyIHRoZSBpbml0aWFsIHJvdXRlIHVwb24gaW5pdGlhbGl6YXRpb25cbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuX3Nob3VsZFJlc29sdmVIcmVmID0gYXMgIT09IHBhdGhuYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUoJ3JlcGxhY2VTdGF0ZScsICgwLCBfdXRpbHMpLmZvcm1hdFdpdGhWYWxpZGF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6IGFkZEJhc2VQYXRoKHBhdGhuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlcbiAgICAgICAgICAgICAgICB9KSwgKDAsIF91dGlscykuZ2V0VVJMKCksIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgdGhpcy5vblBvcFN0YXRlKTtcbiAgICAgICAgICAgIC8vIGVuYWJsZSBjdXN0b20gc2Nyb2xsIHJlc3RvcmF0aW9uIGhhbmRsaW5nIHdoZW4gYXZhaWxhYmxlXG4gICAgICAgICAgICAvLyBvdGhlcndpc2UgZmFsbGJhY2sgdG8gYnJvd3NlcidzIGRlZmF1bHQgaGFuZGxpbmdcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfU0NST0xMX1JFU1RPUkFUSU9OKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hbnVhbFNjcm9sbFJlc3RvcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJlbG9hZCgpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICogR28gYmFjayBpbiBoaXN0b3J5XG4gICAqLyBiYWNrKCkge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBQZXJmb3JtcyBhIGBwdXNoU3RhdGVgIHdpdGggYXJndW1lbnRzXG4gICAqIEBwYXJhbSB1cmwgb2YgdGhlIHJvdXRlXG4gICAqIEBwYXJhbSBhcyBtYXNrcyBgdXJsYCBmb3IgdGhlIGJyb3dzZXJcbiAgICogQHBhcmFtIG9wdGlvbnMgb2JqZWN0IHlvdSBjYW4gZGVmaW5lIGBzaGFsbG93YCBhbmQgb3RoZXIgb3B0aW9uc1xuICAgKi8gcHVzaCh1cmwsIGFzLCBvcHRpb25zID0ge1xuICAgIH0pIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9TQ1JPTExfUkVTVE9SQVRJT04pIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZSBpbiB0aGUgZnV0dXJlIHdoZW4gd2UgdXBkYXRlIGhpc3RvcnkgYmVmb3JlIHJvdXRlIGNoYW5nZVxuICAgICAgICAgICAgLy8gaXMgY29tcGxldGUsIGFzIHRoZSBwb3BzdGF0ZSBldmVudCBzaG91bGQgaGFuZGxlIHRoaXMgY2FwdHVyZS5cbiAgICAgICAgICAgIGlmIChtYW51YWxTY3JvbGxSZXN0b3JhdGlvbikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNuYXBzaG90IHNjcm9sbCBwb3NpdGlvbiByaWdodCBiZWZvcmUgbmF2aWdhdGluZyB0byBhIG5ldyBwYWdlOlxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdfX25leHRfc2Nyb2xsXycgKyB0aGlzLl9pZHgsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHNlbGYucGFnZVhPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBzZWxmLnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoICB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICh7IHVybCAsIGFzICB9ID0gcHJlcGFyZVVybEFzKHRoaXMsIHVybCwgYXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlKCdwdXNoU3RhdGUnLCB1cmwsIGFzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFBlcmZvcm1zIGEgYHJlcGxhY2VTdGF0ZWAgd2l0aCBhcmd1bWVudHNcbiAgICogQHBhcmFtIHVybCBvZiB0aGUgcm91dGVcbiAgICogQHBhcmFtIGFzIG1hc2tzIGB1cmxgIGZvciB0aGUgYnJvd3NlclxuICAgKiBAcGFyYW0gb3B0aW9ucyBvYmplY3QgeW91IGNhbiBkZWZpbmUgYHNoYWxsb3dgIGFuZCBvdGhlciBvcHRpb25zXG4gICAqLyByZXBsYWNlKHVybCwgYXMsIG9wdGlvbnMgPSB7XG4gICAgfSkge1xuICAgICAgICAoeyB1cmwgLCBhcyAgfSA9IHByZXBhcmVVcmxBcyh0aGlzLCB1cmwsIGFzKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5nZSgncmVwbGFjZVN0YXRlJywgdXJsLCBhcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIGNoYW5nZShtZXRob2QsIHVybCwgYXMsIG9wdGlvbnMsIGZvcmNlZFNjcm9sbCkge1xuICAgICAgICBpZiAoIWlzTG9jYWxVUkwodXJsKSkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2hvdWxkUmVzb2x2ZUhyZWYgPSBvcHRpb25zLl9oIHx8IG9wdGlvbnMuX3Nob3VsZFJlc29sdmVIcmVmIHx8IHBhdGhOb1F1ZXJ5SGFzaCh1cmwpID09PSBwYXRoTm9RdWVyeUhhc2goYXMpO1xuICAgICAgICAvLyBmb3Igc3RhdGljIHBhZ2VzIHdpdGggcXVlcnkgcGFyYW1zIGluIHRoZSBVUkwgd2UgZGVsYXlcbiAgICAgICAgLy8gbWFya2luZyB0aGUgcm91dGVyIHJlYWR5IHVudGlsIGFmdGVyIHRoZSBxdWVyeSBpcyB1cGRhdGVkXG4gICAgICAgIGlmIChvcHRpb25zLl9oKSB7XG4gICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXZMb2NhbGUgPSB0aGlzLmxvY2FsZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgPT09IGZhbHNlID8gdGhpcy5kZWZhdWx0TG9jYWxlIDogb3B0aW9ucy5sb2NhbGUgfHwgdGhpcy5sb2NhbGU7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9jYWxlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubG9jYWxlID0gdGhpcy5sb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRBcyA9ICgwLCBfcGFyc2VSZWxhdGl2ZVVybCkucGFyc2VSZWxhdGl2ZVVybChoYXNCYXNlUGF0aChhcykgPyBkZWxCYXNlUGF0aChhcykgOiBhcyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbGVQYXRoUmVzdWx0ID0gKDAsIF9ub3JtYWxpemVMb2NhbGVQYXRoKS5ub3JtYWxpemVMb2NhbGVQYXRoKHBhcnNlZEFzLnBhdGhuYW1lLCB0aGlzLmxvY2FsZXMpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZVBhdGhSZXN1bHQuZGV0ZWN0ZWRMb2NhbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZSA9IGxvY2FsZVBhdGhSZXN1bHQuZGV0ZWN0ZWRMb2NhbGU7XG4gICAgICAgICAgICAgICAgcGFyc2VkQXMucGF0aG5hbWUgPSBhZGRCYXNlUGF0aChwYXJzZWRBcy5wYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgYXMgPSAoMCwgX3V0aWxzKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihwYXJzZWRBcyk7XG4gICAgICAgICAgICAgICAgdXJsID0gYWRkQmFzZVBhdGgoKDAsIF9ub3JtYWxpemVMb2NhbGVQYXRoKS5ub3JtYWxpemVMb2NhbGVQYXRoKGhhc0Jhc2VQYXRoKHVybCkgPyBkZWxCYXNlUGF0aCh1cmwpIDogdXJsLCB0aGlzLmxvY2FsZXMpLnBhdGhuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBkaWROYXZpZ2F0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byB3cmFwIHRoaXMgaW4gdGhlIGVudiBjaGVjayBhZ2FpbiBzaW5jZSByZWdlbmVyYXRvciBydW50aW1lXG4gICAgICAgICAgICAvLyBtb3ZlcyB0aGlzIG9uIGl0cyBvd24gZHVlIHRvIHRoZSByZXR1cm5cbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbG9jYWxlIGlzbid0IGNvbmZpZ3VyZWQgaGFyZCBuYXZpZ2F0ZSB0byBzaG93IDQwNCBwYWdlXG4gICAgICAgICAgICAgICAgaWYgKCEoKHJlZiA9IHRoaXMubG9jYWxlcykgPT09IG51bGwgfHwgcmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYuaW5jbHVkZXModGhpcy5sb2NhbGUpKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZWRBcy5wYXRobmFtZSA9IGFkZExvY2FsZShwYXJzZWRBcy5wYXRobmFtZSwgdGhpcy5sb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICgwLCBfdXRpbHMpLmZvcm1hdFdpdGhWYWxpZGF0aW9uKHBhcnNlZEFzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3YXMgcHJldmlvdXNseSBhIHJldHVybiBidXQgd2FzIHJlbW92ZWQgaW4gZmF2b3JcbiAgICAgICAgICAgICAgICAgICAgLy8gb2YgYmV0dGVyIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3aXRoIHJlZ2VuZXJhdG9yIHJ1bnRpbWVcbiAgICAgICAgICAgICAgICAgICAgZGlkTmF2aWdhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRldGVjdGVkRG9tYWluID0gZGV0ZWN0RG9tYWluTG9jYWxlKHRoaXMuZG9tYWluTG9jYWxlcywgdW5kZWZpbmVkLCB0aGlzLmxvY2FsZSk7XG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHdyYXAgdGhpcyBpbiB0aGUgZW52IGNoZWNrIGFnYWluIHNpbmNlIHJlZ2VuZXJhdG9yIHJ1bnRpbWVcbiAgICAgICAgICAgIC8vIG1vdmVzIHRoaXMgb24gaXRzIG93biBkdWUgdG8gdGhlIHJldHVyblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBhcmUgbmF2aWdhdGluZyB0byBhIGRvbWFpbiBsb2NhbGUgZW5zdXJlIHdlIHJlZGlyZWN0IHRvIHRoZVxuICAgICAgICAgICAgICAgIC8vIGNvcnJlY3QgZG9tYWluXG4gICAgICAgICAgICAgICAgaWYgKCFkaWROYXZpZ2F0ZSAmJiBkZXRlY3RlZERvbWFpbiAmJiB0aGlzLmlzTG9jYWxlRG9tYWluICYmIHNlbGYubG9jYXRpb24uaG9zdG5hbWUgIT09IGRldGVjdGVkRG9tYWluLmRvbWFpbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhc05vQmFzZVBhdGggPSBkZWxCYXNlUGF0aChhcyk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYGh0dHAke2RldGVjdGVkRG9tYWluLmh0dHAgPyAnJyA6ICdzJ306Ly8ke2RldGVjdGVkRG9tYWluLmRvbWFpbn0ke2FkZEJhc2VQYXRoKGAke3RoaXMubG9jYWxlID09PSBkZXRlY3RlZERvbWFpbi5kZWZhdWx0TG9jYWxlID8gJycgOiBgLyR7dGhpcy5sb2NhbGV9YH0ke2FzTm9CYXNlUGF0aCA9PT0gJy8nID8gJycgOiBhc05vQmFzZVBhdGh9YCB8fCAnLycpfWA7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2FzIHByZXZpb3VzbHkgYSByZXR1cm4gYnV0IHdhcyByZW1vdmVkIGluIGZhdm9yXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIGJldHRlciBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2l0aCByZWdlbmVyYXRvciBydW50aW1lXG4gICAgICAgICAgICAgICAgICAgIGRpZE5hdmlnYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGlkTmF2aWdhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCk9PntcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuX2gpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTc3IgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtYXJraW5nIHJvdXRlIGNoYW5nZXMgYXMgYSBuYXZpZ2F0aW9uIHN0YXJ0IGVudHJ5XG4gICAgICAgIGlmIChfdXRpbHMuU1QpIHtcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ3JvdXRlQ2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBzaGFsbG93ID1mYWxzZSAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHJvdXRlUHJvcHMgPSB7XG4gICAgICAgICAgICBzaGFsbG93XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLl9pbkZsaWdodFJvdXRlKSB7XG4gICAgICAgICAgICB0aGlzLmFib3J0Q29tcG9uZW50TG9hZCh0aGlzLl9pbkZsaWdodFJvdXRlLCByb3V0ZVByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBhcyA9IGFkZEJhc2VQYXRoKGFkZExvY2FsZShoYXNCYXNlUGF0aChhcykgPyBkZWxCYXNlUGF0aChhcykgOiBhcywgb3B0aW9ucy5sb2NhbGUsIHRoaXMuZGVmYXVsdExvY2FsZSkpO1xuICAgICAgICBjb25zdCBjbGVhbmVkQXMgPSBkZWxMb2NhbGUoaGFzQmFzZVBhdGgoYXMpID8gZGVsQmFzZVBhdGgoYXMpIDogYXMsIHRoaXMubG9jYWxlKTtcbiAgICAgICAgdGhpcy5faW5GbGlnaHRSb3V0ZSA9IGFzO1xuICAgICAgICBsZXQgbG9jYWxlQ2hhbmdlID0gcHJldkxvY2FsZSAhPT0gdGhpcy5sb2NhbGU7XG4gICAgICAgIC8vIElmIHRoZSB1cmwgY2hhbmdlIGlzIG9ubHkgcmVsYXRlZCB0byBhIGhhc2ggY2hhbmdlXG4gICAgICAgIC8vIFdlIHNob3VsZCBub3QgcHJvY2VlZC4gV2Ugc2hvdWxkIG9ubHkgY2hhbmdlIHRoZSBzdGF0ZS5cbiAgICAgICAgLy8gV0FSTklORzogYF9oYCBpcyBhbiBpbnRlcm5hbCBvcHRpb24gZm9yIGhhbmRpbmcgTmV4dC5qcyBjbGllbnQtc2lkZVxuICAgICAgICAvLyBoeWRyYXRpb24uIFlvdXIgYXBwIHNob3VsZCBfbmV2ZXJfIHVzZSB0aGlzIHByb3BlcnR5LiBJdCBtYXkgY2hhbmdlIGF0XG4gICAgICAgIC8vIGFueSB0aW1lIHdpdGhvdXQgbm90aWNlLlxuICAgICAgICBpZiAoIW9wdGlvbnMuX2ggJiYgdGhpcy5vbmx5QUhhc2hDaGFuZ2UoY2xlYW5lZEFzKSAmJiAhbG9jYWxlQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLmFzUGF0aCA9IGNsZWFuZWRBcztcbiAgICAgICAgICAgIFJvdXRlci5ldmVudHMuZW1pdCgnaGFzaENoYW5nZVN0YXJ0JywgYXMsIHJvdXRlUHJvcHMpO1xuICAgICAgICAgICAgLy8gVE9ETzogZG8gd2UgbmVlZCB0aGUgcmVzb2x2ZWQgaHJlZiB3aGVuIG9ubHkgYSBoYXNoIGNoYW5nZT9cbiAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUobWV0aG9kLCB1cmwsIGFzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9IYXNoKGNsZWFuZWRBcyk7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLmNvbXBvbmVudHNbdGhpcy5yb3V0ZV0sIG51bGwpO1xuICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KCdoYXNoQ2hhbmdlQ29tcGxldGUnLCBhcywgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyc2VkID0gKDAsIF9wYXJzZVJlbGF0aXZlVXJsKS5wYXJzZVJlbGF0aXZlVXJsKHVybCk7XG4gICAgICAgIGxldCB7IHBhdGhuYW1lICwgcXVlcnkgIH0gPSBwYXJzZWQ7XG4gICAgICAgIC8vIFRoZSBidWlsZCBtYW5pZmVzdCBuZWVkcyB0byBiZSBsb2FkZWQgYmVmb3JlIGF1dG8tc3RhdGljIGR5bmFtaWMgcGFnZXNcbiAgICAgICAgLy8gZ2V0IHRoZWlyIHF1ZXJ5IHBhcmFtZXRlcnMgdG8gYWxsb3cgZW5zdXJpbmcgdGhleSBjYW4gYmUgcGFyc2VkIHByb3Blcmx5XG4gICAgICAgIC8vIHdoZW4gcmV3cml0dGVuIHRvXG4gICAgICAgIGxldCBwYWdlcywgcmV3cml0ZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBbcGFnZXMsIHsgX19yZXdyaXRlczogcmV3cml0ZXMgIH1dID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIHRoaXMucGFnZUxvYWRlci5nZXRQYWdlTGlzdCgpLFxuICAgICAgICAgICAgICAgICgwLCBfcm91dGVMb2FkZXIpLmdldENsaWVudEJ1aWxkTWFuaWZlc3QoKSxcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VMb2FkZXIuZ2V0TWlkZGxld2FyZUxpc3QoKSwgXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBmYWlsIHRvIHJlc29sdmUgdGhlIHBhZ2UgbGlzdCBvciBjbGllbnQtYnVpbGQgbWFuaWZlc3QsIHdlIG11c3RcbiAgICAgICAgICAgIC8vIGRvIGEgc2VydmVyLXNpZGUgdHJhbnNpdGlvbjpcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYXM7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYXNrZWQgdG8gY2hhbmdlIHRoZSBjdXJyZW50IFVSTCB3ZSBzaG91bGQgcmVsb2FkIHRoZSBjdXJyZW50IHBhZ2VcbiAgICAgICAgLy8gKG5vdCBsb2NhdGlvbi5yZWxvYWQoKSBidXQgcmVsb2FkIGdldEluaXRpYWxQcm9wcyBhbmQgb3RoZXIgTmV4dC5qcyBzdHVmZnMpXG4gICAgICAgIC8vIFdlIGFsc28gbmVlZCB0byBzZXQgdGhlIG1ldGhvZCA9IHJlcGxhY2VTdGF0ZSBhbHdheXNcbiAgICAgICAgLy8gYXMgdGhpcyBzaG91bGQgbm90IGdvIGludG8gdGhlIGhpc3RvcnkgKFRoYXQncyBob3cgYnJvd3NlcnMgd29yaylcbiAgICAgICAgLy8gV2Ugc2hvdWxkIGNvbXBhcmUgdGhlIG5ldyBhc1BhdGggdG8gdGhlIGN1cnJlbnQgYXNQYXRoLCBub3QgdGhlIHVybFxuICAgICAgICBpZiAoIXRoaXMudXJsSXNOZXcoY2xlYW5lZEFzKSAmJiAhbG9jYWxlQ2hhbmdlKSB7XG4gICAgICAgICAgICBtZXRob2QgPSAncmVwbGFjZVN0YXRlJztcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHJlc29sdmUgdGhlIGFzIHZhbHVlIHVzaW5nIHJld3JpdGVzIGZvciBkeW5hbWljIFNTR1xuICAgICAgICAvLyBwYWdlcyB0byBhbGxvdyBidWlsZGluZyB0aGUgZGF0YSBVUkwgY29ycmVjdGx5XG4gICAgICAgIGxldCByZXNvbHZlZEFzID0gYXM7XG4gICAgICAgIC8vIHVybCBhbmQgYXMgc2hvdWxkIGFsd2F5cyBiZSBwcmVmaXhlZCB3aXRoIGJhc2VQYXRoIGJ5IHRoaXNcbiAgICAgICAgLy8gcG9pbnQgYnkgZWl0aGVyIG5leHQvbGluayBvciByb3V0ZXIucHVzaC9yZXBsYWNlIHNvIHN0cmlwIHRoZVxuICAgICAgICAvLyBiYXNlUGF0aCBmcm9tIHRoZSBwYXRobmFtZSB0byBtYXRjaCB0aGUgcGFnZXMgZGlyIDEtdG8tMVxuICAgICAgICBwYXRobmFtZSA9IHBhdGhuYW1lID8gKDAsIF9ub3JtYWxpemVUcmFpbGluZ1NsYXNoKS5yZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChkZWxCYXNlUGF0aChwYXRobmFtZSkpIDogcGF0aG5hbWU7XG4gICAgICAgIGlmIChzaG91bGRSZXNvbHZlSHJlZiAmJiBwYXRobmFtZSAhPT0gJy9fZXJyb3InKSB7XG4gICAgICAgICAgICBvcHRpb25zLl9zaG91bGRSZXNvbHZlSHJlZiA9IHRydWU7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0hBU19SRVdSSVRFUyAmJiBhcy5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXdyaXRlc1Jlc3VsdCA9ICgwLCBfcmVzb2x2ZVJld3JpdGVzKS5kZWZhdWx0KGFkZEJhc2VQYXRoKGFkZExvY2FsZShjbGVhbmVkQXMsIHRoaXMubG9jYWxlKSksIHBhZ2VzLCByZXdyaXRlcywgcXVlcnksIChwKT0+cmVzb2x2ZUR5bmFtaWNSb3V0ZShwLCBwYWdlcylcbiAgICAgICAgICAgICAgICAsIHRoaXMubG9jYWxlcyk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRBcyA9IHJld3JpdGVzUmVzdWx0LmFzUGF0aDtcbiAgICAgICAgICAgICAgICBpZiAocmV3cml0ZXNSZXN1bHQubWF0Y2hlZFBhZ2UgJiYgcmV3cml0ZXNSZXN1bHQucmVzb2x2ZWRIcmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgZGlyZWN0bHkgbWF0Y2hlcyBhIHBhZ2Ugd2UgbmVlZCB0byB1cGRhdGUgdGhlIGhyZWYgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gYWxsb3cgdGhlIGNvcnJlY3QgcGFnZSBjaHVuayB0byBiZSBsb2FkZWRcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWUgPSByZXdyaXRlc1Jlc3VsdC5yZXNvbHZlZEhyZWY7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9IGFkZEJhc2VQYXRoKHBhdGhuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gKDAsIF91dGlscykuZm9ybWF0V2l0aFZhbGlkYXRpb24ocGFyc2VkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9IHJlc29sdmVEeW5hbWljUm91dGUocGF0aG5hbWUsIHBhZ2VzKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkLnBhdGhuYW1lICE9PSBwYXRobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZSA9IHBhcnNlZC5wYXRobmFtZTtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkLnBhdGhuYW1lID0gYWRkQmFzZVBhdGgocGF0aG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB1cmwgPSAoMCwgX3V0aWxzKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihwYXJzZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTG9jYWxVUkwoYXMpKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBocmVmOiBcIiR7dXJsfVwiIGFuZCBhczogXCIke2FzfVwiLCByZWNlaXZlZCByZWxhdGl2ZSBocmVmIGFuZCBleHRlcm5hbCBhc2AgKyBgXFxuU2VlIG1vcmUgaW5mbzogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvaW52YWxpZC1yZWxhdGl2ZS11cmwtZXh0ZXJuYWwtYXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYXM7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZWRBcyA9IGRlbExvY2FsZShkZWxCYXNlUGF0aChyZXNvbHZlZEFzKSwgdGhpcy5sb2NhbGUpO1xuICAgICAgICAvKipcbiAgICAgKiBJZiB0aGUgcm91dGUgdXBkYXRlIHdhcyB0cmlnZ2VyZWQgZm9yIGNsaWVudC1zaWRlIGh5ZHJhdGlvbiBhbmRcbiAgICAgKiB0aGUgcmVuZGVyZWQgcm91dGUgaXMgbm90IGR5bmFtaWMgZG8gbm90IGNoZWNrIHRoZSBwcmVmbGlnaHRcbiAgICAgKiByZXF1ZXN0IGFzIGl0IGlzIG5vdCBuZWNlc3NhcnkuXG4gICAgICovIGlmIChvcHRpb25zLl9oICE9PSAxIHx8ICgwLCBfaXNEeW5hbWljKS5pc0R5bmFtaWNSb3V0ZSgoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGhuYW1lKSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVmZmVjdCA9IGF3YWl0IHRoaXMuX3ByZWZsaWdodFJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIGFzLFxuICAgICAgICAgICAgICAgIGNhY2hlOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgIHBhZ2VzLFxuICAgICAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gJ3Jld3JpdGUnKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAuLi5lZmZlY3QucGFyc2VkQXMucXVlcnlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlc29sdmVkQXMgPSBlZmZlY3QuYXNQYXRoO1xuICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gZWZmZWN0LnJlc29sdmVkSHJlZjtcbiAgICAgICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSBlZmZlY3QucmVzb2x2ZWRIcmVmO1xuICAgICAgICAgICAgICAgIHVybCA9ICgwLCBfdXRpbHMpLmZvcm1hdFdpdGhWYWxpZGF0aW9uKHBhcnNlZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVmZmVjdC50eXBlID09PSAncmVkaXJlY3QnICYmIGVmZmVjdC5uZXdBcykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYW5nZShtZXRob2QsIGVmZmVjdC5uZXdVcmwsIGVmZmVjdC5uZXdBcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVmZmVjdC50eXBlID09PSAncmVkaXJlY3QnICYmIGVmZmVjdC5kZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZWZmZWN0LmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKT0+e1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlZmZlY3QudHlwZSA9PT0gJ3JlZnJlc2gnICYmIGFzICE9PSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGFzO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKT0+e1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvdXRlID0gKDAsIF9ub3JtYWxpemVUcmFpbGluZ1NsYXNoKS5yZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChwYXRobmFtZSk7XG4gICAgICAgIGlmICgoMCwgX2lzRHluYW1pYykuaXNEeW5hbWljUm91dGUocm91dGUpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRBcyA9ICgwLCBfcGFyc2VSZWxhdGl2ZVVybCkucGFyc2VSZWxhdGl2ZVVybChyZXNvbHZlZEFzKTtcbiAgICAgICAgICAgIGNvbnN0IGFzUGF0aG5hbWUgPSBwYXJzZWRBcy5wYXRobmFtZTtcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlUmVnZXggPSAoMCwgX3JvdXRlUmVnZXgpLmdldFJvdXRlUmVnZXgocm91dGUpO1xuICAgICAgICAgICAgY29uc3Qgcm91dGVNYXRjaCA9ICgwLCBfcm91dGVNYXRjaGVyKS5nZXRSb3V0ZU1hdGNoZXIocm91dGVSZWdleCkoYXNQYXRobmFtZSk7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRJbnRlcnBvbGF0ZSA9IHJvdXRlID09PSBhc1BhdGhuYW1lO1xuICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdGVkQXMgPSBzaG91bGRJbnRlcnBvbGF0ZSA/IGludGVycG9sYXRlQXMocm91dGUsIGFzUGF0aG5hbWUsIHF1ZXJ5KSA6IHtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIXJvdXRlTWF0Y2ggfHwgc2hvdWxkSW50ZXJwb2xhdGUgJiYgIWludGVycG9sYXRlZEFzLnJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pc3NpbmdQYXJhbXMgPSBPYmplY3Qua2V5cyhyb3V0ZVJlZ2V4Lmdyb3VwcykuZmlsdGVyKChwYXJhbSk9PiFxdWVyeVtwYXJhbV1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChtaXNzaW5nUGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtzaG91bGRJbnRlcnBvbGF0ZSA/IGBJbnRlcnBvbGF0aW5nIGhyZWZgIDogYE1pc21hdGNoaW5nIFxcYGFzXFxgIGFuZCBcXGBocmVmXFxgYH0gZmFpbGVkIHRvIG1hbnVhbGx5IHByb3ZpZGUgYCArIGB0aGUgcGFyYW1zOiAke21pc3NpbmdQYXJhbXMuam9pbignLCAnKX0gaW4gdGhlIFxcYGhyZWZcXGAncyBcXGBxdWVyeVxcYGApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigoc2hvdWxkSW50ZXJwb2xhdGUgPyBgVGhlIHByb3ZpZGVkIFxcYGhyZWZcXGAgKCR7dXJsfSkgdmFsdWUgaXMgbWlzc2luZyBxdWVyeSB2YWx1ZXMgKCR7bWlzc2luZ1BhcmFtcy5qb2luKCcsICcpfSkgdG8gYmUgaW50ZXJwb2xhdGVkIHByb3Blcmx5LiBgIDogYFRoZSBwcm92aWRlZCBcXGBhc1xcYCB2YWx1ZSAoJHthc1BhdGhuYW1lfSkgaXMgaW5jb21wYXRpYmxlIHdpdGggdGhlIFxcYGhyZWZcXGAgdmFsdWUgKCR7cm91dGV9KS4gYCkgKyBgUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy8ke3Nob3VsZEludGVycG9sYXRlID8gJ2hyZWYtaW50ZXJwb2xhdGlvbi1mYWlsZWQnIDogJ2luY29tcGF0aWJsZS1ocmVmLWFzJ31gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNob3VsZEludGVycG9sYXRlKSB7XG4gICAgICAgICAgICAgICAgYXMgPSAoMCwgX3V0aWxzKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgICAgICB9LCBwYXJzZWRBcywge1xuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogaW50ZXJwb2xhdGVkQXMucmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogb21pdFBhcm1zRnJvbVF1ZXJ5KHF1ZXJ5LCBpbnRlcnBvbGF0ZWRBcy5wYXJhbXMpXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBNZXJnZSBwYXJhbXMgaW50byBgcXVlcnlgLCBvdmVyd3JpdGluZyBhbnkgc3BlY2lmaWVkIGluIHNlYXJjaFxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocXVlcnksIHJvdXRlTWF0Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFJvdXRlci5ldmVudHMuZW1pdCgncm91dGVDaGFuZ2VTdGFydCcsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZWYsIHJlZjE7XG4gICAgICAgICAgICBsZXQgcm91dGVJbmZvID0gYXdhaXQgdGhpcy5nZXRSb3V0ZUluZm8ocm91dGUsIHBhdGhuYW1lLCBxdWVyeSwgYXMsIHJlc29sdmVkQXMsIHJvdXRlUHJvcHMpO1xuICAgICAgICAgICAgbGV0IHsgZXJyb3IgLCBwcm9wcyAsIF9fTl9TU0cgLCBfX05fU1NQICB9ID0gcm91dGVJbmZvO1xuICAgICAgICAgICAgLy8gaGFuZGxlIHJlZGlyZWN0IG9uIGNsaWVudC10cmFuc2l0aW9uXG4gICAgICAgICAgICBpZiAoKF9fTl9TU0cgfHwgX19OX1NTUCkgJiYgcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHMucGFnZVByb3BzICYmIHByb3BzLnBhZ2VQcm9wcy5fX05fUkVESVJFQ1QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdGluYXRpb24gPSBwcm9wcy5wYWdlUHJvcHMuX19OX1JFRElSRUNUO1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBkZXN0aW5hdGlvbiBpcyBpbnRlcm5hbCAocmVzb2x2ZXMgdG8gYSBwYWdlKSBhbmQgYXR0ZW1wdFxuICAgICAgICAgICAgICAgICAgICAvLyBjbGllbnQtbmF2aWdhdGlvbiBpZiBpdCBpcyBmYWxsaW5nIGJhY2sgdG8gaGFyZCBuYXZpZ2F0aW9uIGlmXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0J3Mgbm90XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvbi5zdGFydHNXaXRoKCcvJykgJiYgcHJvcHMucGFnZVByb3BzLl9fTl9SRURJUkVDVF9CQVNFX1BBVEggIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRIcmVmID0gKDAsIF9wYXJzZVJlbGF0aXZlVXJsKS5wYXJzZVJlbGF0aXZlVXJsKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZEhyZWYucGF0aG5hbWUgPSByZXNvbHZlRHluYW1pY1JvdXRlKHBhcnNlZEhyZWYucGF0aG5hbWUsIHBhZ2VzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdXJsOiBuZXdVcmwgLCBhczogbmV3QXMgIH0gPSBwcmVwYXJlVXJsQXModGhpcywgZGVzdGluYXRpb24sIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYW5nZShtZXRob2QsIG5ld1VybCwgbmV3QXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKT0+e1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pc1ByZXZpZXcgPSAhIXByb3BzLl9fTl9QUkVWSUVXO1xuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBTU0cgZGF0YSA0MDRcbiAgICAgICAgICAgICAgICBpZiAocHJvcHMubm90Rm91bmQgPT09IFNTR19EQVRBX05PVF9GT1VORCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbm90Rm91bmRSb3V0ZTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZmV0Y2hDb21wb25lbnQoJy80MDQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdEZvdW5kUm91dGUgPSAnLzQwNCc7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdEZvdW5kUm91dGUgPSAnL19lcnJvcic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcm91dGVJbmZvID0gYXdhaXQgdGhpcy5nZXRSb3V0ZUluZm8obm90Rm91bmRSb3V0ZSwgbm90Rm91bmRSb3V0ZSwgcXVlcnksIGFzLCByZXNvbHZlZEFzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFsbG93OiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoJ2JlZm9yZUhpc3RvcnlDaGFuZ2UnLCBhcywgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKG1ldGhvZCwgdXJsLCBhcywgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5faCAmJiBwYXRobmFtZSA9PT0gJy9fZXJyb3InICYmICgocmVmID0gc2VsZi5fX05FWFRfREFUQV9fLnByb3BzKSA9PT0gbnVsbCB8fCByZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChyZWYxID0gcmVmLnBhZ2VQcm9wcykgPT09IG51bGwgfHwgcmVmMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVmMS5zdGF0dXNDb2RlKSA9PT0gNTAwICYmIChwcm9wcyA9PT0gbnVsbCB8fCBwcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvcHMucGFnZVByb3BzKSkge1xuICAgICAgICAgICAgICAgIC8vIGVuc3VyZSBzdGF0dXNDb2RlIGlzIHN0aWxsIGNvcnJlY3QgZm9yIHN0YXRpYyA1MDAgcGFnZVxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdXBkYXRpbmcgcXVlcnkgaW5mb3JtYXRpb25cbiAgICAgICAgICAgICAgICBwcm9wcy5wYWdlUHJvcHMuc3RhdHVzQ29kZSA9IDUwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNoYWxsb3cgcm91dGluZyBpcyBvbmx5IGFsbG93ZWQgZm9yIHNhbWUgcGFnZSBVUkwgY2hhbmdlcy5cbiAgICAgICAgICAgIGNvbnN0IGlzVmFsaWRTaGFsbG93Um91dGUgPSBvcHRpb25zLnNoYWxsb3cgJiYgdGhpcy5yb3V0ZSA9PT0gcm91dGU7XG4gICAgICAgICAgICB2YXIgX3Njcm9sbDtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFNjcm9sbCA9IChfc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwpICE9PSBudWxsICYmIF9zY3JvbGwgIT09IHZvaWQgMCA/IF9zY3JvbGwgOiAhaXNWYWxpZFNoYWxsb3dSb3V0ZTtcbiAgICAgICAgICAgIGNvbnN0IHJlc2V0U2Nyb2xsID0gc2hvdWxkU2Nyb2xsID8ge1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgfSA6IG51bGw7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNldChyb3V0ZSwgcGF0aG5hbWUsIHF1ZXJ5LCBjbGVhbmVkQXMsIHJvdXRlSW5mbywgZm9yY2VkU2Nyb2xsICE9PSBudWxsICYmIGZvcmNlZFNjcm9sbCAhPT0gdm9pZCAwID8gZm9yY2VkU2Nyb2xsIDogcmVzZXRTY3JvbGwpLmNhdGNoKChlKT0+e1xuICAgICAgICAgICAgICAgIGlmIChlLmNhbmNlbGxlZCkgZXJyb3IgPSBlcnJvciB8fCBlO1xuICAgICAgICAgICAgICAgIGVsc2UgdGhyb3cgZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KCdyb3V0ZUNoYW5nZUVycm9yJywgZXJyb3IsIGNsZWFuZWRBcywgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyA9IHRoaXMubG9jYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFJvdXRlci5ldmVudHMuZW1pdCgncm91dGVDaGFuZ2VDb21wbGV0ZScsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChlcnIxKSB7XG4gICAgICAgICAgICBpZiAoKDAsIF9pc0Vycm9yKS5kZWZhdWx0KGVycjEpICYmIGVycjEuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGFuZ2VTdGF0ZShtZXRob2QsIHVybCwgYXMsIG9wdGlvbnMgPSB7XG4gICAgfSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuaGlzdG9yeSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBXYXJuaW5nOiB3aW5kb3cuaGlzdG9yeSBpcyBub3QgYXZhaWxhYmxlLmApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93Lmhpc3RvcnlbbWV0aG9kXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBXYXJuaW5nOiB3aW5kb3cuaGlzdG9yeS4ke21ldGhvZH0gaXMgbm90IGF2YWlsYWJsZWApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0aG9kICE9PSAncHVzaFN0YXRlJyB8fCAoMCwgX3V0aWxzKS5nZXRVUkwoKSAhPT0gYXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3NoYWxsb3cgPSBvcHRpb25zLnNoYWxsb3c7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeVttZXRob2RdKHtcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgYXMsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBfX046IHRydWUsXG4gICAgICAgICAgICAgICAgaWR4OiB0aGlzLl9pZHggPSBtZXRob2QgIT09ICdwdXNoU3RhdGUnID8gdGhpcy5faWR4IDogdGhpcy5faWR4ICsgMVxuICAgICAgICAgICAgfSwgLy8gTW9zdCBicm93c2VycyBjdXJyZW50bHkgaWdub3JlcyB0aGlzIHBhcmFtZXRlciwgYWx0aG91Z2ggdGhleSBtYXkgdXNlIGl0IGluIHRoZSBmdXR1cmUuXG4gICAgICAgICAgICAvLyBQYXNzaW5nIHRoZSBlbXB0eSBzdHJpbmcgaGVyZSBzaG91bGQgYmUgc2FmZSBhZ2FpbnN0IGZ1dHVyZSBjaGFuZ2VzIHRvIHRoZSBtZXRob2QuXG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGlzdG9yeS9yZXBsYWNlU3RhdGVcbiAgICAgICAgICAgICcnLCBhcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgaGFuZGxlUm91dGVJbmZvRXJyb3IoZXJyLCBwYXRobmFtZSwgcXVlcnksIGFzLCByb3V0ZVByb3BzLCBsb2FkRXJyb3JGYWlsKSB7XG4gICAgICAgIGlmIChlcnIuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAvLyBidWJibGUgdXAgY2FuY2VsbGF0aW9uIGVycm9yc1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgX3JvdXRlTG9hZGVyKS5pc0Fzc2V0RXJyb3IoZXJyKSB8fCBsb2FkRXJyb3JGYWlsKSB7XG4gICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoJ3JvdXRlQ2hhbmdlRXJyb3InLCBlcnIsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIC8vIElmIHdlIGNhbid0IGxvYWQgdGhlIHBhZ2UgaXQgY291bGQgYmUgb25lIG9mIGZvbGxvd2luZyByZWFzb25zXG4gICAgICAgICAgICAvLyAgMS4gUGFnZSBkb2Vzbid0IGV4aXN0c1xuICAgICAgICAgICAgLy8gIDIuIFBhZ2UgZG9lcyBleGlzdCBpbiBhIGRpZmZlcmVudCB6b25lXG4gICAgICAgICAgICAvLyAgMy4gSW50ZXJuYWwgZXJyb3Igd2hpbGUgbG9hZGluZyB0aGUgcGFnZVxuICAgICAgICAgICAgLy8gU28sIGRvaW5nIGEgaGFyZCByZWxvYWQgaXMgdGhlIHByb3BlciB3YXkgdG8gZGVhbCB3aXRoIHRoaXMuXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGFzO1xuICAgICAgICAgICAgLy8gQ2hhbmdpbmcgdGhlIFVSTCBkb2Vzbid0IGJsb2NrIGV4ZWN1dGluZyB0aGUgY3VycmVudCBjb2RlIHBhdGguXG4gICAgICAgICAgICAvLyBTbyBsZXQncyB0aHJvdyBhIGNhbmNlbGxhdGlvbiBlcnJvciBzdG9wIHRoZSByb3V0aW5nIGxvZ2ljLlxuICAgICAgICAgICAgdGhyb3cgYnVpbGRDYW5jZWxsYXRpb25FcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgQ29tcG9uZW50O1xuICAgICAgICAgICAgbGV0IHN0eWxlU2hlZXRzO1xuICAgICAgICAgICAgbGV0IHByb3BzO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBDb21wb25lbnQgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBzdHlsZVNoZWV0cyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAoeyBwYWdlOiBDb21wb25lbnQgLCBzdHlsZVNoZWV0cyAgfSA9IGF3YWl0IHRoaXMuZmV0Y2hDb21wb25lbnQoJy9fZXJyb3InKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByb3V0ZUluZm8gPSB7XG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgIHN0eWxlU2hlZXRzLFxuICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCFyb3V0ZUluZm8ucHJvcHMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByb3V0ZUluZm8ucHJvcHMgPSBhd2FpdCB0aGlzLmdldEluaXRpYWxQcm9wcyhDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZ2lwRXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGVycm9yIHBhZ2UgYGdldEluaXRpYWxQcm9wc2A6ICcsIGdpcEVycik7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlSW5mby5wcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcm91dGVJbmZvO1xuICAgICAgICB9IGNhdGNoIChyb3V0ZUluZm9FcnIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVJvdXRlSW5mb0Vycm9yKCgwLCBfaXNFcnJvcikuZGVmYXVsdChyb3V0ZUluZm9FcnIpID8gcm91dGVJbmZvRXJyIDogbmV3IEVycm9yKHJvdXRlSW5mb0VyciArICcnKSwgcGF0aG5hbWUsIHF1ZXJ5LCBhcywgcm91dGVQcm9wcywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0Um91dGVJbmZvKHJvdXRlLCBwYXRobmFtZSwgcXVlcnksIGFzLCByZXNvbHZlZEFzLCByb3V0ZVByb3BzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ1JvdXRlSW5mbyA9IHRoaXMuY29tcG9uZW50c1tyb3V0ZV07XG4gICAgICAgICAgICBpZiAocm91dGVQcm9wcy5zaGFsbG93ICYmIGV4aXN0aW5nUm91dGVJbmZvICYmIHRoaXMucm91dGUgPT09IHJvdXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nUm91dGVJbmZvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNhY2hlZFJvdXRlSW5mbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIC8vIGNhbiBvbmx5IHVzZSBub24taW5pdGlhbCByb3V0ZSBpbmZvXG4gICAgICAgICAgICAvLyBjYW5ub3QgcmV1c2Ugcm91dGUgaW5mbyBpbiBkZXZlbG9wbWVudCBzaW5jZSBpdCBjYW4gY2hhbmdlIGFmdGVyIEhNUlxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnICYmIGV4aXN0aW5nUm91dGVJbmZvICYmICEoJ2luaXRpYWwnIGluIGV4aXN0aW5nUm91dGVJbmZvKSkge1xuICAgICAgICAgICAgICAgIGNhY2hlZFJvdXRlSW5mbyA9IGV4aXN0aW5nUm91dGVJbmZvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgcm91dGVJbmZvID0gY2FjaGVkUm91dGVJbmZvIHx8IGF3YWl0IHRoaXMuZmV0Y2hDb21wb25lbnQocm91dGUpLnRoZW4oKHJlcyk9Pih7XG4gICAgICAgICAgICAgICAgICAgIENvbXBvbmVudDogcmVzLnBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlU2hlZXRzOiByZXMuc3R5bGVTaGVldHMsXG4gICAgICAgICAgICAgICAgICAgIF9fTl9TU0c6IHJlcy5tb2QuX19OX1NTRyxcbiAgICAgICAgICAgICAgICAgICAgX19OX1NTUDogcmVzLm1vZC5fX05fU1NQLFxuICAgICAgICAgICAgICAgICAgICBfX05fUlNDOiAhIXJlcy5wYWdlLl9fbmV4dF9yc2NfX1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgeyBDb21wb25lbnQgLCBfX05fU1NHICwgX19OX1NTUCAsIF9fTl9SU0MgIH0gPSByb3V0ZUluZm87XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgaXNWYWxpZEVsZW1lbnRUeXBlICB9ID0gcmVxdWlyZSgnbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWlzJyk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudFR5cGUoQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBkZWZhdWx0IGV4cG9ydCBpcyBub3QgYSBSZWFjdCBDb21wb25lbnQgaW4gcGFnZTogXCIke3BhdGhuYW1lfVwiYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRhdGFIcmVmO1xuICAgICAgICAgICAgaWYgKF9fTl9TU0cgfHwgX19OX1NTUCB8fCBfX05fUlNDKSB7XG4gICAgICAgICAgICAgICAgZGF0YUhyZWYgPSB0aGlzLnBhZ2VMb2FkZXIuZ2V0RGF0YUhyZWYoe1xuICAgICAgICAgICAgICAgICAgICBocmVmOiAoMCwgX3V0aWxzKS5mb3JtYXRXaXRoVmFsaWRhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBhc1BhdGg6IHJlc29sdmVkQXMsXG4gICAgICAgICAgICAgICAgICAgIHNzZzogX19OX1NTRyxcbiAgICAgICAgICAgICAgICAgICAgcnNjOiBfX05fUlNDLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IGF3YWl0IHRoaXMuX2dldERhdGEoKCk9Pl9fTl9TU0cgfHwgX19OX1NTUCA/IGZldGNoTmV4dERhdGEoZGF0YUhyZWYsIHRoaXMuaXNTc3IsIGZhbHNlLCBfX05fU1NHID8gdGhpcy5zZGMgOiB0aGlzLnNkciwgISFfX05fU1NHICYmICF0aGlzLmlzUHJldmlldykgOiB0aGlzLmdldEluaXRpYWxQcm9wcyhDb21wb25lbnQsIC8vIHdlIHByb3ZpZGUgQXBwVHJlZSBsYXRlciBzbyB0aGlzIG5lZWRzIHRvIGJlIGBhbnlgXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgICAgIGFzUGF0aDogYXMsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZTogdGhpcy5sb2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZXM6IHRoaXMubG9jYWxlcyxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdExvY2FsZTogdGhpcy5kZWZhdWx0TG9jYWxlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoX19OX1JTQykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZnJlc2ggLCBkYXRhICB9ID0gYXdhaXQgdGhpcy5fZ2V0RGF0YSgoKT0+dGhpcy5fZ2V0RmxpZ2h0RGF0YShkYXRhSHJlZilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHByb3BzLnBhZ2VQcm9wcyA9IE9iamVjdC5hc3NpZ24ocHJvcHMucGFnZVByb3BzLCB7XG4gICAgICAgICAgICAgICAgICAgIF9fZmxpZ2h0X3NlcmlhbGl6ZWRfXzogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgX19mbGlnaHRfZnJlc2hfXzogZnJlc2hcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvdXRlSW5mby5wcm9wcyA9IHByb3BzO1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzW3JvdXRlXSA9IHJvdXRlSW5mbztcbiAgICAgICAgICAgIHJldHVybiByb3V0ZUluZm87XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlUm91dGVJbmZvRXJyb3IoKDAsIF9pc0Vycm9yKS5nZXRQcm9wZXJFcnJvcihlcnIpLCBwYXRobmFtZSwgcXVlcnksIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQocm91dGUsIHBhdGhuYW1lLCBxdWVyeSwgYXMsIGRhdGEsIHJlc2V0U2Nyb2xsKSB7XG4gICAgICAgIHRoaXMuaXNGYWxsYmFjayA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJvdXRlID0gcm91dGU7XG4gICAgICAgIHRoaXMucGF0aG5hbWUgPSBwYXRobmFtZTtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICB0aGlzLmFzUGF0aCA9IGFzO1xuICAgICAgICByZXR1cm4gdGhpcy5ub3RpZnkoZGF0YSwgcmVzZXRTY3JvbGwpO1xuICAgIH1cbiAgICAvKipcbiAgICogQ2FsbGJhY2sgdG8gZXhlY3V0ZSBiZWZvcmUgcmVwbGFjaW5nIHJvdXRlciBzdGF0ZVxuICAgKiBAcGFyYW0gY2IgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWRcbiAgICovIGJlZm9yZVBvcFN0YXRlKGNiKSB7XG4gICAgICAgIHRoaXMuX2JwcyA9IGNiO1xuICAgIH1cbiAgICBvbmx5QUhhc2hDaGFuZ2UoYXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFzUGF0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBbb2xkVXJsTm9IYXNoLCBvbGRIYXNoXSA9IHRoaXMuYXNQYXRoLnNwbGl0KCcjJyk7XG4gICAgICAgIGNvbnN0IFtuZXdVcmxOb0hhc2gsIG5ld0hhc2hdID0gYXMuc3BsaXQoJyMnKTtcbiAgICAgICAgLy8gTWFrZXMgc3VyZSB3ZSBzY3JvbGwgdG8gdGhlIHByb3ZpZGVkIGhhc2ggaWYgdGhlIHVybC9oYXNoIGFyZSB0aGUgc2FtZVxuICAgICAgICBpZiAobmV3SGFzaCAmJiBvbGRVcmxOb0hhc2ggPT09IG5ld1VybE5vSGFzaCAmJiBvbGRIYXNoID09PSBuZXdIYXNoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgdXJscyBhcmUgY2hhbmdlLCB0aGVyZSdzIG1vcmUgdGhhbiBhIGhhc2ggY2hhbmdlXG4gICAgICAgIGlmIChvbGRVcmxOb0hhc2ggIT09IG5ld1VybE5vSGFzaCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBoYXNoIGhhcyBjaGFuZ2VkLCB0aGVuIGl0J3MgYSBoYXNoIG9ubHkgY2hhbmdlLlxuICAgICAgICAvLyBUaGlzIGNoZWNrIGlzIG5lY2Vzc2FyeSB0byBoYW5kbGUgYm90aCB0aGUgZW50ZXIgYW5kXG4gICAgICAgIC8vIGxlYXZlIGhhc2ggPT09ICcnIGNhc2VzLiBUaGUgaWRlbnRpdHkgY2FzZSBmYWxscyB0aHJvdWdoXG4gICAgICAgIC8vIGFuZCBpcyB0cmVhdGVkIGFzIGEgbmV4dCByZWxvYWQuXG4gICAgICAgIHJldHVybiBvbGRIYXNoICE9PSBuZXdIYXNoO1xuICAgIH1cbiAgICBzY3JvbGxUb0hhc2goYXMpIHtcbiAgICAgICAgY29uc3QgWywgaGFzaCA9ICcnXSA9IGFzLnNwbGl0KCcjJyk7XG4gICAgICAgIC8vIFNjcm9sbCB0byB0b3AgaWYgdGhlIGhhc2ggaXMganVzdCBgI2Agd2l0aCBubyB2YWx1ZSBvciBgI3RvcGBcbiAgICAgICAgLy8gVG8gbWlycm9yIGJyb3dzZXJzXG4gICAgICAgIGlmIChoYXNoID09PSAnJyB8fCBoYXNoID09PSAndG9wJykge1xuICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpcnN0IHdlIGNoZWNrIGlmIHRoZSBlbGVtZW50IGJ5IGlkIGlzIGZvdW5kXG4gICAgICAgIGNvbnN0IGlkRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoKTtcbiAgICAgICAgaWYgKGlkRWwpIHtcbiAgICAgICAgICAgIGlkRWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGVsZW1lbnQgd2l0aCB0aGUgaWQsIHdlIGNoZWNrIHRoZSBgbmFtZWAgcHJvcGVydHlcbiAgICAgICAgLy8gVG8gbWlycm9yIGJyb3dzZXJzXG4gICAgICAgIGNvbnN0IG5hbWVFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKGhhc2gpWzBdO1xuICAgICAgICBpZiAobmFtZUVsKSB7XG4gICAgICAgICAgICBuYW1lRWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cmxJc05ldyhhc1BhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXNQYXRoICE9PSBhc1BhdGg7XG4gICAgfVxuICAgIC8qKlxuICAgKiBQcmVmZXRjaCBwYWdlIGNvZGUsIHlvdSBtYXkgd2FpdCBmb3IgdGhlIGRhdGEgZHVyaW5nIHBhZ2UgcmVuZGVyaW5nLlxuICAgKiBUaGlzIGZlYXR1cmUgb25seSB3b3JrcyBpbiBwcm9kdWN0aW9uIVxuICAgKiBAcGFyYW0gdXJsIHRoZSBocmVmIG9mIHByZWZldGNoZWQgcGFnZVxuICAgKiBAcGFyYW0gYXNQYXRoIHRoZSBhcyBwYXRoIG9mIHRoZSBwcmVmZXRjaGVkIHBhZ2VcbiAgICovIGFzeW5jIHByZWZldGNoKHVybCwgYXNQYXRoID0gdXJsLCBvcHRpb25zID0ge1xuICAgIH0pIHtcbiAgICAgICAgbGV0IHBhcnNlZCA9ICgwLCBfcGFyc2VSZWxhdGl2ZVVybCkucGFyc2VSZWxhdGl2ZVVybCh1cmwpO1xuICAgICAgICBsZXQgeyBwYXRobmFtZSAsIHF1ZXJ5ICB9ID0gcGFyc2VkO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubG9jYWxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gKDAsIF9ub3JtYWxpemVMb2NhbGVQYXRoKS5ub3JtYWxpemVMb2NhbGVQYXRoKHBhdGhuYW1lLCB0aGlzLmxvY2FsZXMpLnBhdGhuYW1lO1xuICAgICAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9IHBhdGhuYW1lO1xuICAgICAgICAgICAgICAgIHVybCA9ICgwLCBfdXRpbHMpLmZvcm1hdFdpdGhWYWxpZGF0aW9uKHBhcnNlZCk7XG4gICAgICAgICAgICAgICAgbGV0IHBhcnNlZEFzID0gKDAsIF9wYXJzZVJlbGF0aXZlVXJsKS5wYXJzZVJlbGF0aXZlVXJsKGFzUGF0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxlUGF0aFJlc3VsdCA9ICgwLCBfbm9ybWFsaXplTG9jYWxlUGF0aCkubm9ybWFsaXplTG9jYWxlUGF0aChwYXJzZWRBcy5wYXRobmFtZSwgdGhpcy5sb2NhbGVzKTtcbiAgICAgICAgICAgICAgICBwYXJzZWRBcy5wYXRobmFtZSA9IGxvY2FsZVBhdGhSZXN1bHQucGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5sb2NhbGUgPSBsb2NhbGVQYXRoUmVzdWx0LmRldGVjdGVkTG9jYWxlIHx8IHRoaXMuZGVmYXVsdExvY2FsZTtcbiAgICAgICAgICAgICAgICBhc1BhdGggPSAoMCwgX3V0aWxzKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihwYXJzZWRBcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFnZXMgPSBhd2FpdCB0aGlzLnBhZ2VMb2FkZXIuZ2V0UGFnZUxpc3QoKTtcbiAgICAgICAgbGV0IHJlc29sdmVkQXMgPSBhc1BhdGg7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSEFTX1JFV1JJVEVTICYmIGFzUGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgIGxldCByZXdyaXRlcztcbiAgICAgICAgICAgICh7IF9fcmV3cml0ZXM6IHJld3JpdGVzICB9ID0gYXdhaXQgKDAsIF9yb3V0ZUxvYWRlcikuZ2V0Q2xpZW50QnVpbGRNYW5pZmVzdCgpKTtcbiAgICAgICAgICAgIGNvbnN0IHJld3JpdGVzUmVzdWx0ID0gKDAsIF9yZXNvbHZlUmV3cml0ZXMpLmRlZmF1bHQoYWRkQmFzZVBhdGgoYWRkTG9jYWxlKGFzUGF0aCwgdGhpcy5sb2NhbGUpKSwgcGFnZXMsIHJld3JpdGVzLCBwYXJzZWQucXVlcnksIChwKT0+cmVzb2x2ZUR5bmFtaWNSb3V0ZShwLCBwYWdlcylcbiAgICAgICAgICAgICwgdGhpcy5sb2NhbGVzKTtcbiAgICAgICAgICAgIHJlc29sdmVkQXMgPSBkZWxMb2NhbGUoZGVsQmFzZVBhdGgocmV3cml0ZXNSZXN1bHQuYXNQYXRoKSwgdGhpcy5sb2NhbGUpO1xuICAgICAgICAgICAgaWYgKHJld3JpdGVzUmVzdWx0Lm1hdGNoZWRQYWdlICYmIHJld3JpdGVzUmVzdWx0LnJlc29sdmVkSHJlZikge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgZGlyZWN0bHkgbWF0Y2hlcyBhIHBhZ2Ugd2UgbmVlZCB0byB1cGRhdGUgdGhlIGhyZWYgdG9cbiAgICAgICAgICAgICAgICAvLyBhbGxvdyB0aGUgY29ycmVjdCBwYWdlIGNodW5rIHRvIGJlIGxvYWRlZFxuICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gcmV3cml0ZXNSZXN1bHQucmVzb2x2ZWRIcmVmO1xuICAgICAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9IHBhdGhuYW1lO1xuICAgICAgICAgICAgICAgIHVybCA9ICgwLCBfdXRpbHMpLmZvcm1hdFdpdGhWYWxpZGF0aW9uKHBhcnNlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSByZXNvbHZlRHluYW1pY1JvdXRlKHBhcnNlZC5wYXRobmFtZSwgcGFnZXMpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZC5wYXRobmFtZSAhPT0gcGF0aG5hbWUpIHtcbiAgICAgICAgICAgICAgICBwYXRobmFtZSA9IHBhcnNlZC5wYXRobmFtZTtcbiAgICAgICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSBwYXRobmFtZTtcbiAgICAgICAgICAgICAgICB1cmwgPSAoMCwgX3V0aWxzKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihwYXJzZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFByZWZldGNoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gZGV2ZWxvcG1lbnQgbW9kZSBiZWNhdXNlIGl0IHdvdWxkIHRyaWdnZXIgb24tZGVtYW5kLWVudHJpZXNcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlZmZlY3RzID0gYXdhaXQgdGhpcy5fcHJlZmxpZ2h0UmVxdWVzdCh7XG4gICAgICAgICAgICBhczogYWRkQmFzZVBhdGgoYXNQYXRoKSxcbiAgICAgICAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgICAgICAgcGFnZXMsXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZWZmZWN0cy50eXBlID09PSAncmV3cml0ZScpIHtcbiAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9IGVmZmVjdHMucmVzb2x2ZWRIcmVmO1xuICAgICAgICAgICAgcGF0aG5hbWUgPSBlZmZlY3RzLnJlc29sdmVkSHJlZjtcbiAgICAgICAgICAgIHF1ZXJ5ID0ge1xuICAgICAgICAgICAgICAgIC4uLnF1ZXJ5LFxuICAgICAgICAgICAgICAgIC4uLmVmZmVjdHMucGFyc2VkQXMucXVlcnlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlZEFzID0gZWZmZWN0cy5hc1BhdGg7XG4gICAgICAgICAgICB1cmwgPSAoMCwgX3V0aWxzKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihwYXJzZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvdXRlID0gKDAsIF9ub3JtYWxpemVUcmFpbGluZ1NsYXNoKS5yZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChwYXRobmFtZSk7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRoaXMucGFnZUxvYWRlci5faXNTc2cocm91dGUpLnRoZW4oKGlzU3NnKT0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1NzZyA/IGZldGNoTmV4dERhdGEodGhpcy5wYWdlTG9hZGVyLmdldERhdGFIcmVmKHtcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogdXJsLFxuICAgICAgICAgICAgICAgICAgICBhc1BhdGg6IHJlc29sdmVkQXMsXG4gICAgICAgICAgICAgICAgICAgIHNzZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlOiB0eXBlb2Ygb3B0aW9ucy5sb2NhbGUgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5sb2NhbGUgOiB0aGlzLmxvY2FsZVxuICAgICAgICAgICAgICAgIH0pLCBmYWxzZSwgZmFsc2UsIHRoaXMuc2RjLCB0cnVlKSA6IGZhbHNlO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLnBhZ2VMb2FkZXJbb3B0aW9ucy5wcmlvcml0eSA/ICdsb2FkUGFnZScgOiAncHJlZmV0Y2gnXShyb3V0ZSksIFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgYXN5bmMgZmV0Y2hDb21wb25lbnQocm91dGUpIHtcbiAgICAgICAgbGV0IGNhbmNlbGxlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjYW5jZWwgPSB0aGlzLmNsYyA9ICgpPT57XG4gICAgICAgICAgICBjYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBoYW5kbGVDYW5jZWxsZWQgPSAoKT0+e1xuICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBBYm9ydCBmZXRjaGluZyBjb21wb25lbnQgZm9yIHJvdXRlOiBcIiR7cm91dGV9XCJgKTtcbiAgICAgICAgICAgICAgICBlcnJvci5jYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbmNlbCA9PT0gdGhpcy5jbGMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnRSZXN1bHQgPSBhd2FpdCB0aGlzLnBhZ2VMb2FkZXIubG9hZFBhZ2Uocm91dGUpO1xuICAgICAgICAgICAgaGFuZGxlQ2FuY2VsbGVkKCk7XG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50UmVzdWx0O1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGhhbmRsZUNhbmNlbGxlZCgpO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9nZXREYXRhKGZuKSB7XG4gICAgICAgIGxldCBjYW5jZWxsZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgY2FuY2VsID0gKCk9PntcbiAgICAgICAgICAgIGNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2xjID0gY2FuY2VsO1xuICAgICAgICByZXR1cm4gZm4oKS50aGVuKChkYXRhKT0+e1xuICAgICAgICAgICAgaWYgKGNhbmNlbCA9PT0gdGhpcy5jbGMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKCdMb2FkaW5nIGluaXRpYWwgcHJvcHMgY2FuY2VsbGVkJyk7XG4gICAgICAgICAgICAgICAgZXJyLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0RmxpZ2h0RGF0YShkYXRhSHJlZikge1xuICAgICAgICAvLyBEbyBub3QgY2FjaGUgUlNDIGZsaWdodCByZXNwb25zZSBzaW5jZSBpdCdzIG5vdCBhIHN0YXRpYyByZXNvdXJjZVxuICAgICAgICByZXR1cm4gZmV0Y2hOZXh0RGF0YShkYXRhSHJlZiwgdHJ1ZSwgdHJ1ZSwgdGhpcy5zZGMsIGZhbHNlKS50aGVuKChzZXJpYWxpemVkKT0+e1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBmcmVzaDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBzZXJpYWxpemVkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgX3ByZWZsaWdodFJlcXVlc3Qob3B0aW9ucykge1xuICAgICAgICB2YXIgcmVmO1xuICAgICAgICBjb25zdCBjbGVhbmVkQXMgPSBkZWxMb2NhbGUoaGFzQmFzZVBhdGgob3B0aW9ucy5hcykgPyBkZWxCYXNlUGF0aChvcHRpb25zLmFzKSA6IG9wdGlvbnMuYXMsIHRoaXMubG9jYWxlKTtcbiAgICAgICAgY29uc3QgZm5zID0gYXdhaXQgdGhpcy5wYWdlTG9hZGVyLmdldE1pZGRsZXdhcmVMaXN0KCk7XG4gICAgICAgIGNvbnN0IHJlcXVpcmVzUHJlZmxpZ2h0ID0gZm5zLnNvbWUoKFttaWRkbGV3YXJlLCBpc1NTUl0pPT57XG4gICAgICAgICAgICByZXR1cm4gKDAsIF9yb3V0ZU1hdGNoZXIpLmdldFJvdXRlTWF0Y2hlcigoMCwgX2dldE1pZGRsZXdhcmVSZWdleCkuZ2V0TWlkZGxld2FyZVJlZ2V4KG1pZGRsZXdhcmUsICFpc1NTUikpKGNsZWFuZWRBcyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlcXVpcmVzUHJlZmxpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICduZXh0J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmVmbGlnaHQgPSBhd2FpdCB0aGlzLl9nZXRQcmVmbGlnaHREYXRhKHtcbiAgICAgICAgICAgIHByZWZsaWdodEhyZWY6IG9wdGlvbnMuYXMsXG4gICAgICAgICAgICBzaG91bGRDYWNoZTogb3B0aW9ucy5jYWNoZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKChyZWYgPSBwcmVmbGlnaHQucmV3cml0ZSkgPT09IG51bGwgfHwgcmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSAoMCwgX3BhcnNlUmVsYXRpdmVVcmwpLnBhcnNlUmVsYXRpdmVVcmwoKDAsIF9ub3JtYWxpemVMb2NhbGVQYXRoKS5ub3JtYWxpemVMb2NhbGVQYXRoKGhhc0Jhc2VQYXRoKHByZWZsaWdodC5yZXdyaXRlKSA/IGRlbEJhc2VQYXRoKHByZWZsaWdodC5yZXdyaXRlKSA6IHByZWZsaWdodC5yZXdyaXRlLCB0aGlzLmxvY2FsZXMpLnBhdGhuYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IGZzUGF0aG5hbWUgPSAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhcnNlZC5wYXRobmFtZSk7XG4gICAgICAgICAgICBsZXQgbWF0Y2hlZFBhZ2U7XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZWRIcmVmO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFnZXMuaW5jbHVkZXMoZnNQYXRobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVkUGFnZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRIcmVmID0gZnNQYXRobmFtZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRIcmVmID0gcmVzb2x2ZUR5bmFtaWNSb3V0ZShmc1BhdGhuYW1lLCBvcHRpb25zLnBhZ2VzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWRIcmVmICE9PSBwYXJzZWQucGF0aG5hbWUgJiYgb3B0aW9ucy5wYWdlcy5pbmNsdWRlcyhyZXNvbHZlZEhyZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZWRQYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyZXdyaXRlJyxcbiAgICAgICAgICAgICAgICBhc1BhdGg6IHBhcnNlZC5wYXRobmFtZSxcbiAgICAgICAgICAgICAgICBwYXJzZWRBczogcGFyc2VkLFxuICAgICAgICAgICAgICAgIG1hdGNoZWRQYWdlLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkSHJlZlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlZmxpZ2h0LnJlZGlyZWN0KSB7XG4gICAgICAgICAgICBpZiAocHJlZmxpZ2h0LnJlZGlyZWN0LnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsZWFuUmVkaXJlY3QgPSAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKCgwLCBfbm9ybWFsaXplTG9jYWxlUGF0aCkubm9ybWFsaXplTG9jYWxlUGF0aChoYXNCYXNlUGF0aChwcmVmbGlnaHQucmVkaXJlY3QpID8gZGVsQmFzZVBhdGgocHJlZmxpZ2h0LnJlZGlyZWN0KSA6IHByZWZsaWdodC5yZWRpcmVjdCwgdGhpcy5sb2NhbGVzKS5wYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB1cmw6IG5ld1VybCAsIGFzOiBuZXdBcyAgfSA9IHByZXBhcmVVcmxBcyh0aGlzLCBjbGVhblJlZGlyZWN0LCBjbGVhblJlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmVkaXJlY3QnLFxuICAgICAgICAgICAgICAgICAgICBuZXdVcmwsXG4gICAgICAgICAgICAgICAgICAgIG5ld0FzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3JlZGlyZWN0JyxcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogcHJlZmxpZ2h0LnJlZGlyZWN0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIEZvciBTU1IgcmVxdWVzdHMsIHRoZXkgd2lsbCBiZSBoYW5kbGVkIGxpa2Ugbm9ybWFsIHBhZ2VzLlxuICAgICAgICBpZiAocHJlZmxpZ2h0LnJlZnJlc2ggJiYgIXByZWZsaWdodC5zc3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3JlZnJlc2gnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnbmV4dCdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2dldFByZWZsaWdodERhdGEocGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHsgcHJlZmxpZ2h0SHJlZiAsIHNob3VsZENhY2hlID1mYWxzZSAgfSA9IHBhcmFtcztcbiAgICAgICAgY29uc3QgeyBocmVmOiBjYWNoZUtleSAgfSA9IG5ldyBVUkwocHJlZmxpZ2h0SHJlZiwgd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiAhdGhpcy5pc1ByZXZpZXcgJiYgc2hvdWxkQ2FjaGUgJiYgdGhpcy5zZGVbY2FjaGVLZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuc2RlW2NhY2hlS2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZldGNoKHByZWZsaWdodEhyZWYsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0hFQUQnLFxuICAgICAgICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ3gtbWlkZGxld2FyZS1wcmVmbGlnaHQnOiAnMSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbigocmVzKT0+e1xuICAgICAgICAgICAgaWYgKCFyZXMub2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwcmVmbGlnaHQgcmVxdWVzdGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjYWNoZTogcmVzLmhlYWRlcnMuZ2V0KCd4LW1pZGRsZXdhcmUtY2FjaGUnKSxcbiAgICAgICAgICAgICAgICByZWRpcmVjdDogcmVzLmhlYWRlcnMuZ2V0KCdMb2NhdGlvbicpLFxuICAgICAgICAgICAgICAgIHJlZnJlc2g6IHJlcy5oZWFkZXJzLmhhcygneC1taWRkbGV3YXJlLXJlZnJlc2gnKSxcbiAgICAgICAgICAgICAgICByZXdyaXRlOiByZXMuaGVhZGVycy5nZXQoJ3gtbWlkZGxld2FyZS1yZXdyaXRlJyksXG4gICAgICAgICAgICAgICAgc3NyOiAhIXJlcy5oZWFkZXJzLmdldCgneC1taWRkbGV3YXJlLXNzcicpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KS50aGVuKChkYXRhKT0+e1xuICAgICAgICAgICAgaWYgKHNob3VsZENhY2hlICYmIGRhdGEuY2FjaGUgIT09ICduby1jYWNoZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNkZVtjYWNoZUtleV0gPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0pLmNhdGNoKChlcnIpPT57XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zZGVbY2FjaGVLZXldO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0SW5pdGlhbFByb3BzKENvbXBvbmVudCwgY3R4KSB7XG4gICAgICAgIGNvbnN0IHsgQ29tcG9uZW50OiBBcHAgIH0gPSB0aGlzLmNvbXBvbmVudHNbJy9fYXBwJ107XG4gICAgICAgIGNvbnN0IEFwcFRyZWUgPSB0aGlzLl93cmFwQXBwKEFwcCk7XG4gICAgICAgIGN0eC5BcHBUcmVlID0gQXBwVHJlZTtcbiAgICAgICAgcmV0dXJuICgwLCBfdXRpbHMpLmxvYWRHZXRJbml0aWFsUHJvcHMoQXBwLCB7XG4gICAgICAgICAgICBBcHBUcmVlLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgcm91dGVyOiB0aGlzLFxuICAgICAgICAgICAgY3R4XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhYm9ydENvbXBvbmVudExvYWQoYXMsIHJvdXRlUHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xjKSB7XG4gICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoJ3JvdXRlQ2hhbmdlRXJyb3InLCBidWlsZENhbmNlbGxhdGlvbkVycm9yKCksIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIHRoaXMuY2xjKCk7XG4gICAgICAgICAgICB0aGlzLmNsYyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbm90aWZ5KGRhdGEsIHJlc2V0U2Nyb2xsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1YihkYXRhLCB0aGlzLmNvbXBvbmVudHNbJy9fYXBwJ10uQ29tcG9uZW50LCByZXNldFNjcm9sbCk7XG4gICAgfVxufVxuUm91dGVyLmV2ZW50cyA9ICgwLCBfbWl0dCkuZGVmYXVsdCgpO1xuZXhwb3J0cy5kZWZhdWx0ID0gUm91dGVyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0RG9tYWluTG9jYWxlIiwiYWRkTG9jYWxlIiwiZGVsTG9jYWxlIiwiaGFzQmFzZVBhdGgiLCJhZGRCYXNlUGF0aCIsImRlbEJhc2VQYXRoIiwiaXNMb2NhbFVSTCIsImludGVycG9sYXRlQXMiLCJyZXNvbHZlSHJlZiIsImRlZmF1bHQiLCJfbm9ybWFsaXplVHJhaWxpbmdTbGFzaCIsInJlcXVpcmUiLCJfcm91dGVMb2FkZXIiLCJfaXNFcnJvciIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2Rlbm9ybWFsaXplUGFnZVBhdGgiLCJfbm9ybWFsaXplTG9jYWxlUGF0aCIsIl9taXR0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl91dGlscyIsIl9pc0R5bmFtaWMiLCJfcGFyc2VSZWxhdGl2ZVVybCIsIl9xdWVyeXN0cmluZyIsIl9yZXNvbHZlUmV3cml0ZXMiLCJfcm91dGVNYXRjaGVyIiwiX3JvdXRlUmVnZXgiLCJfZ2V0TWlkZGxld2FyZVJlZ2V4Iiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJzZXQiLCJkZXRlY3REb21haW5Mb2NhbGUiLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX0kxOE5fU1VQUE9SVCIsImJhc2VQYXRoIiwiX19ORVhUX1JPVVRFUl9CQVNFUEFUSCIsImJ1aWxkQ2FuY2VsbGF0aW9uRXJyb3IiLCJhc3NpZ24iLCJFcnJvciIsImNhbmNlbGxlZCIsImFkZFBhdGhQcmVmaXgiLCJwYXRoIiwicHJlZml4Iiwic3RhcnRzV2l0aCIsInBhdGhuYW1lIiwicGF0aE5vUXVlcnlIYXNoIiwibm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2giLCJzdWJzdHIiLCJsZW5ndGgiLCJsb2NhbGUiLCJsb2NhbGVzIiwiZG9tYWluTG9jYWxlcyIsIm5vcm1hbGl6ZUxvY2FsZVBhdGgiLCJkZXRlY3RlZExvY2FsZSIsImRldGVjdGVkRG9tYWluIiwidW5kZWZpbmVkIiwiaHR0cCIsImRvbWFpbiIsImRlZmF1bHRMb2NhbGUiLCJwYXRoTG93ZXIiLCJ0b0xvd2VyQ2FzZSIsImxvY2FsZUxvd2VyIiwicXVlcnlJbmRleCIsImluZGV4T2YiLCJoYXNoSW5kZXgiLCJzdWJzdHJpbmciLCJzbGljZSIsInVybCIsImxvY2F0aW9uT3JpZ2luIiwiZ2V0TG9jYXRpb25PcmlnaW4iLCJyZXNvbHZlZCIsIlVSTCIsIm9yaWdpbiIsIl8iLCJyb3V0ZSIsImFzUGF0aG5hbWUiLCJxdWVyeSIsImludGVycG9sYXRlZFJvdXRlIiwiZHluYW1pY1JlZ2V4IiwiZ2V0Um91dGVSZWdleCIsImR5bmFtaWNHcm91cHMiLCJncm91cHMiLCJkeW5hbWljTWF0Y2hlcyIsImdldFJvdXRlTWF0Y2hlciIsInBhcmFtcyIsImtleXMiLCJldmVyeSIsInBhcmFtIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJyZXBsYWNlZCIsIkFycmF5IiwiaXNBcnJheSIsInJlcGxhY2UiLCJtYXAiLCJzZWdtZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsInJlc3VsdCIsIm9taXRQYXJtc0Zyb21RdWVyeSIsImZpbHRlcmVkUXVlcnkiLCJmb3JFYWNoIiwiaW5jbHVkZXMiLCJyb3V0ZXIiLCJocmVmIiwicmVzb2x2ZUFzIiwiYmFzZSIsInVybEFzU3RyaW5nIiwiZm9ybWF0V2l0aFZhbGlkYXRpb24iLCJ1cmxQcm90b01hdGNoIiwibWF0Y2giLCJ1cmxBc1N0cmluZ05vUHJvdG8iLCJ1cmxQYXJ0cyIsInNwbGl0IiwiY29uc29sZSIsImVycm9yIiwibm9ybWFsaXplZFVybCIsIm5vcm1hbGl6ZVJlcGVhdGVkU2xhc2hlcyIsImFzUGF0aCIsImZpbmFsVXJsIiwiaW50ZXJwb2xhdGVkQXMiLCJpc0R5bmFtaWNSb3V0ZSIsInNlYXJjaFBhcmFtcyIsInNlYXJjaFBhcmFtc1RvVXJsUXVlcnkiLCJoYXNoIiwicmVzb2x2ZWRIcmVmIiwiXzEiLCJzdHJpcE9yaWdpbiIsInByZXBhcmVVcmxBcyIsImFzIiwicmVzb2x2ZWRBcyIsImhyZWZIYWRPcmlnaW4iLCJhc0hhZE9yaWdpbiIsInByZXBhcmVkVXJsIiwicHJlcGFyZWRBcyIsInJlc29sdmVEeW5hbWljUm91dGUiLCJwYWdlcyIsImNsZWFuUGF0aG5hbWUiLCJyZW1vdmVQYXRoVHJhaWxpbmdTbGFzaCIsImRlbm9ybWFsaXplUGFnZVBhdGgiLCJzb21lIiwicGFnZSIsInJlIiwidGVzdCIsIm1hbnVhbFNjcm9sbFJlc3RvcmF0aW9uIiwiX19ORVhUX1NDUk9MTF9SRVNUT1JBVElPTiIsIndpbmRvdyIsImhpc3RvcnkiLCJ2Iiwic2Vzc2lvblN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsIm4iLCJTU0dfREFUQV9OT1RfRk9VTkQiLCJTeW1ib2wiLCJmZXRjaFJldHJ5IiwiYXR0ZW1wdHMiLCJvcHRzIiwiZmV0Y2giLCJjcmVkZW50aWFscyIsInRoZW4iLCJyZXMiLCJvayIsInN0YXR1cyIsImpzb24iLCJkYXRhIiwibm90Rm91bmQiLCJ0ZXh0IiwiZmV0Y2hOZXh0RGF0YSIsImRhdGFIcmVmIiwiaXNTZXJ2ZXJSZW5kZXIiLCJpbmZsaWdodENhY2hlIiwicGVyc2lzdENhY2hlIiwiY2FjaGVLZXkiLCJsb2NhdGlvbiIsImNhdGNoIiwiZXJyIiwibWFya0Fzc2V0RXJyb3IiLCJSb3V0ZXIiLCJjb25zdHJ1Y3RvciIsImluaXRpYWxQcm9wcyIsInBhZ2VMb2FkZXIiLCJBcHAiLCJ3cmFwQXBwIiwiQ29tcG9uZW50Iiwic3Vic2NyaXB0aW9uIiwiaXNGYWxsYmFjayIsImlzUHJldmlldyIsInNkYyIsInNkciIsInNkZSIsIl9pZHgiLCJvblBvcFN0YXRlIiwiZSIsInN0YXRlIiwiY2hhbmdlU3RhdGUiLCJnZXRVUkwiLCJfX04iLCJmb3JjZWRTY3JvbGwiLCJvcHRpb25zIiwiaWR4IiwiSlNPTiIsInN0cmluZ2lmeSIsIngiLCJzZWxmIiwicGFnZVhPZmZzZXQiLCJ5IiwicGFnZVlPZmZzZXQiLCJnZXRJdGVtIiwicGFyc2UiLCJwYXJzZVJlbGF0aXZlVXJsIiwiaXNTc3IiLCJfYnBzIiwiY2hhbmdlIiwic2hhbGxvdyIsIl9zaGFsbG93IiwiY29tcG9uZW50cyIsInJlZiIsImluaXRpYWwiLCJwcm9wcyIsIl9fTl9TU0ciLCJfX05fU1NQIiwiX19OX1JTQyIsIl9fbmV4dF9yc2NfXyIsInN0eWxlU2hlZXRzIiwiZXZlbnRzIiwiYXV0b0V4cG9ydER5bmFtaWMiLCJfX05FWFRfREFUQV9fIiwiYXV0b0V4cG9ydCIsInN1YiIsImNsYyIsIl93cmFwQXBwIiwiaXNSZWFkeSIsImdzc3AiLCJnaXAiLCJhcHBHaXAiLCJnc3AiLCJzZWFyY2giLCJfX05FWFRfSEFTX1JFV1JJVEVTIiwiaXNMb2NhbGVEb21haW4iLCJob3N0bmFtZSIsIl9zaG91bGRSZXNvbHZlSHJlZiIsImFkZEV2ZW50TGlzdGVuZXIiLCJzY3JvbGxSZXN0b3JhdGlvbiIsInJlbG9hZCIsImJhY2siLCJwdXNoIiwibWV0aG9kIiwic2hvdWxkUmVzb2x2ZUhyZWYiLCJfaCIsInByZXZMb2NhbGUiLCJwYXJzZWRBcyIsImxvY2FsZVBhdGhSZXN1bHQiLCJkaWROYXZpZ2F0ZSIsImFzTm9CYXNlUGF0aCIsIlByb21pc2UiLCJTVCIsInBlcmZvcm1hbmNlIiwibWFyayIsInJvdXRlUHJvcHMiLCJfaW5GbGlnaHRSb3V0ZSIsImFib3J0Q29tcG9uZW50TG9hZCIsImNsZWFuZWRBcyIsImxvY2FsZUNoYW5nZSIsIm9ubHlBSGFzaENoYW5nZSIsImVtaXQiLCJzY3JvbGxUb0hhc2giLCJub3RpZnkiLCJwYXJzZWQiLCJyZXdyaXRlcyIsIl9fcmV3cml0ZXMiLCJhbGwiLCJnZXRQYWdlTGlzdCIsImdldENsaWVudEJ1aWxkTWFuaWZlc3QiLCJnZXRNaWRkbGV3YXJlTGlzdCIsInVybElzTmV3IiwicmV3cml0ZXNSZXN1bHQiLCJwIiwibWF0Y2hlZFBhZ2UiLCJlZmZlY3QiLCJfcHJlZmxpZ2h0UmVxdWVzdCIsImNhY2hlIiwidHlwZSIsIm5ld0FzIiwibmV3VXJsIiwiZGVzdGluYXRpb24iLCJyb3V0ZVJlZ2V4Iiwicm91dGVNYXRjaCIsInNob3VsZEludGVycG9sYXRlIiwibWlzc2luZ1BhcmFtcyIsImZpbHRlciIsIndhcm4iLCJyZWYxIiwicm91dGVJbmZvIiwiZ2V0Um91dGVJbmZvIiwicGFnZVByb3BzIiwiX19OX1JFRElSRUNUIiwiX19OX1JFRElSRUNUX0JBU0VfUEFUSCIsInBhcnNlZEhyZWYiLCJfX05fUFJFVklFVyIsIm5vdEZvdW5kUm91dGUiLCJmZXRjaENvbXBvbmVudCIsInN0YXR1c0NvZGUiLCJpc1ZhbGlkU2hhbGxvd1JvdXRlIiwiX3Njcm9sbCIsInNob3VsZFNjcm9sbCIsInNjcm9sbCIsInJlc2V0U2Nyb2xsIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJsYW5nIiwiZXJyMSIsImhhbmRsZVJvdXRlSW5mb0Vycm9yIiwibG9hZEVycm9yRmFpbCIsImlzQXNzZXRFcnJvciIsImdldEluaXRpYWxQcm9wcyIsImdpcEVyciIsInJvdXRlSW5mb0VyciIsImV4aXN0aW5nUm91dGVJbmZvIiwiY2FjaGVkUm91dGVJbmZvIiwibW9kIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiZ2V0RGF0YUhyZWYiLCJzc2ciLCJyc2MiLCJfZ2V0RGF0YSIsImZyZXNoIiwiX2dldEZsaWdodERhdGEiLCJfX2ZsaWdodF9zZXJpYWxpemVkX18iLCJfX2ZsaWdodF9mcmVzaF9fIiwiZ2V0UHJvcGVyRXJyb3IiLCJiZWZvcmVQb3BTdGF0ZSIsImNiIiwib2xkVXJsTm9IYXNoIiwib2xkSGFzaCIsIm5ld1VybE5vSGFzaCIsIm5ld0hhc2giLCJzY3JvbGxUbyIsImlkRWwiLCJnZXRFbGVtZW50QnlJZCIsInNjcm9sbEludG9WaWV3IiwibmFtZUVsIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJwcmVmZXRjaCIsImVmZmVjdHMiLCJfaXNTc2ciLCJpc1NzZyIsInByaW9yaXR5IiwiY2FuY2VsIiwiaGFuZGxlQ2FuY2VsbGVkIiwiY29tcG9uZW50UmVzdWx0IiwibG9hZFBhZ2UiLCJmbiIsInNlcmlhbGl6ZWQiLCJmbnMiLCJyZXF1aXJlc1ByZWZsaWdodCIsIm1pZGRsZXdhcmUiLCJpc1NTUiIsImdldE1pZGRsZXdhcmVSZWdleCIsInByZWZsaWdodCIsIl9nZXRQcmVmbGlnaHREYXRhIiwicHJlZmxpZ2h0SHJlZiIsInNob3VsZENhY2hlIiwicmV3cml0ZSIsImZzUGF0aG5hbWUiLCJyZWRpcmVjdCIsImNsZWFuUmVkaXJlY3QiLCJyZWZyZXNoIiwic3NyIiwicmVzb2x2ZSIsImhlYWRlcnMiLCJoYXMiLCJjdHgiLCJBcHBUcmVlIiwibG9hZEdldEluaXRpYWxQcm9wcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/router/router.js\n");

/***/ }),

/***/ "./pages/guilds.js":
/*!*************************!*\
  !*** ./pages/guilds.js ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getServerSideProps\": () => (/* binding */ getServerSideProps),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _assets_ChevronIcon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../assets/ChevronIcon */ \"./assets/ChevronIcon.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/head */ \"next/head\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _context_SettingsContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../context/SettingsContext */ \"./context/SettingsContext.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_context_SettingsContext__WEBPACK_IMPORTED_MODULE_4__]);\n_context_SettingsContext__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\nvar _jsxFileName = \"C:\\\\Dev\\\\calloutsevolved\\\\pages\\\\guilds.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nconst preload = {\n  '-N4G80rHunWzLf1IMz4n': {\n    defaultRoom: 'about',\n    description: 'Short and sweet description',\n    displayName: 'Name',\n    guildId: '-N4G80rHunWzLf1IMz4n',\n    guildPhotoURL: 'https://pbs.twimg.com/profile_images/1100553496124887040/0hf7Nd-g_400x400.jpg',\n    isPublic: true,\n    lang: 'lang',\n    reputation: 0,\n    timestamp: 1654933730433,\n    users: 300\n  }\n};\n\nconst Guilds = props => {\n  const {\n    0: guilds,\n    1: setGuilds\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props === null || props === void 0 ? void 0 : props.data);\n  const {\n    0: portrait,\n    1: setPortrait\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  const {\n    theme\n  } = (0,_context_SettingsContext__WEBPACK_IMPORTED_MODULE_4__.useSettings)();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    function handleResize() {\n      setPortrait(window.innerWidth < window.innerHeight);\n    }\n\n    if (false) {}\n  }, [portrait]);\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment, {\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_2___default()), {\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"title\", {\n        children: \"Callouts Evolved | Guilds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"meta\", {\n        name: \"description\",\n        content: \"Join guilds focused on efficiently completing any video game activity.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, undefined)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"h1\", {\n        children: \"Guilds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"p\", {\n        children: \"Callouts Evolved will feature a public social system that allows users to form permanent groups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"p\", {\n        children: \"Each blog post will have a unique guild that any other author can join. These guilds will allow authors to write blog posts that meet all legal requirements, provide proof that requirements are met, and allow for peer review of articles.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"p\", {\n        children: \"Normal groups will have access to rooms dedicated to announcements, chat, discord, events, faq, rules, support, and a markdown based custom introduction screen.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"h2\", {\n        children: \"How does this help us reach our dream?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"p\", {\n        children: \"Firstly, we need to provide an in house solution for our authors to properly produce, research, cite, and address legal concerns for each blog post. Such a platform is not far off from a dedicated social area and we believe that a first party gamer centric approach with a focus on accessibility will allow our audience to find more like minded individuals to complete end game activities with.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, undefined)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, undefined), portrait, /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: portrait ? '1fr' : '280px auto'\n      },\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"div\", {\n        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"h4\", {\n          children: \"Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"p\", {\n          children: \"Form to filter guilds based on name, description, laungauge, or blog post (authors only), and sort based on activity, repuation, or users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, undefined)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"div\", {\n        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"h4\", {\n          children: \"Guilds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, undefined), Object.entries(guilds).slice(0, 20).map(([key, data]) => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"span\", {\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_3___default()), {\n            href: `/guild/${key}?room=${data.defaultRoom}`,\n            passHref: true,\n            children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"a\", {\n              className: `guildLink${guilds === {\n                preload\n              } ? ' sr-only' : ''}`,\n              children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"div\", {\n                className: \"guildBadge\",\n                children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"span\", {\n                  className: \"guildImageWrapper\",\n                  children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"img\", {\n                    src: data.guildPhotoURL,\n                    alt: data.displayName,\n                    height: 192,\n                    width: 144\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 95,\n                    columnNumber: 25\n                  }, undefined)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 23\n                }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"span\", {\n                  children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"p\", {\n                    className: \"guildName\",\n                    children: `(${data.lang.toUpperCase()}) ${data.displayName}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 25\n                  }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"small\", {\n                    className: \"guildReputation\",\n                    children: `Reputation ${data.reputation}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 25\n                  }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"small\", {\n                    className: \"guildUsers\",\n                    children: `Users ${data.users}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 25\n                  }, undefined)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 23\n                }, undefined)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 21\n              }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"p\", {\n                className: \"guildDescription\",\n                children: `${data.description}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 21\n              }, undefined)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, undefined)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"div\", {\n            className: \"guildFooter\",\n            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"span\", {\n              children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_3___default()), {\n                href: `/guild/${key}?room=${data.defaultRoom}`,\n                passHref: true,\n                children: \"Join Guild\"\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 21\n              }, undefined)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"span\", {\n              className: \"btn-like-wrapper\",\n              children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"button\", {\n                children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(_assets_ChevronIcon__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                  width: \"1em\",\n                  height: \"1em\",\n                  style: {\n                    width: '1rem',\n                    height: '1rem'\n                  },\n                  title: \"Dislike Icon\",\n                  fill: data.like === false ? `rgb(${theme.bbc})` : `rgb(${theme.mca})`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 23\n                }, undefined)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 21\n              }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(\"button\", {\n                children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(_assets_ChevronIcon__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                  height: \"1em\",\n                  style: {\n                    transform: 'rotate(180deg)',\n                    width: '1rem',\n                    height: '1rem'\n                  },\n                  title: \"Like Icon\",\n                  width: \"1em\",\n                  fill: data.like ? `rgb(${theme.bbc})` : `rgb(${theme.mca})`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 23\n                }, undefined)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 21\n              }, undefined)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 19\n            }, undefined)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, undefined)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, undefined))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, undefined)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, undefined)]\n  }, void 0, true);\n};\n\nconst getServerSideProps = async () => {\n  try {\n    return {\n      props: {\n        data: _objectSpread({}, preload)\n      }\n    };\n  } catch (error) {\n    console.error(error.message);\n    return {\n      props: {\n        data: 'error'\n      }\n    };\n  }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Guilds);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/guilds.js\n");

/***/ }),

/***/ "./stripe/isUserPremium.js":
/*!*********************************!*\
  !*** ./stripe/isUserPremium.js ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isUserPremium)\n/* harmony export */ });\n/* harmony import */ var _firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../firebase/firebaseClient */ \"./firebase/firebaseClient.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_0__]);\n_firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n\nasync function isUserPremium() {\n  try {\n    var _auth$currentUser, _auth$currentUser2, _decodedToken$claims;\n\n    await ((_auth$currentUser = _firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken(true));\n    const decodedToken = await ((_auth$currentUser2 = _firebase_firebaseClient__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) === null || _auth$currentUser2 === void 0 ? void 0 : _auth$currentUser2.getIdTokenResult());\n    return decodedToken !== null && decodedToken !== void 0 && (_decodedToken$claims = decodedToken.claims) !== null && _decodedToken$claims !== void 0 && _decodedToken$claims.stripeRole ? true : false;\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHJpcGUvaXNVc2VyUHJlbWl1bS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBRWUsZUFBZUMsYUFBZixHQUErQjtBQUM1QyxNQUFJO0FBQUE7O0FBQ0YsZ0NBQU1ELHNFQUFOLHNEQUFNLGtCQUFrQkcsVUFBbEIsQ0FBNkIsSUFBN0IsQ0FBTjtBQUNBLFVBQU1DLFlBQVksR0FBRyw2QkFBTUosc0VBQU4sdURBQU0sbUJBQWtCSyxnQkFBbEIsRUFBTixDQUFyQjtBQUNBLFdBQU9ELFlBQVksU0FBWixJQUFBQSxZQUFZLFdBQVosNEJBQUFBLFlBQVksQ0FBRUUsTUFBZCxzRUFBc0JDLFVBQXRCLEdBQW1DLElBQW5DLEdBQTBDLEtBQWpEO0FBQ0QsR0FKRCxDQUlFLE9BQU9DLEtBQVAsRUFBYztBQUNkQyxJQUFBQSxPQUFPLENBQUNELEtBQVIsQ0FBY0EsS0FBSyxDQUFDRSxPQUFwQjtBQUNEO0FBQ0YsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGxvdXRzZXZvbHZlZC8uL3N0cmlwZS9pc1VzZXJQcmVtaXVtLmpzPzllYjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXV0aCB9IGZyb20gXCIuLi9maXJlYmFzZS9maXJlYmFzZUNsaWVudFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaXNVc2VyUHJlbWl1bSgpIHtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgYXV0aC5jdXJyZW50VXNlcj8uZ2V0SWRUb2tlbih0cnVlKTtcclxuICAgIGNvbnN0IGRlY29kZWRUb2tlbiA9IGF3YWl0IGF1dGguY3VycmVudFVzZXI/LmdldElkVG9rZW5SZXN1bHQoKTtcclxuICAgIHJldHVybiBkZWNvZGVkVG9rZW4/LmNsYWltcz8uc3RyaXBlUm9sZSA/IHRydWUgOiBmYWxzZTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnJvci5tZXNzYWdlKTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbImF1dGgiLCJpc1VzZXJQcmVtaXVtIiwiY3VycmVudFVzZXIiLCJnZXRJZFRva2VuIiwiZGVjb2RlZFRva2VuIiwiZ2V0SWRUb2tlblJlc3VsdCIsImNsYWltcyIsInN0cmlwZVJvbGUiLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./stripe/isUserPremium.js\n");

/***/ }),

/***/ "./stripe/usePremiumStatus.js":
/*!************************************!*\
  !*** ./stripe/usePremiumStatus.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _isUserPremium__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isUserPremium */ \"./stripe/isUserPremium.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_isUserPremium__WEBPACK_IMPORTED_MODULE_1__]);\n_isUserPremium__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n\n\n\nconst usePremiumStatus = user => {\n  const {\n    0: premiumStatus,\n    1: setPremiumStatus\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (user) {\n      const checkPremiumStatus = async () => {\n        setPremiumStatus(await (0,_isUserPremium__WEBPACK_IMPORTED_MODULE_1__[\"default\"])());\n      };\n\n      try {\n        checkPremiumStatus();\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }, [user]);\n  return premiumStatus;\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (usePremiumStatus);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHJpcGUvdXNlUHJlbWl1bVN0YXR1cy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFFQTs7QUFFQSxNQUFNRyxnQkFBZ0IsR0FBSUMsSUFBRCxJQUFVO0FBQ2pDLFFBQU07QUFBQSxPQUFDQyxhQUFEO0FBQUEsT0FBZ0JDO0FBQWhCLE1BQW9DTCwrQ0FBUSxDQUFDLEtBQUQsQ0FBbEQ7QUFFQUQsRUFBQUEsZ0RBQVMsQ0FBQyxNQUFNO0FBQ2QsUUFBSUksSUFBSixFQUFVO0FBQ1IsWUFBTUcsa0JBQWtCLEdBQUcsWUFBWTtBQUNyQ0QsUUFBQUEsZ0JBQWdCLENBQUMsTUFBTUosMERBQWEsRUFBcEIsQ0FBaEI7QUFDRCxPQUZEOztBQUdBLFVBQUk7QUFDRkssUUFBQUEsa0JBQWtCO0FBQ25CLE9BRkQsQ0FFRSxPQUFPQyxLQUFQLEVBQWM7QUFDZEMsUUFBQUEsT0FBTyxDQUFDRCxLQUFSLENBQWNBLEtBQWQ7QUFDRDtBQUNGO0FBQ0YsR0FYUSxFQVdOLENBQUNKLElBQUQsQ0FYTSxDQUFUO0FBYUEsU0FBT0MsYUFBUDtBQUNELENBakJEOztBQW1CQSxpRUFBZUYsZ0JBQWYsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGxvdXRzZXZvbHZlZC8uL3N0cmlwZS91c2VQcmVtaXVtU3RhdHVzLmpzPzllMjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCBpc1VzZXJQcmVtaXVtIGZyb20gJy4vaXNVc2VyUHJlbWl1bSc7XHJcblxyXG5jb25zdCB1c2VQcmVtaXVtU3RhdHVzID0gKHVzZXIpID0+IHtcclxuICBjb25zdCBbcHJlbWl1bVN0YXR1cywgc2V0UHJlbWl1bVN0YXR1c10gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAodXNlcikge1xyXG4gICAgICBjb25zdCBjaGVja1ByZW1pdW1TdGF0dXMgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgc2V0UHJlbWl1bVN0YXR1cyhhd2FpdCBpc1VzZXJQcmVtaXVtKCkpO1xyXG4gICAgICB9O1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNoZWNrUHJlbWl1bVN0YXR1cygpO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwgW3VzZXJdKTtcclxuXHJcbiAgcmV0dXJuIHByZW1pdW1TdGF0dXM7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1c2VQcmVtaXVtU3RhdHVzO1xyXG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJpc1VzZXJQcmVtaXVtIiwidXNlUHJlbWl1bVN0YXR1cyIsInVzZXIiLCJwcmVtaXVtU3RhdHVzIiwic2V0UHJlbWl1bVN0YXR1cyIsImNoZWNrUHJlbWl1bVN0YXR1cyIsImVycm9yIiwiY29uc29sZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./stripe/usePremiumStatus.js\n");

/***/ }),

/***/ "./node_modules/next/dist/lib/is-error.js":
/*!************************************************!*\
  !*** ./node_modules/next/dist/lib/is-error.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = isError;\nexports.getProperError = getProperError;\nvar _isPlainObject = __webpack_require__(/*! ../shared/lib/is-plain-object */ \"../shared/lib/is-plain-object\");\nfunction isError(err) {\n    return typeof err === 'object' && err !== null && 'name' in err && 'message' in err;\n}\nfunction getProperError(err) {\n    if (isError(err)) {\n        return err;\n    }\n    if (true) {\n        // provide better error for case where `throw undefined`\n        // is called in development\n        if (typeof err === 'undefined') {\n            return new Error('An undefined error was thrown, ' + 'see here for more info: https://nextjs.org/docs/messages/threw-undefined');\n        }\n        if (err === null) {\n            return new Error('A null error was thrown, ' + 'see here for more info: https://nextjs.org/docs/messages/threw-undefined');\n        }\n    }\n    return new Error((0, _isPlainObject).isPlainObject(err) ? JSON.stringify(err) : err + '');\n}\n\n//# sourceMappingURL=is-error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9pcy1lcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2Ysc0JBQXNCO0FBQ3RCLHFCQUFxQixtQkFBTyxDQUFDLG9FQUErQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsSUFBc0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGxvdXRzZXZvbHZlZC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvbGliL2lzLWVycm9yLmpzPzE3OGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0Vycm9yO1xuZXhwb3J0cy5nZXRQcm9wZXJFcnJvciA9IGdldFByb3BlckVycm9yO1xudmFyIF9pc1BsYWluT2JqZWN0ID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvaXMtcGxhaW4tb2JqZWN0XCIpO1xuZnVuY3Rpb24gaXNFcnJvcihlcnIpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVyciA9PT0gJ29iamVjdCcgJiYgZXJyICE9PSBudWxsICYmICduYW1lJyBpbiBlcnIgJiYgJ21lc3NhZ2UnIGluIGVycjtcbn1cbmZ1bmN0aW9uIGdldFByb3BlckVycm9yKGVycikge1xuICAgIGlmIChpc0Vycm9yKGVycikpIHtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgIC8vIHByb3ZpZGUgYmV0dGVyIGVycm9yIGZvciBjYXNlIHdoZXJlIGB0aHJvdyB1bmRlZmluZWRgXG4gICAgICAgIC8vIGlzIGNhbGxlZCBpbiBkZXZlbG9wbWVudFxuICAgICAgICBpZiAodHlwZW9mIGVyciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0FuIHVuZGVmaW5lZCBlcnJvciB3YXMgdGhyb3duLCAnICsgJ3NlZSBoZXJlIGZvciBtb3JlIGluZm86IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL3RocmV3LXVuZGVmaW5lZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0EgbnVsbCBlcnJvciB3YXMgdGhyb3duLCAnICsgJ3NlZSBoZXJlIGZvciBtb3JlIGluZm86IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL3RocmV3LXVuZGVmaW5lZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgRXJyb3IoKDAsIF9pc1BsYWluT2JqZWN0KS5pc1BsYWluT2JqZWN0KGVycikgPyBKU09OLnN0cmluZ2lmeShlcnIpIDogZXJyICsgJycpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy1lcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/lib/is-error.js\n");

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/client/link */ \"./node_modules/next/dist/client/link.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9saW5rLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlHQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGxvdXRzZXZvbHZlZC8uL25vZGVfbW9kdWxlcy9uZXh0L2xpbmsuanM/NzViMyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9jbGllbnQvbGluaycpXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/link.js\n");

/***/ }),

/***/ "next/dist/compiled/react-is":
/*!**********************************************!*\
  !*** external "next/dist/compiled/react-is" ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/react-is");

/***/ }),

/***/ "../../../server/denormalize-page-path":
/*!************************************************************!*\
  !*** external "next/dist/server/denormalize-page-path.js" ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/denormalize-page-path.js");

/***/ }),

/***/ "../i18n/normalize-locale-path":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/i18n/normalize-locale-path.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/i18n/normalize-locale-path.js");

/***/ }),

/***/ "../shared/lib/is-plain-object":
/*!**********************************************************!*\
  !*** external "next/dist/shared/lib/is-plain-object.js" ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/is-plain-object.js");

/***/ }),

/***/ "../mitt":
/*!***********************************************!*\
  !*** external "next/dist/shared/lib/mitt.js" ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/mitt.js");

/***/ }),

/***/ "../shared/lib/router-context":
/*!*********************************************************!*\
  !*** external "next/dist/shared/lib/router-context.js" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router-context.js");

/***/ }),

/***/ "../shared/lib/router/utils/get-asset-path-from-route":
/*!*********************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-asset-path-from-route.js" ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-asset-path-from-route.js");

/***/ }),

/***/ "./utils/get-middleware-regex":
/*!****************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-middleware-regex.js" ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-middleware-regex.js");

/***/ }),

/***/ "./utils/is-dynamic":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/is-dynamic.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/is-dynamic.js");

/***/ }),

/***/ "./utils/parse-relative-url":
/*!**************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/parse-relative-url.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/parse-relative-url.js");

/***/ }),

/***/ "./utils/querystring":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/querystring.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/querystring.js");

/***/ }),

/***/ "./utils/resolve-rewrites":
/*!************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/resolve-rewrites.js" ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/resolve-rewrites.js");

/***/ }),

/***/ "./utils/route-matcher":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-matcher.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-matcher.js");

/***/ }),

/***/ "./utils/route-regex":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-regex.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-regex.js");

/***/ }),

/***/ "../shared/lib/utils":
/*!************************************************!*\
  !*** external "next/dist/shared/lib/utils.js" ***!
  \************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/utils.js");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/head");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/router");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "firebase/app":
/*!*******************************!*\
  !*** external "firebase/app" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = import("firebase/app");;

/***/ }),

/***/ "firebase/auth":
/*!********************************!*\
  !*** external "firebase/auth" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = import("firebase/auth");;

/***/ }),

/***/ "firebase/database":
/*!************************************!*\
  !*** external "firebase/database" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = import("firebase/database");;

/***/ }),

/***/ "firebase/firestore":
/*!*************************************!*\
  !*** external "firebase/firestore" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = import("firebase/firestore");;

/***/ }),

/***/ "firebase/storage":
/*!***********************************!*\
  !*** external "firebase/storage" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = import("firebase/storage");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/guilds.js"));
module.exports = __webpack_exports__;

})();